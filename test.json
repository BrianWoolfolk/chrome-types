{
	"id": 0,
	"name": "chrome-types",
	"kind": 0,
	"kindString": "Project",
	"flags": {},
	"originalName": "",
	"children": [
		{
			"id": 7,
			"name": "chrome",
			"kind": 2,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 9,
					"name": "accessibilityFeatures",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.accessibilityFeatures</code> API to manage Chrome's\naccessibility features. This API relies on the <a\nhref='types#ChromeSetting'>ChromeSetting prototype of the type API</a> for\ngetting and setting individual accessibility features. In order to get\nfeature states the extension must request\n<code>accessibilityFeatures.read</code> permission. For modifying feature\nstate, the extension needs <code>accessibilityFeatures.modify</code>\npermission. Note that <code>accessibilityFeatures.modify</code> does not\nimply <code>accessibilityFeatures.read</code> permission.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "accessibilityFeatures"
							},
							{
								"tag": "chrome-permission",
								"text": "accessibilityFeatures.modify"
							},
							{
								"tag": "chrome-permission",
								"text": "accessibilityFeatures.read\n"
							}
						]
					},
					"children": [
						{
							"id": 24,
							"name": "animationPolicy",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "<code>get()</code> requires <code>accessibilityFeatures.read</code>\npermission. <code>set()</code> and <code>clear()</code> require\n<code>accessibilityFeatures.modify</code> permission."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 181,
									"character": 32
								}
							],
							"type": {
								"type": "reference",
								"id": 6124,
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "allowed"
											},
											{
												"type": "literal",
												"value": "once"
											},
											{
												"type": "literal",
												"value": "none"
											}
										]
									}
								],
								"name": "types.ChromeSetting"
							}
						},
						{
							"id": 15,
							"name": "autoclick",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "<p><strong>ChromeOS only.</strong></p><p>Auto mouse click after mouse stops\nmoving. The value indicates whether the feature is enabled or not.\n<code>get()</code> requires <code>accessibilityFeatures.read</code>\npermission. <code>set()</code> and <code>clear()</code> require\n<code>accessibilityFeatures.modify</code> permission.</p>"
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 102,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 6124,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "types.ChromeSetting"
							}
						},
						{
							"id": 17,
							"name": "caretHighlight",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "<p><strong>ChromeOS only.</strong></p><p>Caret highlighting. The value\nindicates whether the feature is enabled or not. <code>get()</code> requires\n<code>accessibilityFeatures.read</code> permission. <code>set()</code> and\n<code>clear()</code> require <code>accessibilityFeatures.modify</code>\npermission.</p>"
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 120,
									"character": 31
								}
							],
							"type": {
								"type": "reference",
								"id": 6124,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "types.ChromeSetting"
							}
						},
						{
							"id": 19,
							"name": "cursorColor",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "<p><strong>ChromeOS only.</strong></p><p>Cursor color. The value indicates\nwhether the feature is enabled or not, doesn't indicate the color of it.\n<code>get()</code> requires <code>accessibilityFeatures.read</code>\npermission. <code>set()</code> and <code>clear()</code> require\n<code>accessibilityFeatures.modify</code> permission.</p>"
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 138,
									"character": 28
								}
							],
							"type": {
								"type": "reference",
								"id": 6124,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "types.ChromeSetting"
							}
						},
						{
							"id": 18,
							"name": "cursorHighlight",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "<p><strong>ChromeOS only.</strong></p><p>Cursor highlighting. The value\nindicates whether the feature is enabled or not. <code>get()</code> requires\n<code>accessibilityFeatures.read</code> permission. <code>set()</code> and\n<code>clear()</code> require <code>accessibilityFeatures.modify</code>\npermission.</p>"
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 129,
									"character": 32
								}
							],
							"type": {
								"type": "reference",
								"id": 6124,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "types.ChromeSetting"
							}
						},
						{
							"id": 20,
							"name": "dockedMagnifier",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "<p><strong>ChromeOS only.</strong></p><p>Docked magnifier. The value\nindicates whether docked magnifier feature is enabled or not.\n<code>get()</code> requires <code>accessibilityFeatures.read</code>\npermission. <code>set()</code> and <code>clear()</code> require\n<code>accessibilityFeatures.modify</code> permission.</p>"
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 147,
									"character": 32
								}
							],
							"type": {
								"type": "reference",
								"id": 6124,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "types.ChromeSetting"
							}
						},
						{
							"id": 21,
							"name": "focusHighlight",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "<p><strong>ChromeOS only.</strong></p><p>Focus highlighting. The value\nindicates whether the feature is enabled or not. <code>get()</code> requires\n<code>accessibilityFeatures.read</code> permission. <code>set()</code> and\n<code>clear()</code> require <code>accessibilityFeatures.modify</code>\npermission.</p>"
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 156,
									"character": 31
								}
							],
							"type": {
								"type": "reference",
								"id": 6124,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "types.ChromeSetting"
							}
						},
						{
							"id": 13,
							"name": "highContrast",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "<p><strong>ChromeOS only.</strong></p><p>High contrast rendering mode. The\nvalue indicates whether the feature is enabled or not. <code>get()</code>\nrequires <code>accessibilityFeatures.read</code> permission.\n<code>set()</code> and <code>clear()</code> require\n<code>accessibilityFeatures.modify</code> permission.</p>"
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 84,
									"character": 29
								}
							],
							"type": {
								"type": "reference",
								"id": 6124,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "types.ChromeSetting"
							}
						},
						{
							"id": 11,
							"name": "largeCursor",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "<p><strong>ChromeOS only.</strong></p><p>Enlarged cursor. The value indicates\nwhether the feature is enabled or not. <code>get()</code> requires\n<code>accessibilityFeatures.read</code> permission. <code>set()</code> and\n<code>clear()</code> require <code>accessibilityFeatures.modify</code>\npermission.</p>"
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 66,
									"character": 28
								}
							],
							"type": {
								"type": "reference",
								"id": 6124,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "types.ChromeSetting"
							}
						},
						{
							"id": 14,
							"name": "screenMagnifier",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "<p><strong>ChromeOS only.</strong></p><p>Full screen magnification. The value\nindicates whether the feature is enabled or not. <code>get()</code> requires\n<code>accessibilityFeatures.read</code> permission. <code>set()</code> and\n<code>clear()</code> require <code>accessibilityFeatures.modify</code>\npermission.</p>"
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 93,
									"character": 32
								}
							],
							"type": {
								"type": "reference",
								"id": 6124,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "types.ChromeSetting"
							}
						},
						{
							"id": 22,
							"name": "selectToSpeak",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "<p><strong>ChromeOS only.</strong></p><p>Select-to-speak. The value indicates\nwhether the feature is enabled or not. <code>get()</code> requires\n<code>accessibilityFeatures.read</code> permission. <code>set()</code> and\n<code>clear()</code> require <code>accessibilityFeatures.modify</code>\npermission.</p>"
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 165,
									"character": 30
								}
							],
							"type": {
								"type": "reference",
								"id": 6124,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "types.ChromeSetting"
							}
						},
						{
							"id": 10,
							"name": "spokenFeedback",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "<p><strong>ChromeOS only.</strong></p><p>Spoken feedback (text-to-speech).\nThe value indicates whether the feature is enabled or not. <code>get()</code>\nrequires <code>accessibilityFeatures.read</code> permission.\n<code>set()</code> and <code>clear()</code> require\n<code>accessibilityFeatures.modify</code> permission.</p>"
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 57,
									"character": 31
								}
							],
							"type": {
								"type": "reference",
								"id": 6124,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "types.ChromeSetting"
							}
						},
						{
							"id": 12,
							"name": "stickyKeys",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "<p><strong>ChromeOS only.</strong></p><p>Sticky modifier keys (like shift or\nalt). The value indicates whether the feature is enabled or not.\n<code>get()</code> requires <code>accessibilityFeatures.read</code>\npermission. <code>set()</code> and <code>clear()</code> require\n<code>accessibilityFeatures.modify</code> permission.</p>"
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 75,
									"character": 27
								}
							],
							"type": {
								"type": "reference",
								"id": 6124,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "types.ChromeSetting"
							}
						},
						{
							"id": 23,
							"name": "switchAccess",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "<p><strong>ChromeOS only.</strong></p><p>Switch Access. The value indicates\nwhether the feature is enabled or not. <code>get()</code> requires\n<code>accessibilityFeatures.read</code> permission. <code>set()</code> and\n<code>clear()</code> require <code>accessibilityFeatures.modify</code>\npermission.</p>"
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 174,
									"character": 29
								}
							],
							"type": {
								"type": "reference",
								"id": 6124,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "types.ChromeSetting"
							}
						},
						{
							"id": 16,
							"name": "virtualKeyboard",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "<p><strong>ChromeOS only.</strong></p><p>Virtual on-screen keyboard. The\nvalue indicates whether the feature is enabled or not. <code>get()</code>\nrequires <code>accessibilityFeatures.read</code> permission.\n<code>set()</code> and <code>clear()</code> require\n<code>accessibilityFeatures.modify</code> permission.</p>"
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 111,
									"character": 32
								}
							],
							"type": {
								"type": "reference",
								"id": 6124,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "types.ChromeSetting"
							}
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								24,
								15,
								17,
								19,
								18,
								20,
								21,
								13,
								11,
								14,
								22,
								10,
								12,
								23,
								16
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 49,
							"character": 40
						}
					]
				},
				{
					"id": 25,
					"name": "action",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.action</code> API to control the extension's icon in the\nGoogle Chrome toolbar.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "action\n"
							}
						]
					},
					"children": [
						{
							"id": 118,
							"name": "TabDetails",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 119,
									"name": "tabId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The ID of the tab to query state for. If no tab is specified, the\nnon-tab-specific state is returned."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 198,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										119
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 193,
									"character": 31
								}
							]
						},
						{
							"id": 120,
							"name": "onClicked",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when an action icon is clicked.  This event will not fire if the action\nhas a popup."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 423,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 121,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 423,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 122,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 123,
															"name": "tab",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reference",
																"id": 5892,
																"name": "tabs.Tab"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 112,
							"name": "disable",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 414,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 113,
									"name": "disable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Disables the action for a tab."
									},
									"parameters": [
										{
											"id": 114,
											"name": "tabId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The id of the tab for which you want to modify the action."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 115,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 116,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 416,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 117,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 106,
							"name": "enable",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 403,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 107,
									"name": "enable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Enables the action for a tab. By default, actions are enabled."
									},
									"parameters": [
										{
											"id": 108,
											"name": "tabId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The id of the tab for which you want to modify the action."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 109,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 110,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 405,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 111,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 99,
							"name": "getBadgeBackgroundColor",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 390,
									"character": 43
								}
							],
							"signatures": [
								{
									"id": 100,
									"name": "getBadgeBackgroundColor",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the background color of the action."
									},
									"parameters": [
										{
											"id": 101,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 118,
												"name": "TabDetails"
											}
										},
										{
											"id": 102,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 103,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 392,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 104,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 105,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 1064,
																		"name": "browserAction.ColorArray"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 83,
							"name": "getBadgeText",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 351,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 84,
									"name": "getBadgeText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the badge text of the action. If no tab is specified, the\nnon-tab-specific badge text is returned. If <a\nhref='declarativeNetRequest#setExtensionActionOptions'>displayActionCountAsBadgeText</a> is enabled, a placeholder text will be returned unless the <a href='declare_permissions#declarativeNetRequestFeedback'>declarativeNetRequestFeedback</a> permission is present or tab-specific badge text was provided."
									},
									"parameters": [
										{
											"id": 85,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 118,
												"name": "TabDetails"
											}
										},
										{
											"id": 86,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 87,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 353,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 88,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 89,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 67,
							"name": "getPopup",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 311,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 68,
									"name": "getPopup",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the html document set as the popup for this action."
									},
									"parameters": [
										{
											"id": 69,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 118,
												"name": "TabDetails"
											}
										},
										{
											"id": 70,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 71,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 313,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 72,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 73,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 35,
							"name": "getTitle",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 230,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 36,
									"name": "getTitle",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the title of the action."
									},
									"parameters": [
										{
											"id": 37,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 118,
												"name": "TabDetails"
											}
										},
										{
											"id": 38,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 39,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 232,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 40,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 41,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 90,
							"name": "setBadgeBackgroundColor",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 364,
									"character": 43
								}
							],
							"signatures": [
								{
									"id": 91,
									"name": "setBadgeBackgroundColor",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the background color for the badge."
									},
									"parameters": [
										{
											"id": 92,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 93,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 94,
															"name": "color",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "An array of four integers in the range [0,255] that make up the RGBA color of\nthe badge. For example, opaque red is <code>[255, 0, 0, 255]</code>. Can also\nbe a string with a CSS value, with opaque red being <code>#FF0000</code> or\n<code>#F00</code>."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 372,
																	"character": 13
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "reference",
																		"id": 1064,
																		"name": "browserAction.ColorArray"
																	}
																]
															}
														},
														{
															"id": 95,
															"name": "tabId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Limits the change to when a particular tab is selected. Automatically resets\nwhen the tab is closed."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 378,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																94,
																95
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 365,
															"character": 14
														}
													]
												}
											}
										},
										{
											"id": 96,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 97,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 380,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 98,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 74,
							"name": "setBadgeText",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 325,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 75,
									"name": "setBadgeText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the badge text for the action. The badge is displayed on top of the\nicon."
									},
									"parameters": [
										{
											"id": 76,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 77,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 79,
															"name": "tabId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Limits the change to when a particular tab is selected. Automatically resets\nwhen the tab is closed."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 337,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 78,
															"name": "text",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "Any number of characters can be passed, but only about four can fit in the\nspace."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 331,
																	"character": 12
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																79,
																78
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 326,
															"character": 14
														}
													]
												}
											}
										},
										{
											"id": 80,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 81,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 339,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 82,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 42,
							"name": "setIcon",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 246,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 43,
									"name": "setIcon",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the icon for the action. The icon can be specified either as the path to\nan image file or as the pixel data from a canvas element, or as dictionary of\neither one of those. Either the <b>path</b> or the <b>imageData</b> property\nmust be specified."
									},
									"parameters": [
										{
											"id": 44,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 45,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 46,
															"name": "imageData",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Either an ImageData object or a dictionary {size -> ImageData} representing\nicon to be set. If the icon is specified as a dictionary, the actual image to\nbe used is chosen depending on screen's pixel density. If the number of image\npixels that fit into one screen space unit equals <code>scale</code>, then\nimage with size <code>scale</code> * n will be selected, where n is the size\nof the icon in the UI. At least one image must be specified. Note that\n'details.imageData = foo' is equivalent to 'details.imageData = {'16': foo}'"
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 257,
																	"character": 17
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "reference",
																		"id": 1065,
																		"name": "browserAction.ImageDataType"
																	},
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 47,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 257,
																					"character": 49
																				}
																			],
																			"indexSignature": {
																				"id": 48,
																				"name": "__index",
																				"kind": 8192,
																				"kindString": "Index signature",
																				"flags": {},
																				"parameters": [
																					{
																						"id": 49,
																						"name": "name",
																						"kind": 32768,
																						"flags": {},
																						"type": {
																							"type": "intrinsic",
																							"name": "string"
																						}
																					}
																				],
																				"type": {
																					"type": "intrinsic",
																					"name": "any"
																				}
																			}
																		}
																	}
																]
															}
														},
														{
															"id": 50,
															"name": "path",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Either a relative image path or a dictionary {size -> relative image path}\npointing to icon to be set. If the icon is specified as a dictionary, the\nactual image to be used is chosen depending on screen's pixel density. If the\nnumber of image pixels that fit into one screen space unit equals\n<code>scale</code>, then image with size <code>scale</code> * n will be\nselected, where n is the size of the icon in the UI. At least one image must\nbe specified. Note that 'details.path = foo' is equivalent to 'details.path =\n{'16': foo}'"
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 269,
																	"character": 12
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 51,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 269,
																					"character": 23
																				}
																			],
																			"indexSignature": {
																				"id": 52,
																				"name": "__index",
																				"kind": 8192,
																				"kindString": "Index signature",
																				"flags": {},
																				"parameters": [
																					{
																						"id": 53,
																						"name": "name",
																						"kind": 32768,
																						"flags": {},
																						"type": {
																							"type": "intrinsic",
																							"name": "string"
																						}
																					}
																				],
																				"type": {
																					"type": "intrinsic",
																					"name": "any"
																				}
																			}
																		}
																	}
																]
															}
														},
														{
															"id": 54,
															"name": "tabId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Limits the change to when a particular tab is selected. Automatically resets\nwhen the tab is closed."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 275,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																46,
																50,
																54
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 247,
															"character": 14
														}
													]
												}
											}
										},
										{
											"id": 55,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 56,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 277,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 57,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 58,
							"name": "setPopup",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 287,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 59,
									"name": "setPopup",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the html document to be opened as a popup when the user clicks on the\naction's icon."
									},
									"parameters": [
										{
											"id": 60,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 61,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 63,
															"name": "popup",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "The html file to show in a popup.  If set to the empty string (''), no popup\nis shown."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 299,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 62,
															"name": "tabId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Limits the change to when a particular tab is selected. Automatically resets\nwhen the tab is closed."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 293,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																63,
																62
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 288,
															"character": 14
														}
													]
												}
											}
										},
										{
											"id": 64,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 65,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 301,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 66,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 26,
							"name": "setTitle",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 207,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 27,
									"name": "setTitle",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the title of the action. This shows up in the tooltip."
									},
									"parameters": [
										{
											"id": 28,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 29,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 31,
															"name": "tabId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Limits the change to when a particular tab is selected. Automatically resets\nwhen the tab is closed."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 218,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 30,
															"name": "title",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "The string the action should display when moused over."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 212,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																31,
																30
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 208,
															"character": 14
														}
													]
												}
											}
										},
										{
											"id": 32,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 33,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 220,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 34,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								118
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								120
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								112,
								106,
								99,
								83,
								67,
								35,
								90,
								74,
								42,
								58,
								26
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 192,
							"character": 25
						}
					]
				},
				{
					"id": 124,
					"name": "alarms",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.alarms</code> API to schedule code to run\nperiodically\nor at a specified time in the future.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "alarms"
							},
							{
								"tag": "chrome-permission",
								"text": "alarms\n"
							}
						]
					},
					"children": [
						{
							"id": 162,
							"name": "Alarm",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 163,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Name of this alarm."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 448,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 165,
									"name": "periodInMinutes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "If not null, the alarm is a repeating alarm and will fire again in\n<var>periodInMinutes</var> minutes."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 461,
											"character": 21
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 164,
									"name": "scheduledTime",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Time at which this alarm was scheduled to fire, in milliseconds past the\nepoch (e.g. <code>Date.now() + n</code>).  For performance reasons, the alarm\nmay have been delayed an arbitrary amount beyond this."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 455,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										163,
										165,
										164
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 444,
									"character": 26
								}
							]
						},
						{
							"id": 166,
							"name": "AlarmCreateInfo",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 168,
									"name": "delayInMinutes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "<p>Length of time in minutes after which the <code>onAlarm</code> event\nshould fire.</p><p><!-- TODO: need minimum=0 --></p>"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 475,
											"character": 20
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 169,
									"name": "periodInMinutes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "<p>If set, the onAlarm event should fire every <var>periodInMinutes</var>\nminutes after the initial event specified by <var>when</var> or\n<var>delayInMinutes</var>.  If not set, the alarm will only fire\nonce.</p><p><!-- TODO: need minimum=0 --></p>"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 483,
											"character": 21
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 167,
									"name": "when",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Time at which the alarm should fire, in milliseconds past the epoch (e.g.\n<code>Date.now() + n</code>)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 469,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										168,
										169,
										167
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 464,
									"character": 36
								}
							]
						},
						{
							"id": 170,
							"name": "onAlarm",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when an alarm has elapsed. Useful for event pages."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 593,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 171,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 593,
													"character": 46
												}
											],
											"signatures": [
												{
													"id": 172,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 173,
															"name": "alarm",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "The alarm that has elapsed.\n"
															},
															"type": {
																"type": "reference",
																"id": 162,
																"name": "Alarm"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 149,
							"name": "clear",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 571,
									"character": 25
								}
							],
							"signatures": [
								{
									"id": 150,
									"name": "clear",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clears the alarm with the given name."
									},
									"parameters": [
										{
											"id": 151,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The name of the alarm to clear. Defaults to the empty string."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 152,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 153,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 573,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 154,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 155,
																	"name": "wasCleared",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "boolean"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 156,
							"name": "clearAll",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 584,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 157,
									"name": "clearAll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clears all alarms."
									},
									"parameters": [
										{
											"id": 158,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 159,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 585,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 160,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 161,
																	"name": "wasCleared",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "boolean"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 125,
							"name": "create",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 502,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 126,
									"name": "create",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "<p>Creates an alarm.  Near the time(s) specified by <var>alarmInfo</var>, the\n<code>onAlarm</code> event is fired. If there is another alarm with the same\nname (or no name if none is specified), it will be cancelled and replaced by\nthis alarm.</p><p>In order to reduce the load on the user's machine, Chrome\nlimits alarms to at most once every 1 minute but may delay them an arbitrary\namount more.  That is, setting <code>delayInMinutes</code> or\n<code>periodInMinutes</code> to less than <code>1</code> will not be honored\nand will cause a warning.  <code>when</code> can be set to less than 1 minute\nafter \"now\" without warning but won't actually cause the alarm to fire for at\nleast 1 minute.</p><p>To help you debug your app or extension, when you've\nloaded it unpacked, there's no limit to how often the alarm can fire.</p>"
									},
									"parameters": [
										{
											"id": 127,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Optional name to identify this alarm. Defaults to the empty string."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 128,
											"name": "alarmInfo",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Describes when the alarm should fire.  The initial time must be specified by either <var>when</var> or <var>delayInMinutes</var> (but not both).  If <var>periodInMinutes</var> is set, the alarm will repeat every <var>periodInMinutes</var> minutes after the initial event.  If neither <var>when</var> or <var>delayInMinutes</var> is set for a repeating alarm, <var>periodInMinutes</var> is used as the default for <var>delayInMinutes</var>.\n"
											},
											"type": {
												"type": "reference",
												"id": 166,
												"name": "AlarmCreateInfo"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								},
								{
									"id": 129,
									"name": "create",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "<p>Creates an alarm.  Near the time(s) specified by <var>alarmInfo</var>, the\n<code>onAlarm</code> event is fired. If there is another alarm with the same\nname (or no name if none is specified), it will be cancelled and replaced by\nthis alarm.</p><p>In order to reduce the load on the user's machine, Chrome\nlimits alarms to at most once every 1 minute but may delay them an arbitrary\namount more.  That is, setting <code>delayInMinutes</code> or\n<code>periodInMinutes</code> to less than <code>1</code> will not be honored\nand will cause a warning.  <code>when</code> can be set to less than 1 minute\nafter \"now\" without warning but won't actually cause the alarm to fire for at\nleast 1 minute.</p><p>To help you debug your app or extension, when you've\nloaded it unpacked, there's no limit to how often the alarm can fire.</p>"
									},
									"parameters": [
										{
											"id": 130,
											"name": "alarmInfo",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Describes when the alarm should fire.  The initial time must be specified by either <var>when</var> or <var>delayInMinutes</var> (but not both).  If <var>periodInMinutes</var> is set, the alarm will repeat every <var>periodInMinutes</var> minutes after the initial event.  If neither <var>when</var> or <var>delayInMinutes</var> is set for a repeating alarm, <var>periodInMinutes</var> is used as the default for <var>delayInMinutes</var>.\n"
											},
											"type": {
												"type": "reference",
												"id": 166,
												"name": "AlarmCreateInfo"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 131,
							"name": "get",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 533,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 132,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieves details about the specified alarm."
									},
									"parameters": [
										{
											"id": 133,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the alarm to get. Defaults to the empty string."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 134,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 135,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 535,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 136,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 137,
																	"name": "alarm",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 162,
																		"name": "Alarm"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								},
								{
									"id": 138,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieves details about the specified alarm."
									},
									"parameters": [
										{
											"id": 139,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 140,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 547,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 141,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 142,
																	"name": "alarm",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 162,
																		"name": "Alarm"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 143,
							"name": "getAll",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 558,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 144,
									"name": "getAll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets an array of all the alarms."
									},
									"parameters": [
										{
											"id": 145,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 146,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 559,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 147,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 148,
																	"name": "alarms",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 162,
																			"name": "Alarm"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								162,
								166
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								170
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								149,
								156,
								125,
								131,
								143
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 443,
							"character": 25
						}
					]
				},
				{
					"id": 174,
					"name": "app",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "none",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "app\n"
							}
						]
					},
					"children": [
						{
							"id": 188,
							"name": "DOMWindow",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 617,
									"character": 30
								}
							]
						},
						{
							"id": 187,
							"name": "Details",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "TODO (it's a manifest)"
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 614,
									"character": 28
								}
							]
						},
						{
							"id": 189,
							"name": "InstallState",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 620,
									"character": 28
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "not_installed"
									},
									{
										"type": "literal",
										"value": "installed"
									},
									{
										"type": "literal",
										"value": "disabled"
									}
								]
							}
						},
						{
							"id": 190,
							"name": "RunningState",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 622,
									"character": 28
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "running"
									},
									{
										"type": "literal",
										"value": "cannot_run"
									},
									{
										"type": "literal",
										"value": "ready_to_run"
									}
								]
							}
						},
						{
							"id": 185,
							"name": "getDetails",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 653,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 186,
									"name": "getDetails",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "TODO",
										"returns": "TODO\n"
									},
									"type": {
										"type": "reference",
										"id": 187,
										"name": "Details"
									}
								}
							]
						},
						{
							"id": 175,
							"name": "getIsInstalled",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 629,
									"character": 34
								}
							],
							"signatures": [
								{
									"id": 176,
									"name": "getIsInstalled",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "TODO",
										"returns": "TODO\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							]
						},
						{
							"id": 177,
							"name": "installState",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 637,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 178,
									"name": "installState",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "TODO"
									},
									"parameters": [
										{
											"id": 179,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 180,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 638,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 181,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 182,
																	"name": "state",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 189,
																		"name": "InstallState"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 183,
							"name": "runningState",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 646,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 184,
									"name": "runningState",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "TODO"
									},
									"type": {
										"type": "reference",
										"id": 190,
										"name": "RunningState"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								188,
								187
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								189,
								190
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								185,
								175,
								177,
								183
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 610,
							"character": 22
						}
					]
				},
				{
					"id": 191,
					"name": "automation",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "The <code>chrome.automation</code> API allows developers to access the\nautomation (accessibility) tree for the browser. The tree resembles the DOM\ntree, but only exposes the <em>semantic</em> structure of a page. It can be\nused to programmatically interact with a page by examining names, roles, and\nstates, listening for events, and performing actions on nodes.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "automation"
							},
							{
								"tag": "alpha",
								"text": "\n"
							}
						]
					},
					"children": [
						{
							"id": 273,
							"name": "AutomationEvent",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 276,
									"name": "eventFrom",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The source of this event."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 838,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 279,
									"name": "intents",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "A list of {@link automation.AutomationIntent}s associated with this event."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 850,
											"character": 13
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 269,
											"name": "AutomationIntent"
										}
									}
								},
								{
									"id": 277,
									"name": "mouseX",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Any mouse coordinates associated with this event."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 843,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 278,
									"name": "mouseY",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 845,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 280,
									"name": "stopPropagation",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Stops this event from further processing except for any remaining listeners\non {@link automation.AutomationEvent.target}."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 856,
											"character": 21
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 281,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 282,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 274,
									"name": "target",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The {@link automation.AutomationNode} to which the event was targeted."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 828,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 481,
										"name": "AutomationNode"
									}
								},
								{
									"id": 275,
									"name": "type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The type of the event."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 833,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 233,
										"name": "EventType"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										276,
										279,
										277,
										278,
										280,
										274,
										275
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 824,
									"character": 36
								}
							]
						},
						{
							"id": 269,
							"name": "AutomationIntent",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 270,
									"name": "command",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "A command associated with this AutomationIntent."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 811,
											"character": 13
										}
									],
									"type": {
										"type": "reference",
										"id": 244,
										"name": "IntentCommandType"
									}
								},
								{
									"id": 272,
									"name": "moveDirection",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "A move direction associated with this AutomationIntent."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 821,
											"character": 19
										}
									],
									"type": {
										"type": "reference",
										"id": 247,
										"name": "IntentMoveDirectionType"
									}
								},
								{
									"id": 271,
									"name": "textBoundary",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "A text boundary associated with this AutomationIntent."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 816,
											"character": 18
										}
									],
									"type": {
										"type": "reference",
										"id": 246,
										"name": "IntentTextBoundaryType"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										270,
										272,
										271
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 807,
									"character": 37
								}
							]
						},
						{
							"id": 481,
							"name": "AutomationNode",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 611,
									"name": "accessKey",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The key that activates this widget."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1629,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 530,
									"name": "activeDescendant",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The node referred to by <code>aria-activedescendant</code>, where applicable"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1247,
											"character": 22
										}
									],
									"type": {
										"type": "reference",
										"id": 481,
										"name": "AutomationNode"
									}
								},
								{
									"id": 531,
									"name": "activeDescendantFor",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Reverse relationship for active descendant."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1252,
											"character": 25
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 481,
											"name": "AutomationNode"
										}
									}
								},
								{
									"id": 769,
									"name": "addEventListener",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Adds a listener for the given event type and event phase.",
										"tags": [
											{
												"tag": "param",
												"text": "",
												"param": "addEventListener.eventType"
											},
											{
												"tag": "param",
												"text": "A listener for events on an <code>AutomationNode</code>.",
												"param": "addEventListener.listener"
											},
											{
												"tag": "param",
												"text": "",
												"param": "addEventListener.listener.event"
											},
											{
												"tag": "param",
												"text": "\n",
												"param": "addEventListener.capture"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2011,
											"character": 22
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 770,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 771,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 772,
															"name": "eventType",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"id": 233,
																"name": "EventType"
															}
														},
														{
															"id": 773,
															"name": "listener",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 774,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"signatures": [
																		{
																			"id": 775,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 776,
																					"name": "event",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"id": 273,
																						"name": "AutomationEvent"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														},
														{
															"id": 777,
															"name": "capture",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 565,
									"name": "anchorAffinity",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The affinity of the tree selection anchor, if any."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1410,
											"character": 20
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 563,
									"name": "anchorObject",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The anchor node of the tree selection, if any."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1400,
											"character": 18
										}
									],
									"type": {
										"type": "reference",
										"id": 481,
										"name": "AutomationNode"
									}
								},
								{
									"id": 564,
									"name": "anchorOffset",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The anchor offset of the tree selection, if any."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1405,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 584,
									"name": "ariaColumnCount",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The number of columns in this table as specified by the page author."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1505,
											"character": 21
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 612,
									"name": "ariaInvalidValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The value of the aria-invalid attribute, indicating the error type."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1634,
											"character": 22
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 582,
									"name": "ariaRowCount",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The number of rows in this table as specified by the page author."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1495,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 603,
									"name": "autoComplete",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Aria auto complete."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1602,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 622,
									"name": "backgroundColor",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The RGBA background color of this subtree, as an integer."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1690,
											"character": 21
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 626,
									"name": "bold",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Indicates node text is bold."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1710,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 490,
									"name": "boundsForRange",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Determines the location of the text within the node specified by |startIndex|\nand |endIndex|, inclusively. Invokes |callback| with the bounding rectangle,\nin screen coordinates. |callback| can be invoked either synchronously or\nasynchronously. The bounds are clipped to ancestors.",
										"tags": [
											{
												"tag": "param",
												"text": "",
												"param": "boundsForRange.startIndex"
											},
											{
												"tag": "param",
												"text": "\n",
												"param": "boundsForRange.endIndex"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1087,
											"character": 20
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 491,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 492,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 493,
															"name": "startIndex",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 494,
															"name": "endIndex",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 495,
															"name": "callback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 496,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"signatures": [
																		{
																			"id": 497,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 498,
																					"name": "bounds",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"id": 249,
																						"name": "Rect"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 598,
									"name": "busy",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The value of aria-busy for a live region or any other element."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1577,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 619,
									"name": "checked",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Tri-state describing checkbox or radio button: 'false' | 'true' | 'mixed'"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1675,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 510,
									"name": "checkedStateDescription",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Description of the state of the checkbox. Used only when the node is\ncheckable."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1127,
											"character": 29
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 634,
									"name": "children",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Walking the tree."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1750,
											"character": 14
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 481,
											"name": "AutomationNode"
										}
									}
								},
								{
									"id": 604,
									"name": "className",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The name of the programmatic backing object."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1607,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 621,
									"name": "color",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The RGBA foreground color of this subtree, as an integer."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1685,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 623,
									"name": "colorValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The RGBA color of an input element whose value is a color."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1695,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 601,
									"name": "containerLiveAtomic",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The value of aria-atomic if this node is inside a live region."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1592,
											"character": 25
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 602,
									"name": "containerLiveBusy",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The value of aria-busy if this node is inside a live region."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1597,
											"character": 23
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 600,
									"name": "containerLiveRelevant",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The value of aria-relevant if this node is inside a live region."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1587,
											"character": 27
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 599,
									"name": "containerLiveStatus",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The type of live region if this node is inside a live region."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1582,
											"character": 25
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 537,
									"name": "controlledBy",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Reverse relationship for controls."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1282,
											"character": 18
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 481,
											"name": "AutomationNode"
										}
									}
								},
								{
									"id": 526,
									"name": "controls",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The nodes, if any, which this node is specified to control via <a\nhref=\"http://www.w3.org/TR/wai-aria/#aria-controls\">\n<code>aria-controls</code></a>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1223,
											"character": 14
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 481,
											"name": "AutomationNode"
										}
									}
								},
								{
									"id": 816,
									"name": "createPosition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Creates a position object backed by Chrome's accessibility position support.",
										"tags": [
											{
												"tag": "param",
												"text": "",
												"param": "createPosition.offset"
											},
											{
												"tag": "param",
												"text": "\n",
												"param": "createPosition.isUpstream"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2114,
											"character": 20
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 817,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 818,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 819,
															"name": "offset",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 820,
															"name": "isUpstream",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 302,
														"name": "AutomationPosition"
													}
												}
											]
										}
									}
								},
								{
									"id": 544,
									"name": "customActions",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "An array of custom actions."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1317,
											"character": 19
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 287,
											"name": "CustomAction"
										}
									}
								},
								{
									"id": 545,
									"name": "defaultActionVerb",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The action taken by calling <code>doDefault</code>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1322,
											"character": 23
										}
									],
									"type": {
										"type": "reference",
										"id": 242,
										"name": "DefaultActionVerb"
									}
								},
								{
									"id": 527,
									"name": "describedBy",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The nodes, if any, which form a description for this node."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1228,
											"character": 17
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 481,
											"name": "AutomationNode"
										}
									}
								},
								{
									"id": 509,
									"name": "description",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The purpose of the node, other than the role, if any."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1121,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 538,
									"name": "descriptionFor",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Reverse relationship for describedBy."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1287,
											"character": 20
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 481,
											"name": "AutomationNode"
										}
									}
								},
								{
									"id": 533,
									"name": "details",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "A node that provides more details about the current node."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1262,
											"character": 13
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 481,
											"name": "AutomationNode"
										}
									}
								},
								{
									"id": 535,
									"name": "detailsFor",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Reverse relationship for details."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1272,
											"character": 16
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 481,
											"name": "AutomationNode"
										}
									}
								},
								{
									"id": 616,
									"name": "detectedLanguage",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The detected language code for this subtree."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1654,
											"character": 22
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 613,
									"name": "display",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The CSS display attribute for this node, if applicable."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1639,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 646,
									"name": "doDefault",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Does the default action based on this node's role. This is generally the same\naction that would result from clicking the node such as expanding a treeitem,\ntoggling a checkbox, selecting a radiobutton, or activating a button."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1786,
											"character": 15
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 647,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 648,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 549,
									"name": "docLoaded",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Whether this document has finished loading."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1342,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 550,
									"name": "docLoadingProgress",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The proportion (out of 1.0) that this doc has completed loading."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1347,
											"character": 24
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 548,
									"name": "docTitle",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The title of this document."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1337,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 547,
									"name": "docUrl",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The URL of this document."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1332,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 787,
									"name": "domQuerySelector",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "<p>Gets the first node in this node's subtree which matches the given CSS\nselector and is within the same DOM context.</p><p>If this node doesn't\ncorrespond directly with an HTML node in the DOM, querySelector will be run\non this node's nearest HTML node ancestor. Note that this may result in the\nquery returning a node which is not a descendant of this node.</p><p>If the\nselector matches a node which doesn't directly correspond to an automation\nnode (for example an element within an ARIA widget, where the ARIA widget\nforms one node of the automation tree, or an element which is hidden from\naccessibility via hiding it using CSS or using aria-hidden), this will return\nthe nearest ancestor which does correspond to an automation node.</p>",
										"tags": [
											{
												"tag": "param",
												"text": "\n",
												"param": "domQuerySelector.selector"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2049,
											"character": 22
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 788,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 789,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 790,
															"name": "selector",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 791,
															"name": "callback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 792,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"signatures": [
																		{
																			"id": 793,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 794,
																					"name": "node",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"id": 481,
																						"name": "AutomationNode"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 633,
									"name": "editableRoot",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Indicates whether this is a root of an editable subtree."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1745,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 534,
									"name": "errorMessage",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "A node that provides an error message for a current node."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1267,
											"character": 18
										}
									],
									"type": {
										"type": "reference",
										"id": 481,
										"name": "AutomationNode"
									}
								},
								{
									"id": 536,
									"name": "errorMessageFor",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Reverse relationship for errorMessage."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1277,
											"character": 21
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 481,
											"name": "AutomationNode"
										}
									}
								},
								{
									"id": 795,
									"name": "find",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Finds the first AutomationNode in this node's subtree which matches the given\nsearch parameters.",
										"tags": [
											{
												"tag": "param",
												"text": "\n",
												"param": "find.params"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2062,
											"character": 10
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 796,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 797,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 798,
															"name": "params",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"id": 254,
																"name": "FindParams"
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 481,
														"name": "AutomationNode"
													}
												}
											]
										}
									}
								},
								{
									"id": 799,
									"name": "findAll",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Finds all the AutomationNodes in this node's subtree which matches the given\nsearch parameters.",
										"tags": [
											{
												"tag": "param",
												"text": "\n",
												"param": "findAll.params"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2072,
											"character": 13
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 800,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 801,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 802,
															"name": "params",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"id": 254,
																"name": "FindParams"
															}
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 481,
															"name": "AutomationNode"
														}
													}
												}
											]
										}
									}
								},
								{
									"id": 636,
									"name": "firstChild",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1754,
											"character": 16
										}
									],
									"type": {
										"type": "reference",
										"id": 481,
										"name": "AutomationNode"
									}
								},
								{
									"id": 539,
									"name": "flowFrom",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Reverse relationship for flowTo."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1292,
											"character": 14
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 481,
											"name": "AutomationNode"
										}
									}
								},
								{
									"id": 528,
									"name": "flowTo",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The nodes, if any, which may optionally be navigated to after this one. See\n<a href=\"http://www.w3.org/TR/wai-aria/#aria-flowto\">\n<code>aria-flowto</code></a>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1235,
											"character": 12
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 481,
											"name": "AutomationNode"
										}
									}
								},
								{
									"id": 649,
									"name": "focus",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Places focus on this node."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1791,
											"character": 11
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 650,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 651,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 568,
									"name": "focusAffinity",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The affinity of the tree selection focus, if any."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1425,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 566,
									"name": "focusObject",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The focus node of the tree selection, if any."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1415,
											"character": 17
										}
									],
									"type": {
										"type": "reference",
										"id": 481,
										"name": "AutomationNode"
									}
								},
								{
									"id": 567,
									"name": "focusOffset",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The focus offset of the tree selection, if any."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1420,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 632,
									"name": "fontFamily",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Indicates the font family."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1740,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 631,
									"name": "fontSize",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Indicates the font size of this node."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1735,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 652,
									"name": "getImageData",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Request a data url for the contents of an image, optionally resized.  Pass\nzero for maxWidth and/or maxHeight for the original size.",
										"tags": [
											{
												"tag": "param",
												"text": "",
												"param": "getImageData.maxWidth"
											},
											{
												"tag": "param",
												"text": "\n",
												"param": "getImageData.maxHeight"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1800,
											"character": 18
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 653,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 654,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 655,
															"name": "maxWidth",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 656,
															"name": "maxHeight",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 807,
									"name": "getNextTextMatch",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "param",
												"text": "",
												"param": "getNextTextMatch.searchStr"
											},
											{
												"tag": "param",
												"text": "\n",
												"param": "getNextTextMatch.backward"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2089,
											"character": 22
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 808,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 809,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 810,
															"name": "searchStr",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 811,
															"name": "backward",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 481,
														"name": "AutomationNode"
													}
												}
											]
										}
									}
								},
								{
									"id": 617,
									"name": "hasPopup",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Indicates the availability and type of interactive popup element true - the\npopup is a menu menu - the popup is a menu listbox - the popup is a listbox\ntree - the popup is a tree grid - the popup is a grid dialog - the popup is a\ndialog"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1662,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 519,
									"name": "hierarchicalLevel",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The level of a heading or tree item."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1177,
											"character": 23
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 657,
									"name": "hitTest",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Does a hit test of the given global screen coordinates, and fires eventToFire\non the resulting object.",
										"tags": [
											{
												"tag": "param",
												"text": "",
												"param": "hitTest.x"
											},
											{
												"tag": "param",
												"text": "",
												"param": "hitTest.y"
											},
											{
												"tag": "param",
												"text": "\n",
												"param": "hitTest.eventToFire"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1813,
											"character": 13
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 658,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 659,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 660,
															"name": "x",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 661,
															"name": "y",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 662,
															"name": "eventToFire",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"id": 233,
																"name": "EventType"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 663,
									"name": "hitTestWithReply",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Does a {@link automation.AutomationNode.hitTest}, and receives a callback\nwith the resulting hit node.",
										"tags": [
											{
												"tag": "param",
												"text": "",
												"param": "hitTestWithReply.x"
											},
											{
												"tag": "param",
												"text": "\n",
												"param": "hitTestWithReply.y"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1826,
											"character": 22
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 664,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 665,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 666,
															"name": "x",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 667,
															"name": "y",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 668,
															"name": "callback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 669,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"signatures": [
																		{
																			"id": 670,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 671,
																					"name": "node",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"id": 481,
																						"name": "AutomationNode"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 606,
									"name": "htmlAttributes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "A map containing all HTML attributes and their values"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1619,
											"character": 20
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 607,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": {
												"id": 608,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 609,
														"name": "name",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									}
								},
								{
									"id": 518,
									"name": "htmlTag",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The HTML tag for this element, if this node is an HTML element."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1172,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 516,
									"name": "imageAnnotation",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The image annotation for image nodes, which may be a human-readable string\nthat is the contextualized annotation or a status string related to\nannotations."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1161,
											"character": 21
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 614,
									"name": "imageDataUrl",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "A data url with the contents of this object's image or thumbnail."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1644,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 532,
									"name": "inPageLinkTarget",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The target of an in-page link."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1257,
											"character": 22
										}
									],
									"type": {
										"type": "reference",
										"id": 481,
										"name": "AutomationNode"
									}
								},
								{
									"id": 644,
									"name": "indexInParent",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The index of this node in its parent node's list of children. If this is the\nroot node, this will be undefined."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1774,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 620,
									"name": "innerHtml",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The inner html of this element. Only populated for math content."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1680,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 610,
									"name": "inputType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The input type of a text field, such as \"text\" or \"email\"."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1624,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 483,
									"name": "isRootNode",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Whether this AutomationNode is a root node."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1058,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 562,
									"name": "isSelectionBackward",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "If a selection is present, whether the anchor of the selection comes after\nits focus in the accessibility tree."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1395,
											"character": 25
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 627,
									"name": "italic",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Indicates node text is italic."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1715,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 540,
									"name": "labelFor",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Reverse relationship for labelledBy."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1297,
											"character": 14
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 481,
											"name": "AutomationNode"
										}
									}
								},
								{
									"id": 529,
									"name": "labelledBy",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The nodes, if any, which form a label for this element. Generally, the text\nfrom these elements will also be exposed as the element's accessible name,\nvia the {@link automation.AutomationNode.name} attribute."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1242,
											"character": 16
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 481,
											"name": "AutomationNode"
										}
									}
								},
								{
									"id": 615,
									"name": "language",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The author-provided language code for this subtree."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1649,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 812,
									"name": "languageAnnotationForStringAttribute",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Returns the detected languages for the provided string attribute as an array\nof LanguageSpan objects. There are several guarantees about the format of the\nLanguageSpan array: 1. Is either empty or contains LanguageSpans that cover\nall indices in the associated string attribute value. 2. Is sorted by\nincreasing startIndex (those with smaller startIndex appear first). 3.\nLanguageSpans are non-overlapping and contain exactly one language.",
										"tags": [
											{
												"tag": "param",
												"text": "\n",
												"param": "languageAnnotationForStringAttribute.attribute"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2104,
											"character": 42
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 813,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 814,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 815,
															"name": "attribute",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 290,
															"name": "LanguageSpan"
														}
													}
												}
											]
										}
									}
								},
								{
									"id": 637,
									"name": "lastChild",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1756,
											"character": 15
										}
									],
									"type": {
										"type": "reference",
										"id": 481,
										"name": "AutomationNode"
									}
								},
								{
									"id": 629,
									"name": "lineThrough",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Indicates node text is line through."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1725,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 597,
									"name": "liveAtomic",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The value of aria-atomic for a live region."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1572,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 596,
									"name": "liveRelevant",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The value of aria-relevant for a live region."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1567,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 595,
									"name": "liveStatus",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The type of region if this is the root of a live region. Possible values are\n'polite' and 'assertive'."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1562,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 489,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The rendered location (as a bounding box) of this node in global screen\ncoordinates."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1076,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"id": 249,
										"name": "Rect"
									}
								},
								{
									"id": 672,
									"name": "makeVisible",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Scrolls this node to make it visible."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1837,
											"character": 17
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 673,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 674,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 561,
									"name": "markers",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "An array of Marker objects for this node."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1389,
											"character": 13
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 295,
											"name": "Marker"
										}
									}
								},
								{
									"id": 803,
									"name": "matches",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Returns whether this node matches the given {@link automation.FindParams}.",
										"tags": [
											{
												"tag": "param",
												"text": "\n",
												"param": "matches.params"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2081,
											"character": 13
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 804,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 805,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 806,
															"name": "params",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"id": 254,
																"name": "FindParams"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											]
										}
									}
								},
								{
									"id": 578,
									"name": "maxValueForRange",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The maximum possible value for this range."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1475,
											"character": 22
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 577,
									"name": "minValueForRange",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The minimum possible value for this range."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1470,
											"character": 22
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 605,
									"name": "modal",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Marks this subtree as modal."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1612,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 513,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The accessible name for this node, via the <a\nhref=\"http://www.w3.org/TR/wai-aria/#namecalculation\"> Accessible Name\nCalculation</a> process."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1144,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 515,
									"name": "nameFrom",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The source of the name."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1154,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"id": 238,
										"name": "NameFromType"
									}
								},
								{
									"id": 643,
									"name": "nextFocus",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1768,
											"character": 15
										}
									],
									"type": {
										"type": "reference",
										"id": 481,
										"name": "AutomationNode"
									}
								},
								{
									"id": 641,
									"name": "nextOnLine",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1764,
											"character": 16
										}
									],
									"type": {
										"type": "reference",
										"id": 481,
										"name": "AutomationNode"
									}
								},
								{
									"id": 639,
									"name": "nextSibling",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1760,
											"character": 17
										}
									],
									"type": {
										"type": "reference",
										"id": 481,
										"name": "AutomationNode"
									}
								},
								{
									"id": 525,
									"name": "nonInlineTextWordEnds",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The end index of each word within the node's name. This is different from\nwordEnds because it is not restricted to inline text boxes and can be used\nfor any type of element."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1216,
											"character": 27
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 524,
									"name": "nonInlineTextWordStarts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The start index of each word within the node's name. This is different from\nwordStarts because it is not restricted to inline text boxes and can be used\nfor any type of element."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1209,
											"character": 29
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 575,
									"name": "notUserSelectableStyle",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Indicates that the node is marked user-select:none"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1460,
											"character": 28
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 635,
									"name": "parent",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1752,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 481,
										"name": "AutomationNode"
									}
								},
								{
									"id": 675,
									"name": "performCustomAction",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Performs custom action.",
										"tags": [
											{
												"tag": "param",
												"text": "\n",
												"param": "performCustomAction.customActionId"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1844,
											"character": 25
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 676,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 677,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 678,
															"name": "customActionId",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 679,
									"name": "performStandardAction",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Convenience method to perform a standard action supported by this node. For\nactions requiring additional arguments, call the specific binding e.g.\n<code>setSelection</code>.",
										"tags": [
											{
												"tag": "param",
												"text": "\n",
												"param": "performStandardAction.actionType"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1855,
											"character": 27
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 680,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 681,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 682,
															"name": "actionType",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"id": 236,
																"name": "ActionType"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 511,
									"name": "placeholder",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The placeholder for this text field, if any."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1132,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 579,
									"name": "posInSet",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The 1-based index of an item in a set."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1480,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 642,
									"name": "previousFocus",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1766,
											"character": 19
										}
									],
									"type": {
										"type": "reference",
										"id": 481,
										"name": "AutomationNode"
									}
								},
								{
									"id": 640,
									"name": "previousOnLine",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1762,
											"character": 20
										}
									],
									"type": {
										"type": "reference",
										"id": 481,
										"name": "AutomationNode"
									}
								},
								{
									"id": 638,
									"name": "previousSibling",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1758,
											"character": 21
										}
									],
									"type": {
										"type": "reference",
										"id": 481,
										"name": "AutomationNode"
									}
								},
								{
									"id": 778,
									"name": "removeEventListener",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Removes a listener for the given event type and event phase.",
										"tags": [
											{
												"tag": "param",
												"text": "",
												"param": "removeEventListener.eventType"
											},
											{
												"tag": "param",
												"text": "A listener for events on an <code>AutomationNode</code>.",
												"param": "removeEventListener.listener"
											},
											{
												"tag": "param",
												"text": "",
												"param": "removeEventListener.listener.event"
											},
											{
												"tag": "param",
												"text": "\n",
												"param": "removeEventListener.capture"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2027,
											"character": 25
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 779,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 780,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 781,
															"name": "eventType",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"id": 233,
																"name": "EventType"
															}
														},
														{
															"id": 782,
															"name": "listener",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 783,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"signatures": [
																		{
																			"id": 784,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 785,
																					"name": "event",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"id": 273,
																						"name": "AutomationEvent"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														},
														{
															"id": 786,
															"name": "capture",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 683,
									"name": "replaceSelectedText",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Replaces the selected text within a text field.",
										"tags": [
											{
												"tag": "param",
												"text": "\n",
												"param": "replaceSelectedText.value"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1864,
											"character": 25
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 684,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 685,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 686,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 618,
									"name": "restriction",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Input restriction, if any, such as readonly or disabled: undefined - enabled\ncontrol or other object that is not disabled Restriction.DISABLED - disallows\ninput in itself + any descendants Restriction.READONLY - allow\nfocus/selection but not input"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1670,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 705,
									"name": "resumeMedia",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Resume playing any media within this tree."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1910,
											"character": 17
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 706,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 707,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 484,
									"name": "role",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The role of this node."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1063,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 234,
										"name": "RoleType"
									}
								},
								{
									"id": 512,
									"name": "roleDescription",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The role description for this node."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1137,
											"character": 21
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 482,
									"name": "root",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The root node of the tree containing this AutomationNode."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1053,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 481,
										"name": "AutomationNode"
									}
								},
								{
									"id": 717,
									"name": "scrollBackward",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Scrolls this scrollable container backward."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1930,
											"character": 20
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 718,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 719,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 720,
															"name": "callback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 721,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"signatures": [
																		{
																			"id": 722,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 723,
																					"name": "result",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "intrinsic",
																						"name": "boolean"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 738,
									"name": "scrollDown",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Scrolls this scrollable container down."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1957,
											"character": 16
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 739,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 740,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 741,
															"name": "callback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 742,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"signatures": [
																		{
																			"id": 743,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 744,
																					"name": "result",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "intrinsic",
																						"name": "boolean"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 724,
									"name": "scrollForward",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Scrolls this scrollable container forward."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1939,
											"character": 19
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 725,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 726,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 727,
															"name": "callback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 728,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"signatures": [
																		{
																			"id": 729,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 730,
																					"name": "result",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "intrinsic",
																						"name": "boolean"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 745,
									"name": "scrollLeft",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Scrolls this scrollable container left."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1966,
											"character": 16
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 746,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 747,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 748,
															"name": "callback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 749,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"signatures": [
																		{
																			"id": 750,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 751,
																					"name": "result",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "intrinsic",
																						"name": "boolean"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 752,
									"name": "scrollRight",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Scrolls this scrollable container right."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1975,
											"character": 17
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 753,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 754,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 755,
															"name": "callback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 756,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"signatures": [
																		{
																			"id": 757,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 758,
																					"name": "result",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "intrinsic",
																						"name": "boolean"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 759,
									"name": "scrollToPoint",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Scrolls this scrollable container to the given point.",
										"tags": [
											{
												"tag": "param",
												"text": "",
												"param": "scrollToPoint.x"
											},
											{
												"tag": "param",
												"text": "\n",
												"param": "scrollToPoint.y"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1987,
											"character": 19
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 760,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 761,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 762,
															"name": "x",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 763,
															"name": "y",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 731,
									"name": "scrollUp",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Scrolls this scrollable container up."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1948,
											"character": 14
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 732,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 733,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 734,
															"name": "callback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 735,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"signatures": [
																		{
																			"id": 736,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 737,
																					"name": "result",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "intrinsic",
																						"name": "boolean"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 551,
									"name": "scrollX",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Scrollable container attributes."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1352,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 553,
									"name": "scrollXMax",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1356,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 552,
									"name": "scrollXMin",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1354,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 554,
									"name": "scrollY",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1358,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 556,
									"name": "scrollYMax",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1362,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 555,
									"name": "scrollYMin",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1360,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 557,
									"name": "scrollable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Indicates whether this node is scrollable."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1367,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 630,
									"name": "selected",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Indicates whether this node is selected, unselected, or neither."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1730,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 574,
									"name": "selectionEndAffinity",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The affinity of the tree selection end, if any."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1455,
											"character": 26
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 572,
									"name": "selectionEndObject",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The selection end node of the tree selection, if any."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1445,
											"character": 24
										}
									],
									"type": {
										"type": "reference",
										"id": 481,
										"name": "AutomationNode"
									}
								},
								{
									"id": 573,
									"name": "selectionEndOffset",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The selection end offset of the tree selection, if any."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1450,
											"character": 24
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 571,
									"name": "selectionStartAffinity",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The affinity of the tree selection start, if any."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1440,
											"character": 28
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 569,
									"name": "selectionStartObject",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The selection start node of the tree selection, if any."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1430,
											"character": 26
										}
									],
									"type": {
										"type": "reference",
										"id": 481,
										"name": "AutomationNode"
									}
								},
								{
									"id": 570,
									"name": "selectionStartOffset",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The selection start offset of the tree selection, if any."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1435,
											"character": 26
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 523,
									"name": "sentenceEnds",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The end indexes of each sentence within the node's name. For most nodes, the\nsize of sentenceStarts array should be equal to the size of sentenceEnds\narray. Two exceptions are (1) node at the begining of a paragraph but the end\nof the node's sentences is in its following node. Such a node has one more\nstart index. (2) Node at the end of a paragraph but the start of the node's\nsentences is in its previous node. Such a node has one more end index. For\nexample, <p><b>Hello</b> world.</p> has two nodes. The first one has one\nstart index (i.e., 0) but no end index. The second node has one end index\n(i.e., 7) but no start index."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1202,
											"character": 18
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 522,
									"name": "sentenceStarts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The start indexes of each sentence within the node's name."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1189,
											"character": 20
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 687,
									"name": "setAccessibilityFocus",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Sets accessibility focus. Accessibility focus is the node on which an\nextension tracks a user's focus. This may be conveyed through a focus ring or\nor speech output by the extension. Automation will dispatch more events to\nthe accessibility focus such as location changes."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1874,
											"character": 27
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 688,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 689,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 764,
									"name": "setScrollOffset",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Sets this scrollable container's scroll offset.",
										"tags": [
											{
												"tag": "param",
												"text": "",
												"param": "setScrollOffset.x"
											},
											{
												"tag": "param",
												"text": "\n",
												"param": "setScrollOffset.y"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1998,
											"character": 21
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 765,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 766,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 767,
															"name": "x",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 768,
															"name": "y",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 690,
									"name": "setSelection",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Sets selection within a text field.",
										"tags": [
											{
												"tag": "param",
												"text": "",
												"param": "setSelection.startIndex"
											},
											{
												"tag": "param",
												"text": "\n",
												"param": "setSelection.endIndex"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1882,
											"character": 18
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 691,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 692,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 693,
															"name": "startIndex",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 694,
															"name": "endIndex",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 695,
									"name": "setSequentialFocusNavigationStartingPoint",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Clears focus and sets this node as the starting point for the next time the\nuser presses Tab or Shift+Tab."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1891,
											"character": 47
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 696,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 697,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 580,
									"name": "setSize",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The number of items in a set;"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1485,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 698,
									"name": "setValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Sets the value of a text field.",
										"tags": [
											{
												"tag": "param",
												"text": "\n",
												"param": "setValue.value"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1898,
											"character": 14
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 699,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 700,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 701,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 702,
									"name": "showContextMenu",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Show the context menu for this element, as if the user right-clicked."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1905,
											"character": 21
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 703,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 704,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 645,
									"name": "sortDirection",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The sort direction of this node."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1779,
											"character": 19
										}
									],
									"type": {
										"type": "reference",
										"id": 248,
										"name": "SortDirectionType"
									}
								},
								{
									"id": 543,
									"name": "standardActions",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "An array of standard actions available on this node."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1312,
											"character": 21
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 236,
											"name": "ActionType"
										}
									}
								},
								{
									"id": 708,
									"name": "startDuckingMedia",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Start ducking any media within this tree."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1915,
											"character": 23
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 709,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 710,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 485,
									"name": "state",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The {@link automation.StateType}s describing this node."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1070,
											"character": 11
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 486,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": {
												"id": 487,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 488,
														"name": "name",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									}
								},
								{
									"id": 711,
									"name": "stopDuckingMedia",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Stop ducking any media within this tree."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1920,
											"character": 22
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 712,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 713,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 624,
									"name": "subscript",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Indicates node text is subscript."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1700,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 625,
									"name": "superscript",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Indicates node text is superscript."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1705,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 714,
									"name": "suspendMedia",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Suspend any media playing within this tree."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1925,
											"character": 18
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 715,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 716,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 586,
									"name": "tableCellAriaColumnIndex",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The ARIA column index as specified by the page author."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1516,
											"character": 30
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 589,
									"name": "tableCellAriaRowIndex",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The ARIA row index as specified by the page author."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1531,
											"character": 27
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 541,
									"name": "tableCellColumnHeaders",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The column header nodes for a table cell."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1302,
											"character": 28
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 481,
											"name": "AutomationNode"
										}
									}
								},
								{
									"id": 585,
									"name": "tableCellColumnIndex",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The zero-based index of the column that this cell is in as specified in the\nDOM."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1511,
											"character": 26
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 587,
									"name": "tableCellColumnSpan",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The number of columns that this cell spans (default is 1)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1521,
											"character": 25
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 542,
									"name": "tableCellRowHeaders",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The row header nodes for a table cell."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1307,
											"character": 25
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 481,
											"name": "AutomationNode"
										}
									}
								},
								{
									"id": 588,
									"name": "tableCellRowIndex",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The zero-based index of the row that this cell is in as specified in the DOM."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1526,
											"character": 23
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 590,
									"name": "tableCellRowSpan",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The number of rows that this cell spans (default is 1)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1536,
											"character": 22
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 583,
									"name": "tableColumnCount",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The number of columns in this table as specified in the DOM."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1500,
											"character": 22
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 591,
									"name": "tableColumnHeader",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The corresponding column header for this cell."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1541,
											"character": 23
										}
									],
									"type": {
										"type": "reference",
										"id": 481,
										"name": "AutomationNode"
									}
								},
								{
									"id": 593,
									"name": "tableColumnIndex",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The column index of this column node."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1551,
											"character": 22
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 581,
									"name": "tableRowCount",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The number of rows in this table as specified in the DOM."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1490,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 592,
									"name": "tableRowHeader",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The corresponding row header for this cell."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1546,
											"character": 20
										}
									],
									"type": {
										"type": "reference",
										"id": 481,
										"name": "AutomationNode"
									}
								},
								{
									"id": 594,
									"name": "tableRowIndex",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The row index of this row node."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1556,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 560,
									"name": "textInputType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The input type, like email or number."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1384,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 559,
									"name": "textSelEnd",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The character index of the end of the selection within this editable text\nelement; -1 if no selection."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1379,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 558,
									"name": "textSelStart",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The character index of the start of the selection within this editable text\nelement; -1 if no selection."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1373,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 514,
									"name": "tooltip",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The tooltip of the node, if any."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1149,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 499,
									"name": "unclippedBoundsForRange",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Determines the location of the text within the node specified by |startIndex|\nand |endIndex|, inclusively. Invokes |callback| with the bounding rectangle,\nin screen coordinates. |callback| can be invoked either synchronously or\nasynchronously. The bounds are not clipped to ancestors.",
										"tags": [
											{
												"tag": "param",
												"text": "",
												"param": "unclippedBoundsForRange.startIndex"
											},
											{
												"tag": "param",
												"text": "\n",
												"param": "unclippedBoundsForRange.endIndex"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1104,
											"character": 29
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 500,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 501,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 502,
															"name": "startIndex",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 503,
															"name": "endIndex",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 504,
															"name": "callback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 505,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"signatures": [
																		{
																			"id": 506,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 507,
																					"name": "bounds",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"id": 249,
																						"name": "Rect"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 508,
									"name": "unclippedLocation",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The location (as a bounding box) of this node in global screen coordinates\nwithout applying any clipping from ancestors."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1116,
											"character": 23
										}
									],
									"type": {
										"type": "reference",
										"id": 249,
										"name": "Rect"
									}
								},
								{
									"id": 628,
									"name": "underline",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Indicates node text is underline."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1720,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 546,
									"name": "url",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The URL that this link will navigate to."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1327,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 517,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The value for this node: for example the <code>value</code> attribute of an\n<code>&lt;input&gt; element."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1167,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 576,
									"name": "valueForRange",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The current value for this range."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1465,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 521,
									"name": "wordEnds",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1184,
											"character": 14
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 520,
									"name": "wordStarts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The start and end index of each word in an inline text box."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1182,
											"character": 16
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										611,
										530,
										531,
										769,
										565,
										563,
										564,
										584,
										612,
										582,
										603,
										622,
										626,
										490,
										598,
										619,
										510,
										634,
										604,
										621,
										623,
										601,
										602,
										600,
										599,
										537,
										526,
										816,
										544,
										545,
										527,
										509,
										538,
										533,
										535,
										616,
										613,
										646,
										549,
										550,
										548,
										547,
										787,
										633,
										534,
										536,
										795,
										799,
										636,
										539,
										528,
										649,
										568,
										566,
										567,
										632,
										631,
										652,
										807,
										617,
										519,
										657,
										663,
										606,
										518,
										516,
										614,
										532,
										644,
										620,
										610,
										483,
										562,
										627,
										540,
										529,
										615,
										812,
										637,
										629,
										597,
										596,
										595,
										489,
										672,
										561,
										803,
										578,
										577,
										605,
										513,
										515,
										643,
										641,
										639,
										525,
										524,
										575,
										635,
										675,
										679,
										511,
										579,
										642,
										640,
										638,
										778,
										683,
										618,
										705,
										484,
										512,
										482,
										717,
										738,
										724,
										745,
										752,
										759,
										731,
										551,
										553,
										552,
										554,
										556,
										555,
										557,
										630,
										574,
										572,
										573,
										571,
										569,
										570,
										523,
										522,
										687,
										764,
										690,
										695,
										580,
										698,
										702,
										645,
										543,
										708,
										485,
										711,
										624,
										625,
										714,
										586,
										589,
										541,
										585,
										587,
										542,
										588,
										590,
										583,
										591,
										593,
										581,
										592,
										594,
										560,
										559,
										558,
										514,
										499,
										508,
										628,
										546,
										517,
										576,
										521,
										520
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 1049,
									"character": 35
								}
							]
						},
						{
							"id": 302,
							"name": "AutomationPosition",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 306,
									"name": "affinity",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 930,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 367,
									"name": "asLeafTextPosition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 972,
											"character": 24
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 368,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 369,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 364,
									"name": "asTextPosition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 970,
											"character": 20
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 365,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 366,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 361,
									"name": "asTreePosition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 968,
											"character": 20
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 362,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 363,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 322,
									"name": "atEndOfAnchor",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 942,
											"character": 19
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 323,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 324,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											]
										}
									}
								},
								{
									"id": 358,
									"name": "atEndOfDocument",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 966,
											"character": 21
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 359,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 360,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											]
										}
									}
								},
								{
									"id": 352,
									"name": "atEndOfFormat",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 962,
											"character": 19
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 353,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 354,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											]
										}
									}
								},
								{
									"id": 334,
									"name": "atEndOfLine",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 950,
											"character": 17
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 335,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 336,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											]
										}
									}
								},
								{
									"id": 346,
									"name": "atEndOfPage",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 958,
											"character": 17
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 347,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 348,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											]
										}
									}
								},
								{
									"id": 340,
									"name": "atEndOfParagraph",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 954,
											"character": 22
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 341,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 342,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											]
										}
									}
								},
								{
									"id": 328,
									"name": "atEndOfWord",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 946,
											"character": 17
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 329,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 330,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											]
										}
									}
								},
								{
									"id": 319,
									"name": "atStartOfAnchor",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 940,
											"character": 21
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 320,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 321,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											]
										}
									}
								},
								{
									"id": 355,
									"name": "atStartOfDocument",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 964,
											"character": 23
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 356,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 357,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											]
										}
									}
								},
								{
									"id": 349,
									"name": "atStartOfFormat",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 960,
											"character": 21
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 350,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 351,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											]
										}
									}
								},
								{
									"id": 331,
									"name": "atStartOfLine",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 948,
											"character": 19
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 332,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 333,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											]
										}
									}
								},
								{
									"id": 343,
									"name": "atStartOfPage",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 956,
											"character": 19
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 344,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 345,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											]
										}
									}
								},
								{
									"id": 337,
									"name": "atStartOfParagraph",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 952,
											"character": 24
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 338,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 339,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											]
										}
									}
								},
								{
									"id": 325,
									"name": "atStartOfWord",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 944,
											"character": 19
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 326,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 327,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											]
										}
									}
								},
								{
									"id": 304,
									"name": "childIndex",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 926,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 478,
									"name": "getText",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1046,
											"character": 13
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 479,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 480,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											]
										}
									}
								},
								{
									"id": 466,
									"name": "isInLineBreak",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1038,
											"character": 19
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 467,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 468,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											]
										}
									}
								},
								{
									"id": 469,
									"name": "isInTextObject",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1040,
											"character": 20
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 470,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 471,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											]
										}
									}
								},
								{
									"id": 472,
									"name": "isInWhiteSpace",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1042,
											"character": 20
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 473,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 474,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											]
										}
									}
								},
								{
									"id": 316,
									"name": "isLeafTextPosition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 938,
											"character": 24
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 317,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 318,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											]
										}
									}
								},
								{
									"id": 307,
									"name": "isNullPosition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 932,
											"character": 20
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 308,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 309,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											]
										}
									}
								},
								{
									"id": 313,
									"name": "isTextPosition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 936,
											"character": 20
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 314,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 315,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											]
										}
									}
								},
								{
									"id": 310,
									"name": "isTreePosition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 934,
											"character": 20
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 311,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 312,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											]
										}
									}
								},
								{
									"id": 475,
									"name": "isValid",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1044,
											"character": 13
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 476,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 477,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											]
										}
									}
								},
								{
									"id": 463,
									"name": "maxTextOffset",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1036,
											"character": 19
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 464,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 465,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											]
										}
									}
								},
								{
									"id": 457,
									"name": "moveToNextAnchorPosition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1032,
											"character": 30
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 458,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 459,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 397,
									"name": "moveToNextCharacterPosition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 992,
											"character": 33
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 398,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 399,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 430,
									"name": "moveToNextFormatEndPosition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1014,
											"character": 33
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 431,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 432,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 391,
									"name": "moveToNextLeafTextPosition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 988,
											"character": 32
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 392,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 393,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 385,
									"name": "moveToNextLeafTreePosition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 984,
											"character": 32
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 386,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 387,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 421,
									"name": "moveToNextLineEndPosition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1008,
											"character": 31
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 422,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 423,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 415,
									"name": "moveToNextLineStartPosition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1004,
											"character": 33
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 416,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 417,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 451,
									"name": "moveToNextPageEndPosition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1028,
											"character": 31
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 452,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 453,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 445,
									"name": "moveToNextPageStartPosition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1024,
											"character": 33
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 446,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 447,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 439,
									"name": "moveToNextParagraphEndPosition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1020,
											"character": 36
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 440,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 441,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 433,
									"name": "moveToNextParagraphStartPosition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1016,
											"character": 38
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 434,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 435,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 409,
									"name": "moveToNextWordEndPosition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1000,
											"character": 31
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 410,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 411,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 403,
									"name": "moveToNextWordStartPosition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 996,
											"character": 33
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 404,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 405,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 382,
									"name": "moveToParentPosition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 982,
											"character": 26
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 383,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 384,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 373,
									"name": "moveToPositionAtEndOfAnchor",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 976,
											"character": 33
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 374,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 375,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 379,
									"name": "moveToPositionAtEndOfDocument",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 980,
											"character": 35
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 380,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 381,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 370,
									"name": "moveToPositionAtStartOfAnchor",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 974,
											"character": 35
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 371,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 372,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 376,
									"name": "moveToPositionAtStartOfDocument",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 978,
											"character": 37
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 377,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 378,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 460,
									"name": "moveToPreviousAnchorPosition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1034,
											"character": 34
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 461,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 462,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 400,
									"name": "moveToPreviousCharacterPosition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 994,
											"character": 37
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 401,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 402,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 427,
									"name": "moveToPreviousFormatStartPosition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1012,
											"character": 39
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 428,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 429,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 394,
									"name": "moveToPreviousLeafTextPosition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 990,
											"character": 36
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 395,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 396,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 388,
									"name": "moveToPreviousLeafTreePosition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 986,
											"character": 36
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 389,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 390,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 424,
									"name": "moveToPreviousLineEndPosition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1010,
											"character": 35
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 425,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 426,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 418,
									"name": "moveToPreviousLineStartPosition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1006,
											"character": 37
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 419,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 420,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 454,
									"name": "moveToPreviousPageEndPosition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1030,
											"character": 35
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 455,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 456,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 448,
									"name": "moveToPreviousPageStartPosition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1026,
											"character": 37
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 449,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 450,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 442,
									"name": "moveToPreviousParagraphEndPosition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1022,
											"character": 40
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 443,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 444,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 436,
									"name": "moveToPreviousParagraphStartPosition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1018,
											"character": 42
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 437,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 438,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 412,
									"name": "moveToPreviousWordEndPosition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 1002,
											"character": 35
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 413,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 414,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 406,
									"name": "moveToPreviousWordStartPosition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 998,
											"character": 37
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 407,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 408,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 303,
									"name": "node",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 924,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 481,
										"name": "AutomationNode"
									}
								},
								{
									"id": 305,
									"name": "textOffset",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 928,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										306,
										367,
										364,
										361,
										322,
										358,
										352,
										334,
										346,
										340,
										328,
										319,
										355,
										349,
										331,
										343,
										337,
										325,
										304,
										478,
										466,
										469,
										472,
										316,
										307,
										313,
										310,
										475,
										463,
										457,
										397,
										430,
										391,
										385,
										421,
										415,
										451,
										445,
										439,
										433,
										409,
										403,
										382,
										373,
										379,
										370,
										376,
										460,
										400,
										427,
										394,
										388,
										424,
										418,
										454,
										448,
										442,
										436,
										412,
										406,
										303,
										305
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 923,
									"character": 39
								}
							]
						},
						{
							"id": 287,
							"name": "CustomAction",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 289,
									"name": "description",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 880,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 288,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 878,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										289,
										288
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 877,
									"character": 33
								}
							]
						},
						{
							"id": 254,
							"name": "FindParams",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 260,
									"name": "attributes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "A map of attribute name to expected value, for example <code>{ name: 'Root\ndirectory', checkbox_mixed: true }</code>. String attribute values may be\nspecified as a regex, for example <code>{ name: /stralia$/</code> }</code>.\nUnless specifying a regex, the expected value must be an exact match in type\nand value for the actual value. Thus, the type of expected value must be one\nof: <ul> <li>string</li> <li>integer</li> <li>float</li> <li>boolean</li>\n</ul>"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 782,
											"character": 16
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 261,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": {
												"id": 262,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 263,
														"name": "name",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									}
								},
								{
									"id": 255,
									"name": "role",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 763,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 234,
										"name": "RoleType"
									}
								},
								{
									"id": 256,
									"name": "state",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "A map of {@link automation.StateType} to boolean, indicating for each state\nwhether it should be set or not. For example: <code>{ StateType.disabled:\nfalse }</code> would only match if <code>StateType.disabled</code> was\n<em>not</em> present in the node's <code>state</code> object."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 771,
											"character": 11
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 257,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": {
												"id": 258,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 259,
														"name": "name",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										260,
										255,
										256
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 762,
									"character": 31
								}
							]
						},
						{
							"id": 290,
							"name": "LanguageSpan",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 292,
									"name": "endIndex",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Exclusive end index of substring that contains language."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 892,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 293,
									"name": "language",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Detected language for substring."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 897,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 294,
									"name": "probability",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Probability that language is correct."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 902,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 291,
									"name": "startIndex",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Inclusive start index of substring that contains language."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 887,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										292,
										293,
										294,
										291
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 883,
									"character": 33
								}
							]
						},
						{
							"id": 295,
							"name": "Marker",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 297,
									"name": "endOffset",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The end offset within the text of the associated node."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 914,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 298,
									"name": "flags",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "A mapping of MarkerType to true or undefined indicating the marker types for\nthis marker."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 920,
											"character": 11
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 299,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": {
												"id": 300,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 301,
														"name": "name",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									}
								},
								{
									"id": 296,
									"name": "startOffset",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The start offset within the text of the associated node."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 909,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										297,
										298,
										296
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 905,
									"character": 27
								}
							]
						},
						{
							"id": 249,
							"name": "Rect",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 253,
									"name": "height",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 759,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 250,
									"name": "left",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 753,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 251,
									"name": "top",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 755,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 252,
									"name": "width",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 757,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										253,
										250,
										251,
										252
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 752,
									"character": 25
								}
							]
						},
						{
							"id": 264,
							"name": "SetDocumentSelectionParams",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 265,
									"name": "anchorObject",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The node where the selection begins."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 789,
											"character": 18
										}
									],
									"type": {
										"type": "reference",
										"id": 481,
										"name": "AutomationNode"
									}
								},
								{
									"id": 266,
									"name": "anchorOffset",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The offset in the anchor node where the selection begins."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 794,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 267,
									"name": "focusObject",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The node where the selection ends."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 799,
											"character": 17
										}
									],
									"type": {
										"type": "reference",
										"id": 481,
										"name": "AutomationNode"
									}
								},
								{
									"id": 268,
									"name": "focusOffset",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The offset within the focus node where the selection ends."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 804,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										265,
										266,
										267,
										268
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 785,
									"character": 47
								}
							]
						},
						{
							"id": 283,
							"name": "TreeChange",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 284,
									"name": "target",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The {@link automation.AutomationNode} that changed."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 863,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 481,
										"name": "AutomationNode"
									}
								},
								{
									"id": 285,
									"name": "type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The type of change."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 868,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 237,
										"name": "TreeChangeType"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										284,
										285
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 859,
									"character": 31
								}
							]
						},
						{
							"id": 236,
							"name": "ActionType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "All possible actions that can be performed on automation nodes."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 687,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "annotatePageImages"
									},
									{
										"type": "literal",
										"value": "blur"
									},
									{
										"type": "literal",
										"value": "clearAccessibilityFocus"
									},
									{
										"type": "literal",
										"value": "collapse"
									},
									{
										"type": "literal",
										"value": "customAction"
									},
									{
										"type": "literal",
										"value": "decrement"
									},
									{
										"type": "literal",
										"value": "doDefault"
									},
									{
										"type": "literal",
										"value": "expand"
									},
									{
										"type": "literal",
										"value": "focus"
									},
									{
										"type": "literal",
										"value": "getImageData"
									},
									{
										"type": "literal",
										"value": "getTextLocation"
									},
									{
										"type": "literal",
										"value": "hideTooltip"
									},
									{
										"type": "literal",
										"value": "hitTest"
									},
									{
										"type": "literal",
										"value": "increment"
									},
									{
										"type": "literal",
										"value": "internalInvalidateTree"
									},
									{
										"type": "literal",
										"value": "loadInlineTextBoxes"
									},
									{
										"type": "literal",
										"value": "replaceSelectedText"
									},
									{
										"type": "literal",
										"value": "scrollBackward"
									},
									{
										"type": "literal",
										"value": "scrollDown"
									},
									{
										"type": "literal",
										"value": "scrollForward"
									},
									{
										"type": "literal",
										"value": "scrollLeft"
									},
									{
										"type": "literal",
										"value": "scrollRight"
									},
									{
										"type": "literal",
										"value": "scrollUp"
									},
									{
										"type": "literal",
										"value": "scrollToMakeVisible"
									},
									{
										"type": "literal",
										"value": "scrollToPoint"
									},
									{
										"type": "literal",
										"value": "setAccessibilityFocus"
									},
									{
										"type": "literal",
										"value": "setScrollOffset"
									},
									{
										"type": "literal",
										"value": "setSelection"
									},
									{
										"type": "literal",
										"value": "setSequentialFocusNavigationStartingPoint"
									},
									{
										"type": "literal",
										"value": "setValue"
									},
									{
										"type": "literal",
										"value": "showContextMenu"
									},
									{
										"type": "literal",
										"value": "signalEndOfTest"
									},
									{
										"type": "literal",
										"value": "showTooltip"
									}
								]
							}
						},
						{
							"id": 242,
							"name": "DefaultActionVerb",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "Describes possible actions when performing a do default action."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 718,
									"character": 33
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "activate"
									},
									{
										"type": "literal",
										"value": "check"
									},
									{
										"type": "literal",
										"value": "click"
									},
									{
										"type": "literal",
										"value": "clickAncestor"
									},
									{
										"type": "literal",
										"value": "jump"
									},
									{
										"type": "literal",
										"value": "open"
									},
									{
										"type": "literal",
										"value": "press"
									},
									{
										"type": "literal",
										"value": "select"
									},
									{
										"type": "literal",
										"value": "uncheck"
									}
								]
							}
						},
						{
							"id": 239,
							"name": "DescriptionFromType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 703,
									"character": 35
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "uninitialized"
									},
									{
										"type": "literal",
										"value": "attribute"
									},
									{
										"type": "literal",
										"value": "contents"
									},
									{
										"type": "literal",
										"value": "relatedElement"
									},
									{
										"type": "literal",
										"value": "title"
									}
								]
							}
						},
						{
							"id": 233,
							"name": "EventType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "Possible events fired on an {@link automation.AutomationNode}."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 672,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "accessKeyChanged"
									},
									{
										"type": "literal",
										"value": "activeDescendantChanged"
									},
									{
										"type": "literal",
										"value": "alert"
									},
									{
										"type": "literal",
										"value": "ariaAttributeChanged"
									},
									{
										"type": "literal",
										"value": "ariaCurrentChanged"
									},
									{
										"type": "literal",
										"value": "atomicChanged"
									},
									{
										"type": "literal",
										"value": "autoCompleteChanged"
									},
									{
										"type": "literal",
										"value": "autocorrectionOccured"
									},
									{
										"type": "literal",
										"value": "blur"
									},
									{
										"type": "literal",
										"value": "busyChanged"
									},
									{
										"type": "literal",
										"value": "checkedStateChanged"
									},
									{
										"type": "literal",
										"value": "childrenChanged"
									},
									{
										"type": "literal",
										"value": "classNameChanged"
									},
									{
										"type": "literal",
										"value": "clicked"
									},
									{
										"type": "literal",
										"value": "collapsed"
									},
									{
										"type": "literal",
										"value": "controlsChanged"
									},
									{
										"type": "literal",
										"value": "describedByChanged"
									},
									{
										"type": "literal",
										"value": "descriptionChanged"
									},
									{
										"type": "literal",
										"value": "documentSelectionChanged"
									},
									{
										"type": "literal",
										"value": "documentTitleChanged"
									},
									{
										"type": "literal",
										"value": "dropeffectChanged"
									},
									{
										"type": "literal",
										"value": "editableTextChanged"
									},
									{
										"type": "literal",
										"value": "enabledChanged"
									},
									{
										"type": "literal",
										"value": "endOfTest"
									},
									{
										"type": "literal",
										"value": "expanded"
									},
									{
										"type": "literal",
										"value": "expandedChanged"
									},
									{
										"type": "literal",
										"value": "flowFromChanged"
									},
									{
										"type": "literal",
										"value": "flowToChanged"
									},
									{
										"type": "literal",
										"value": "focus"
									},
									{
										"type": "literal",
										"value": "focusAfterMenuClose"
									},
									{
										"type": "literal",
										"value": "focusChanged"
									},
									{
										"type": "literal",
										"value": "focusContext"
									},
									{
										"type": "literal",
										"value": "grabbedChanged"
									},
									{
										"type": "literal",
										"value": "haspopupChanged"
									},
									{
										"type": "literal",
										"value": "hide"
									},
									{
										"type": "literal",
										"value": "hierarchicalLevelChanged"
									},
									{
										"type": "literal",
										"value": "hitTestResult"
									},
									{
										"type": "literal",
										"value": "hover"
									},
									{
										"type": "literal",
										"value": "ignoredChanged"
									},
									{
										"type": "literal",
										"value": "imageAnnotationChanged"
									},
									{
										"type": "literal",
										"value": "imageFrameUpdated"
									},
									{
										"type": "literal",
										"value": "invalidStatusChanged"
									},
									{
										"type": "literal",
										"value": "keyShortcutsChanged"
									},
									{
										"type": "literal",
										"value": "labeledByChanged"
									},
									{
										"type": "literal",
										"value": "languageChanged"
									},
									{
										"type": "literal",
										"value": "layoutComplete"
									},
									{
										"type": "literal",
										"value": "layoutInvalidated"
									},
									{
										"type": "literal",
										"value": "liveRegionChanged"
									},
									{
										"type": "literal",
										"value": "liveRegionCreated"
									},
									{
										"type": "literal",
										"value": "liveRegionNodeChanged"
									},
									{
										"type": "literal",
										"value": "liveRelevantChanged"
									},
									{
										"type": "literal",
										"value": "liveStatusChanged"
									},
									{
										"type": "literal",
										"value": "loadComplete"
									},
									{
										"type": "literal",
										"value": "loadStart"
									},
									{
										"type": "literal",
										"value": "locationChanged"
									},
									{
										"type": "literal",
										"value": "mediaStartedPlaying"
									},
									{
										"type": "literal",
										"value": "mediaStoppedPlaying"
									},
									{
										"type": "literal",
										"value": "menuEnd"
									},
									{
										"type": "literal",
										"value": "menuItemSelected"
									},
									{
										"type": "literal",
										"value": "menuListItemSelected"
									},
									{
										"type": "literal",
										"value": "menuListValueChanged"
									},
									{
										"type": "literal",
										"value": "menuPopupEnd"
									},
									{
										"type": "literal",
										"value": "menuPopupStart"
									},
									{
										"type": "literal",
										"value": "menuStart"
									},
									{
										"type": "literal",
										"value": "mouseCanceled"
									},
									{
										"type": "literal",
										"value": "mouseDragged"
									},
									{
										"type": "literal",
										"value": "mouseMoved"
									},
									{
										"type": "literal",
										"value": "mousePressed"
									},
									{
										"type": "literal",
										"value": "mouseReleased"
									},
									{
										"type": "literal",
										"value": "multilineStateChanged"
									},
									{
										"type": "literal",
										"value": "multiselectableStateChanged"
									},
									{
										"type": "literal",
										"value": "nameChanged"
									},
									{
										"type": "literal",
										"value": "objectAttributeChanged"
									},
									{
										"type": "literal",
										"value": "otherAttributeChanged"
									},
									{
										"type": "literal",
										"value": "parentChanged"
									},
									{
										"type": "literal",
										"value": "placeholderChanged"
									},
									{
										"type": "literal",
										"value": "portalActivated"
									},
									{
										"type": "literal",
										"value": "positionInSetChanged"
									},
									{
										"type": "literal",
										"value": "rangeValueChanged"
									},
									{
										"type": "literal",
										"value": "rangeValueMaxChanged"
									},
									{
										"type": "literal",
										"value": "rangeValueMinChanged"
									},
									{
										"type": "literal",
										"value": "rangeValueStepChanged"
									},
									{
										"type": "literal",
										"value": "readonlyChanged"
									},
									{
										"type": "literal",
										"value": "relatedNodeChanged"
									},
									{
										"type": "literal",
										"value": "requiredStateChanged"
									},
									{
										"type": "literal",
										"value": "roleChanged"
									},
									{
										"type": "literal",
										"value": "rowCollapsed"
									},
									{
										"type": "literal",
										"value": "rowCountChanged"
									},
									{
										"type": "literal",
										"value": "rowExpanded"
									},
									{
										"type": "literal",
										"value": "scrollHorizontalPositionChanged"
									},
									{
										"type": "literal",
										"value": "scrollPositionChanged"
									},
									{
										"type": "literal",
										"value": "scrollVerticalPositionChanged"
									},
									{
										"type": "literal",
										"value": "scrolledToAnchor"
									},
									{
										"type": "literal",
										"value": "selectedChanged"
									},
									{
										"type": "literal",
										"value": "selectedChildrenChanged"
									},
									{
										"type": "literal",
										"value": "selectedValueChanged"
									},
									{
										"type": "literal",
										"value": "selection"
									},
									{
										"type": "literal",
										"value": "selectionAdd"
									},
									{
										"type": "literal",
										"value": "selectionInTextFieldChanged"
									},
									{
										"type": "literal",
										"value": "selectionRemove"
									},
									{
										"type": "literal",
										"value": "setSizeChanged"
									},
									{
										"type": "literal",
										"value": "show"
									},
									{
										"type": "literal",
										"value": "sortChanged"
									},
									{
										"type": "literal",
										"value": "stateChanged"
									},
									{
										"type": "literal",
										"value": "subtreeCreated"
									},
									{
										"type": "literal",
										"value": "textAttributeChanged"
									},
									{
										"type": "literal",
										"value": "textSelectionChanged"
									},
									{
										"type": "literal",
										"value": "textChanged"
									},
									{
										"type": "literal",
										"value": "tooltipClosed"
									},
									{
										"type": "literal",
										"value": "tooltipOpened"
									},
									{
										"type": "literal",
										"value": "treeChanged"
									},
									{
										"type": "literal",
										"value": "valueInTextFieldChanged"
									},
									{
										"type": "literal",
										"value": "valueChanged"
									},
									{
										"type": "literal",
										"value": "windowActivated"
									},
									{
										"type": "literal",
										"value": "windowDeactivated"
									},
									{
										"type": "literal",
										"value": "windowVisibilityChanged"
									}
								]
							}
						},
						{
							"id": 241,
							"name": "HasPopup",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "Indicates the availability and type of interactive popup element"
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 713,
									"character": 24
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "true"
									},
									{
										"type": "literal",
										"value": "menu"
									},
									{
										"type": "literal",
										"value": "listbox"
									},
									{
										"type": "literal",
										"value": "tree"
									},
									{
										"type": "literal",
										"value": "grid"
									},
									{
										"type": "literal",
										"value": "dialog"
									}
								]
							}
						},
						{
							"id": 244,
							"name": "IntentCommandType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "A command associated with an {@link automation.AutomationIntent}."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 728,
									"character": 33
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "clearSelection"
									},
									{
										"type": "literal",
										"value": "delete"
									},
									{
										"type": "literal",
										"value": "dictate"
									},
									{
										"type": "literal",
										"value": "extendSelection"
									},
									{
										"type": "literal",
										"value": "format"
									},
									{
										"type": "literal",
										"value": "history"
									},
									{
										"type": "literal",
										"value": "insert"
									},
									{
										"type": "literal",
										"value": "marker"
									},
									{
										"type": "literal",
										"value": "moveSelection"
									},
									{
										"type": "literal",
										"value": "setSelection"
									}
								]
							}
						},
						{
							"id": 245,
							"name": "IntentInputEventType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The type of an input event associated with an {@link\nautomation.AutomationIntent}. It describes an edit command, e.g.\nIntentCommandType.insert, in more detail."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 735,
									"character": 36
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "insertText"
									},
									{
										"type": "literal",
										"value": "insertLineBreak"
									},
									{
										"type": "literal",
										"value": "insertParagraph"
									},
									{
										"type": "literal",
										"value": "insertOrderedList"
									},
									{
										"type": "literal",
										"value": "insertUnorderedList"
									},
									{
										"type": "literal",
										"value": "insertHorizontalRule"
									},
									{
										"type": "literal",
										"value": "insertFromPaste"
									},
									{
										"type": "literal",
										"value": "insertFromDrop"
									},
									{
										"type": "literal",
										"value": "insertFromYank"
									},
									{
										"type": "literal",
										"value": "insertTranspose"
									},
									{
										"type": "literal",
										"value": "insertReplacementText"
									},
									{
										"type": "literal",
										"value": "insertCompositionText"
									},
									{
										"type": "literal",
										"value": "deleteWordBackward"
									},
									{
										"type": "literal",
										"value": "deleteWordForward"
									},
									{
										"type": "literal",
										"value": "deleteSoftLineBackward"
									},
									{
										"type": "literal",
										"value": "deleteSoftLineForward"
									},
									{
										"type": "literal",
										"value": "deleteHardLineBackward"
									},
									{
										"type": "literal",
										"value": "deleteHardLineForward"
									},
									{
										"type": "literal",
										"value": "deleteContentBackward"
									},
									{
										"type": "literal",
										"value": "deleteContentForward"
									},
									{
										"type": "literal",
										"value": "deleteByCut"
									},
									{
										"type": "literal",
										"value": "deleteByDrag"
									},
									{
										"type": "literal",
										"value": "historyUndo"
									},
									{
										"type": "literal",
										"value": "historyRedo"
									},
									{
										"type": "literal",
										"value": "formatBold"
									},
									{
										"type": "literal",
										"value": "formatItalic"
									},
									{
										"type": "literal",
										"value": "formatUnderline"
									},
									{
										"type": "literal",
										"value": "formatStrikeThrough"
									},
									{
										"type": "literal",
										"value": "formatSuperscript"
									},
									{
										"type": "literal",
										"value": "formatSubscript"
									},
									{
										"type": "literal",
										"value": "formatJustifyCenter"
									},
									{
										"type": "literal",
										"value": "formatJustifyFull"
									},
									{
										"type": "literal",
										"value": "formatJustifyRight"
									},
									{
										"type": "literal",
										"value": "formatJustifyLeft"
									},
									{
										"type": "literal",
										"value": "formatIndent"
									},
									{
										"type": "literal",
										"value": "formatOutdent"
									},
									{
										"type": "literal",
										"value": "formatRemove"
									},
									{
										"type": "literal",
										"value": "formatSetBlockTextDirection"
									}
								]
							}
						},
						{
							"id": 247,
							"name": "IntentMoveDirectionType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "A move direction associated with an {@link automation.AutomationIntent}."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 745,
									"character": 39
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "backward"
									},
									{
										"type": "literal",
										"value": "forward"
									}
								]
							}
						},
						{
							"id": 246,
							"name": "IntentTextBoundaryType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "A text boundary associated with an {@link automation.AutomationIntent}."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 740,
									"character": 38
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "character"
									},
									{
										"type": "literal",
										"value": "format"
									},
									{
										"type": "literal",
										"value": "lineEnd"
									},
									{
										"type": "literal",
										"value": "lineStart"
									},
									{
										"type": "literal",
										"value": "lineStartOrEnd"
									},
									{
										"type": "literal",
										"value": "object"
									},
									{
										"type": "literal",
										"value": "pageEnd"
									},
									{
										"type": "literal",
										"value": "pageStart"
									},
									{
										"type": "literal",
										"value": "pageStartOrEnd"
									},
									{
										"type": "literal",
										"value": "paragraphEnd"
									},
									{
										"type": "literal",
										"value": "paragraphStart"
									},
									{
										"type": "literal",
										"value": "paragraphStartOrEnd"
									},
									{
										"type": "literal",
										"value": "sentenceEnd"
									},
									{
										"type": "literal",
										"value": "sentenceStart"
									},
									{
										"type": "literal",
										"value": "sentenceStartOrEnd"
									},
									{
										"type": "literal",
										"value": "webPage"
									},
									{
										"type": "literal",
										"value": "wordEnd"
									},
									{
										"type": "literal",
										"value": "wordStart"
									},
									{
										"type": "literal",
										"value": "wordStartOrEnd"
									}
								]
							}
						},
						{
							"id": 243,
							"name": "MarkerType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "Types of markers on text. See <code>AutomationNode.markerTypes</code>."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 723,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "spelling"
									},
									{
										"type": "literal",
										"value": "grammar"
									},
									{
										"type": "literal",
										"value": "textMatch"
									},
									{
										"type": "literal",
										"value": "activeSuggestion"
									},
									{
										"type": "literal",
										"value": "suggestion"
									}
								]
							}
						},
						{
							"id": 238,
							"name": "NameFromType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "Where the node's name is from."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 701,
									"character": 28
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "uninitialized"
									},
									{
										"type": "literal",
										"value": "attribute"
									},
									{
										"type": "literal",
										"value": "attributeExplicitlyEmpty"
									},
									{
										"type": "literal",
										"value": "caption"
									},
									{
										"type": "literal",
										"value": "contents"
									},
									{
										"type": "literal",
										"value": "placeholder"
									},
									{
										"type": "literal",
										"value": "relatedElement"
									},
									{
										"type": "literal",
										"value": "title"
									},
									{
										"type": "literal",
										"value": "value"
									}
								]
							}
						},
						{
							"id": 240,
							"name": "Restriction",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The input restriction for a object -- even non-controls can be disabled."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 708,
									"character": 27
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "disabled"
									},
									{
										"type": "literal",
										"value": "readOnly"
									}
								]
							}
						},
						{
							"id": 234,
							"name": "RoleType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "Describes the purpose of an {@link automation.AutomationNode}."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 677,
									"character": 24
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "abbr"
									},
									{
										"type": "literal",
										"value": "alert"
									},
									{
										"type": "literal",
										"value": "alertDialog"
									},
									{
										"type": "literal",
										"value": "anchor"
									},
									{
										"type": "literal",
										"value": "application"
									},
									{
										"type": "literal",
										"value": "article"
									},
									{
										"type": "literal",
										"value": "audio"
									},
									{
										"type": "literal",
										"value": "banner"
									},
									{
										"type": "literal",
										"value": "blockquote"
									},
									{
										"type": "literal",
										"value": "button"
									},
									{
										"type": "literal",
										"value": "canvas"
									},
									{
										"type": "literal",
										"value": "caption"
									},
									{
										"type": "literal",
										"value": "caret"
									},
									{
										"type": "literal",
										"value": "cell"
									},
									{
										"type": "literal",
										"value": "checkBox"
									},
									{
										"type": "literal",
										"value": "client"
									},
									{
										"type": "literal",
										"value": "code"
									},
									{
										"type": "literal",
										"value": "colorWell"
									},
									{
										"type": "literal",
										"value": "column"
									},
									{
										"type": "literal",
										"value": "columnHeader"
									},
									{
										"type": "literal",
										"value": "comboBoxGrouping"
									},
									{
										"type": "literal",
										"value": "comboBoxMenuButton"
									},
									{
										"type": "literal",
										"value": "comment"
									},
									{
										"type": "literal",
										"value": "complementary"
									},
									{
										"type": "literal",
										"value": "contentDeletion"
									},
									{
										"type": "literal",
										"value": "contentInsertion"
									},
									{
										"type": "literal",
										"value": "contentInfo"
									},
									{
										"type": "literal",
										"value": "date"
									},
									{
										"type": "literal",
										"value": "dateTime"
									},
									{
										"type": "literal",
										"value": "definition"
									},
									{
										"type": "literal",
										"value": "descriptionList"
									},
									{
										"type": "literal",
										"value": "descriptionListDetail"
									},
									{
										"type": "literal",
										"value": "descriptionListTerm"
									},
									{
										"type": "literal",
										"value": "desktop"
									},
									{
										"type": "literal",
										"value": "details"
									},
									{
										"type": "literal",
										"value": "dialog"
									},
									{
										"type": "literal",
										"value": "directory"
									},
									{
										"type": "literal",
										"value": "disclosureTriangle"
									},
									{
										"type": "literal",
										"value": "docAbstract"
									},
									{
										"type": "literal",
										"value": "docAcknowledgments"
									},
									{
										"type": "literal",
										"value": "docAfterword"
									},
									{
										"type": "literal",
										"value": "docAppendix"
									},
									{
										"type": "literal",
										"value": "docBackLink"
									},
									{
										"type": "literal",
										"value": "docBiblioEntry"
									},
									{
										"type": "literal",
										"value": "docBibliography"
									},
									{
										"type": "literal",
										"value": "docBiblioRef"
									},
									{
										"type": "literal",
										"value": "docChapter"
									},
									{
										"type": "literal",
										"value": "docColophon"
									},
									{
										"type": "literal",
										"value": "docConclusion"
									},
									{
										"type": "literal",
										"value": "docCover"
									},
									{
										"type": "literal",
										"value": "docCredit"
									},
									{
										"type": "literal",
										"value": "docCredits"
									},
									{
										"type": "literal",
										"value": "docDedication"
									},
									{
										"type": "literal",
										"value": "docEndnote"
									},
									{
										"type": "literal",
										"value": "docEndnotes"
									},
									{
										"type": "literal",
										"value": "docEpigraph"
									},
									{
										"type": "literal",
										"value": "docEpilogue"
									},
									{
										"type": "literal",
										"value": "docErrata"
									},
									{
										"type": "literal",
										"value": "docExample"
									},
									{
										"type": "literal",
										"value": "docFootnote"
									},
									{
										"type": "literal",
										"value": "docForeword"
									},
									{
										"type": "literal",
										"value": "docGlossary"
									},
									{
										"type": "literal",
										"value": "docGlossRef"
									},
									{
										"type": "literal",
										"value": "docIndex"
									},
									{
										"type": "literal",
										"value": "docIntroduction"
									},
									{
										"type": "literal",
										"value": "docNoteRef"
									},
									{
										"type": "literal",
										"value": "docNotice"
									},
									{
										"type": "literal",
										"value": "docPageBreak"
									},
									{
										"type": "literal",
										"value": "docPageFooter"
									},
									{
										"type": "literal",
										"value": "docPageHeader"
									},
									{
										"type": "literal",
										"value": "docPageList"
									},
									{
										"type": "literal",
										"value": "docPart"
									},
									{
										"type": "literal",
										"value": "docPreface"
									},
									{
										"type": "literal",
										"value": "docPrologue"
									},
									{
										"type": "literal",
										"value": "docPullquote"
									},
									{
										"type": "literal",
										"value": "docQna"
									},
									{
										"type": "literal",
										"value": "docSubtitle"
									},
									{
										"type": "literal",
										"value": "docTip"
									},
									{
										"type": "literal",
										"value": "docToc"
									},
									{
										"type": "literal",
										"value": "document"
									},
									{
										"type": "literal",
										"value": "embeddedObject"
									},
									{
										"type": "literal",
										"value": "emphasis"
									},
									{
										"type": "literal",
										"value": "feed"
									},
									{
										"type": "literal",
										"value": "figcaption"
									},
									{
										"type": "literal",
										"value": "figure"
									},
									{
										"type": "literal",
										"value": "footer"
									},
									{
										"type": "literal",
										"value": "footerAsNonLandmark"
									},
									{
										"type": "literal",
										"value": "form"
									},
									{
										"type": "literal",
										"value": "genericContainer"
									},
									{
										"type": "literal",
										"value": "graphicsDocument"
									},
									{
										"type": "literal",
										"value": "graphicsObject"
									},
									{
										"type": "literal",
										"value": "graphicsSymbol"
									},
									{
										"type": "literal",
										"value": "grid"
									},
									{
										"type": "literal",
										"value": "group"
									},
									{
										"type": "literal",
										"value": "header"
									},
									{
										"type": "literal",
										"value": "headerAsNonLandmark"
									},
									{
										"type": "literal",
										"value": "heading"
									},
									{
										"type": "literal",
										"value": "iframe"
									},
									{
										"type": "literal",
										"value": "iframePresentational"
									},
									{
										"type": "literal",
										"value": "ignored"
									},
									{
										"type": "literal",
										"value": "image"
									},
									{
										"type": "literal",
										"value": "imageMap"
									},
									{
										"type": "literal",
										"value": "imeCandidate"
									},
									{
										"type": "literal",
										"value": "inlineTextBox"
									},
									{
										"type": "literal",
										"value": "inputTime"
									},
									{
										"type": "literal",
										"value": "keyboard"
									},
									{
										"type": "literal",
										"value": "labelText"
									},
									{
										"type": "literal",
										"value": "layoutTable"
									},
									{
										"type": "literal",
										"value": "layoutTableCell"
									},
									{
										"type": "literal",
										"value": "layoutTableRow"
									},
									{
										"type": "literal",
										"value": "legend"
									},
									{
										"type": "literal",
										"value": "lineBreak"
									},
									{
										"type": "literal",
										"value": "link"
									},
									{
										"type": "literal",
										"value": "list"
									},
									{
										"type": "literal",
										"value": "listBox"
									},
									{
										"type": "literal",
										"value": "listBoxOption"
									},
									{
										"type": "literal",
										"value": "listGrid"
									},
									{
										"type": "literal",
										"value": "listItem"
									},
									{
										"type": "literal",
										"value": "listMarker"
									},
									{
										"type": "literal",
										"value": "log"
									},
									{
										"type": "literal",
										"value": "main"
									},
									{
										"type": "literal",
										"value": "mark"
									},
									{
										"type": "literal",
										"value": "marquee"
									},
									{
										"type": "literal",
										"value": "math"
									},
									{
										"type": "literal",
										"value": "menu"
									},
									{
										"type": "literal",
										"value": "menuBar"
									},
									{
										"type": "literal",
										"value": "menuItem"
									},
									{
										"type": "literal",
										"value": "menuItemCheckBox"
									},
									{
										"type": "literal",
										"value": "menuItemRadio"
									},
									{
										"type": "literal",
										"value": "menuListOption"
									},
									{
										"type": "literal",
										"value": "menuListPopup"
									},
									{
										"type": "literal",
										"value": "meter"
									},
									{
										"type": "literal",
										"value": "navigation"
									},
									{
										"type": "literal",
										"value": "note"
									},
									{
										"type": "literal",
										"value": "pane"
									},
									{
										"type": "literal",
										"value": "paragraph"
									},
									{
										"type": "literal",
										"value": "pdfActionableHighlight"
									},
									{
										"type": "literal",
										"value": "pdfRoot"
									},
									{
										"type": "literal",
										"value": "pluginObject"
									},
									{
										"type": "literal",
										"value": "popUpButton"
									},
									{
										"type": "literal",
										"value": "portal"
									},
									{
										"type": "literal",
										"value": "pre"
									},
									{
										"type": "literal",
										"value": "presentational"
									},
									{
										"type": "literal",
										"value": "progressIndicator"
									},
									{
										"type": "literal",
										"value": "radioButton"
									},
									{
										"type": "literal",
										"value": "radioGroup"
									},
									{
										"type": "literal",
										"value": "region"
									},
									{
										"type": "literal",
										"value": "rootWebArea"
									},
									{
										"type": "literal",
										"value": "row"
									},
									{
										"type": "literal",
										"value": "rowGroup"
									},
									{
										"type": "literal",
										"value": "rowHeader"
									},
									{
										"type": "literal",
										"value": "ruby"
									},
									{
										"type": "literal",
										"value": "rubyAnnotation"
									},
									{
										"type": "literal",
										"value": "scrollBar"
									},
									{
										"type": "literal",
										"value": "scrollView"
									},
									{
										"type": "literal",
										"value": "search"
									},
									{
										"type": "literal",
										"value": "searchBox"
									},
									{
										"type": "literal",
										"value": "section"
									},
									{
										"type": "literal",
										"value": "slider"
									},
									{
										"type": "literal",
										"value": "spinButton"
									},
									{
										"type": "literal",
										"value": "splitter"
									},
									{
										"type": "literal",
										"value": "staticText"
									},
									{
										"type": "literal",
										"value": "status"
									},
									{
										"type": "literal",
										"value": "strong"
									},
									{
										"type": "literal",
										"value": "suggestion"
									},
									{
										"type": "literal",
										"value": "svgRoot"
									},
									{
										"type": "literal",
										"value": "switch"
									},
									{
										"type": "literal",
										"value": "tab"
									},
									{
										"type": "literal",
										"value": "tabList"
									},
									{
										"type": "literal",
										"value": "tabPanel"
									},
									{
										"type": "literal",
										"value": "table"
									},
									{
										"type": "literal",
										"value": "tableHeaderContainer"
									},
									{
										"type": "literal",
										"value": "term"
									},
									{
										"type": "literal",
										"value": "textField"
									},
									{
										"type": "literal",
										"value": "textFieldWithComboBox"
									},
									{
										"type": "literal",
										"value": "time"
									},
									{
										"type": "literal",
										"value": "timer"
									},
									{
										"type": "literal",
										"value": "titleBar"
									},
									{
										"type": "literal",
										"value": "toggleButton"
									},
									{
										"type": "literal",
										"value": "toolbar"
									},
									{
										"type": "literal",
										"value": "tooltip"
									},
									{
										"type": "literal",
										"value": "tree"
									},
									{
										"type": "literal",
										"value": "treeGrid"
									},
									{
										"type": "literal",
										"value": "treeItem"
									},
									{
										"type": "literal",
										"value": "unknown"
									},
									{
										"type": "literal",
										"value": "video"
									},
									{
										"type": "literal",
										"value": "webView"
									},
									{
										"type": "literal",
										"value": "window"
									}
								]
							}
						},
						{
							"id": 248,
							"name": "SortDirectionType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "A sort applied to a table row or column header."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 750,
									"character": 33
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "unsorted"
									},
									{
										"type": "literal",
										"value": "ascending"
									},
									{
										"type": "literal",
										"value": "descending"
									},
									{
										"type": "literal",
										"value": "other"
									}
								]
							}
						},
						{
							"id": 235,
							"name": "StateType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "Describes characteristics of an {@link automation.AutomationNode}."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 682,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "autofillAvailable"
									},
									{
										"type": "literal",
										"value": "collapsed"
									},
									{
										"type": "literal",
										"value": "default"
									},
									{
										"type": "literal",
										"value": "editable"
									},
									{
										"type": "literal",
										"value": "expanded"
									},
									{
										"type": "literal",
										"value": "focusable"
									},
									{
										"type": "literal",
										"value": "focused"
									},
									{
										"type": "literal",
										"value": "horizontal"
									},
									{
										"type": "literal",
										"value": "hovered"
									},
									{
										"type": "literal",
										"value": "ignored"
									},
									{
										"type": "literal",
										"value": "invisible"
									},
									{
										"type": "literal",
										"value": "linked"
									},
									{
										"type": "literal",
										"value": "multiline"
									},
									{
										"type": "literal",
										"value": "multiselectable"
									},
									{
										"type": "literal",
										"value": "offscreen"
									},
									{
										"type": "literal",
										"value": "protected"
									},
									{
										"type": "literal",
										"value": "required"
									},
									{
										"type": "literal",
										"value": "richlyEditable"
									},
									{
										"type": "literal",
										"value": "vertical"
									},
									{
										"type": "literal",
										"value": "visited"
									}
								]
							}
						},
						{
							"id": 286,
							"name": "TreeChangeObserverFilter",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "Possible tree changes to listen to using addTreeChangeObserver. Note that\nlistening to all tree changes can be expensive."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 875,
									"character": 40
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "noTreeChanges"
									},
									{
										"type": "literal",
										"value": "liveRegionTreeChanges"
									},
									{
										"type": "literal",
										"value": "textMarkerChanges"
									},
									{
										"type": "literal",
										"value": "allTreeChanges"
									}
								]
							}
						},
						{
							"id": 237,
							"name": "TreeChangeType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "<p>Possible changes to the automation tree. For any given atomic change to\nthe tree, each node that's added, removed, or changed, will appear in exactly\none TreeChange, with one of these types.</p><p>nodeCreated means that this\nnode was added to the tree and its parent is new as well, so it's just one\nnode in a new subtree that was added.</p>"
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 696,
									"character": 30
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "nodeCreated"
									},
									{
										"type": "literal",
										"value": "subtreeCreated"
									},
									{
										"type": "literal",
										"value": "nodeChanged"
									},
									{
										"type": "literal",
										"value": "textChanged"
									},
									{
										"type": "literal",
										"value": "nodeRemoved"
									},
									{
										"type": "literal",
										"value": "subtreeUpdateEnd"
									}
								]
							}
						},
						{
							"id": 217,
							"name": "addTreeChangeObserver",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2188,
									"character": 41
								}
							],
							"signatures": [
								{
									"id": 218,
									"name": "addTreeChangeObserver",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Add a tree change observer. Tree change observers are static/global, they\nlisten to changes across all trees. Pass a filter to determine what specific\ntree changes to listen to, and note that listnening to all tree changes can\nbe expensive."
									},
									"parameters": [
										{
											"id": 219,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 286,
												"name": "TreeChangeObserverFilter"
											}
										},
										{
											"id": 220,
											"name": "observer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A listener for changes on the <code>AutomationNode</code> tree."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 221,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2190,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 222,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 223,
																	"name": "treeChange",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 283,
																		"name": "TreeChange"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 211,
							"name": "getAccessibilityFocus",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2172,
									"character": 41
								}
							],
							"signatures": [
								{
									"id": 212,
									"name": "getAccessibilityFocus",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the automation node that currently has accessibility focus, globally.\nWill return null if none of the nodes in any loaded trees have accessibility\nfocus."
									},
									"parameters": [
										{
											"id": 213,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Called with the <code>AutomationNode</code> that currently has accessibility focus."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 214,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2173,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 215,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 216,
																	"name": "focusedNode",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 481,
																		"name": "AutomationNode"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 199,
							"name": "getDesktop",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2145,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 200,
									"name": "getDesktop",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the automation tree for the whole desktop which consists of all on screen\nviews. Note this API is currently only supported on Chrome OS."
									},
									"parameters": [
										{
											"id": 201,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Called when the <code>AutomationNode</code> for the page is available."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 202,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2146,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 203,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 204,
																	"name": "rootNode",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 481,
																		"name": "AutomationNode"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 205,
							"name": "getFocus",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2158,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 206,
									"name": "getFocus",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the automation node that currently has focus, globally. Will return null\nif none of the nodes in any loaded trees have focus."
									},
									"parameters": [
										{
											"id": 207,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Called with the <code>AutomationNode</code> that currently has focus."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 208,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2159,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 209,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 210,
																	"name": "focusedNode",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 481,
																		"name": "AutomationNode"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 192,
							"name": "getTree",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2131,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 193,
									"name": "getTree",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the automation tree for the tab with the given tabId, or the current tab\nif no tabID is given, enabling automation if necessary. Returns a tree with a\nplaceholder root node; listen for the \"loadComplete\" event to get a\nnotification that the tree has fully loaded (the previous root node reference\nwill stop working at or before this point)."
									},
									"parameters": [
										{
											"id": 194,
											"name": "tabId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 195,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called when the <code>AutomationNode</code> for the page is available."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 196,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2133,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 197,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 198,
																	"name": "rootNode",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 481,
																		"name": "AutomationNode"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 224,
							"name": "removeTreeChangeObserver",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2201,
									"character": 44
								}
							],
							"signatures": [
								{
									"id": 225,
									"name": "removeTreeChangeObserver",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Remove a tree change observer."
									},
									"parameters": [
										{
											"id": 226,
											"name": "observer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A listener for changes on the <code>AutomationNode</code> tree."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 227,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2202,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 228,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 229,
																	"name": "treeChange",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 283,
																		"name": "TreeChange"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 230,
							"name": "setDocumentSelection",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2219,
									"character": 40
								}
							],
							"signatures": [
								{
									"id": 231,
									"name": "setDocumentSelection",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the selection in a tree. This creates a selection in a single tree\n(anchorObject and focusObject must have the same root). Everything in the\ntree between the two node/offset pairs gets included in the selection. The\nanchor is where the user started the selection, while the focus is the point\nat which the selection gets extended e.g. when dragging with a mouse or using\nthe keyboard. For nodes with the role staticText, the offset gives the\ncharacter offset within the value where the selection starts or ends,\nrespectively."
									},
									"parameters": [
										{
											"id": 232,
											"name": "params",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"id": 264,
												"name": "SetDocumentSelectionParams"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								273,
								269,
								481,
								302,
								287,
								254,
								290,
								295,
								249,
								264,
								283
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								236,
								242,
								239,
								233,
								241,
								244,
								245,
								247,
								246,
								243,
								238,
								240,
								234,
								248,
								235,
								286,
								237
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								217,
								211,
								199,
								205,
								192,
								224,
								230
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 668,
							"character": 29
						}
					]
				},
				{
					"id": 821,
					"name": "bookmarks",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.bookmarks</code> API to create, organize, and otherwise\nmanipulate bookmarks. Also see <a href='override'>Override Pages</a>, which\nyou can use to create a custom Bookmark Manager page.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "bookmarks"
							},
							{
								"tag": "chrome-permission",
								"text": "bookmarks\n"
							}
						]
					},
					"children": [
						{
							"id": 909,
							"name": "BookmarkTreeNode",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "A node (either a bookmark or a folder) in the bookmark tree.  Child nodes are\nordered within their parent folder."
							},
							"children": [
								{
									"id": 918,
									"name": "children",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "An ordered list of children of this node."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2296,
											"character": 14
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 909,
											"name": "BookmarkTreeNode"
										}
									}
								},
								{
									"id": 915,
									"name": "dateAdded",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "When this node was created, in milliseconds since the epoch (<code>new\nDate(dateAdded)</code>)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2277,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 916,
									"name": "dateGroupModified",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "When the contents of this folder last changed, in milliseconds since the\nepoch."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2283,
											"character": 23
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 910,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The unique identifier for the node. IDs are unique within the current\nprofile, and they remain valid even after the browser is restarted."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2251,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 912,
									"name": "index",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The 0-based position of this node within its parent folder."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2261,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 911,
									"name": "parentId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The <code>id</code> of the parent folder.  Omitted for the root node."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2256,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 914,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The text displayed for the node."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2271,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 917,
									"name": "unmodifiable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Indicates the reason why this node is unmodifiable. The <var>managed</var>\nvalue indicates that this node was configured by the system administrator or\nby the custodian of a supervised user. Omitted if the node can be modified by\nthe user and the extension (default)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2291,
											"character": 18
										}
									],
									"type": {
										"type": "literal",
										"value": "managed"
									}
								},
								{
									"id": 913,
									"name": "url",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The URL navigated to when a user clicks the bookmark. Omitted for folders."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2266,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										918,
										915,
										916,
										910,
										912,
										911,
										914,
										917,
										913
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2246,
									"character": 37
								}
							]
						},
						{
							"id": 919,
							"name": "CreateDetails",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Object passed to the create() function."
							},
							"children": [
								{
									"id": 921,
									"name": "index",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2308,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 920,
									"name": "parentId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Defaults to the Other Bookmarks folder."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2306,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 922,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2310,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 923,
									"name": "url",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2312,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										921,
										920,
										922,
										923
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2302,
									"character": 34
								}
							]
						},
						{
							"id": 908,
							"name": "BookmarkTreeNodeUnmodifiable",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "Indicates the reason why this node is unmodifiable. The <var>managed</var>\nvalue indicates that this node was configured by the system administrator.\nOmitted if the node can be modified by the user and the extension (default)."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2240,
									"character": 44
								}
							],
							"type": {
								"type": "literal",
								"value": "managed"
							}
						},
						{
							"id": 925,
							"name": "MAX_SUSTAINED_WRITE_OPERATIONS_PER_MINUTE",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"tags": [
									{
										"tag": "deprecated",
										"text": "Bookmark write operations are no longer limited by Chrome.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2323,
									"character": 58
								}
							],
							"type": {
								"type": "literal",
								"value": 1000000
							}
						},
						{
							"id": 924,
							"name": "MAX_WRITE_OPERATIONS_PER_HOUR",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"tags": [
									{
										"tag": "deprecated",
										"text": "Bookmark write operations are no longer limited by Chrome.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2318,
									"character": 46
								}
							],
							"type": {
								"type": "literal",
								"value": 1000000
							}
						},
						{
							"id": 940,
							"name": "onChanged",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a bookmark or folder changes.  <b>Note:</b> Currently, only title\nand url changes trigger this."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2539,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 941,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 2539,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 942,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 943,
															"name": "id",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 944,
															"name": "changeInfo",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 945,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 946,
																			"name": "title",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 2547,
																					"character": 15
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 947,
																			"name": "url",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 2548,
																					"character": 13
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				946,
																				947
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 2546,
																			"character": 19
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 958,
							"name": "onChildrenReordered",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when the children of a folder have changed their order due to the order\nbeing sorted in the UI.  This is not called as a result of a move()."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2576,
									"character": 36
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 959,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 2576,
													"character": 58
												}
											],
											"signatures": [
												{
													"id": 960,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 961,
															"name": "id",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 962,
															"name": "reorderInfo",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 963,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 964,
																			"name": "childIds",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 2584,
																					"character": 18
																				}
																			],
																			"type": {
																				"type": "array",
																				"elementType": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				964
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 2583,
																			"character": 20
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 926,
							"name": "onCreated",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a bookmark or folder is created."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2504,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 927,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 2504,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 928,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 929,
															"name": "id",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 930,
															"name": "bookmark",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reference",
																"id": 909,
																"name": "BookmarkTreeNode"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 965,
							"name": "onImportBegan",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a bookmark import session is begun.  Expensive observers should\nignore onCreated updates until onImportEnded is fired.  Observers should\nstill handle other notifications immediately."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2594,
									"character": 30
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 966,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 2594,
													"character": 52
												}
											],
											"signatures": [
												{
													"id": 967,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 968,
							"name": "onImportEnded",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a bookmark import session is ended."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2601,
									"character": 30
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 969,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 2601,
													"character": 52
												}
											],
											"signatures": [
												{
													"id": 970,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 948,
							"name": "onMoved",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a bookmark or folder is moved to a different parent folder."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2556,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 949,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 2556,
													"character": 46
												}
											],
											"signatures": [
												{
													"id": 950,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 951,
															"name": "id",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 952,
															"name": "moveInfo",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 953,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 955,
																			"name": "index",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 2565,
																					"character": 15
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 957,
																			"name": "oldIndex",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 2567,
																					"character": 18
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 956,
																			"name": "oldParentId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 2566,
																					"character": 21
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 954,
																			"name": "parentId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 2564,
																					"character": 18
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				955,
																				957,
																				956,
																				954
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 2563,
																			"character": 17
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 931,
							"name": "onRemoved",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a bookmark or folder is removed.  When a folder is removed\nrecursively, a single notification is fired for the folder, and none for its\ncontents."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2520,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 932,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 2520,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 933,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 934,
															"name": "id",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 935,
															"name": "removeInfo",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 936,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 938,
																			"name": "index",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 2529,
																					"character": 15
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 939,
																			"name": "node",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 2530,
																					"character": 14
																				}
																			],
																			"type": {
																				"type": "reference",
																				"id": 909,
																				"name": "BookmarkTreeNode"
																			}
																		},
																		{
																			"id": 937,
																			"name": "parentId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 2528,
																					"character": 18
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				938,
																				939,
																				937
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 2527,
																			"character": 19
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 867,
							"name": "create",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2432,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 868,
									"name": "create",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a bookmark or folder under the specified parentId.  If url is NULL or\nmissing, it will be a folder."
									},
									"parameters": [
										{
											"id": 869,
											"name": "bookmark",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 919,
												"name": "CreateDetails"
											}
										},
										{
											"id": 870,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 871,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2434,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 872,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 873,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 909,
																		"name": "BookmarkTreeNode"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 822,
							"name": "get",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2332,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 823,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieves the specified BookmarkTreeNode(s)."
									},
									"parameters": [
										{
											"id": 824,
											"name": "idOrIdList",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A single string-valued id, or an array of string-valued ids"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intersection",
														"types": [
															{
																"type": "tuple",
																"elements": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	}
																]
															},
															{
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 825,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 826,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2334,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 827,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 828,
																	"name": "results",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 909,
																			"name": "BookmarkTreeNode"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 829,
							"name": "getChildren",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2346,
									"character": 31
								}
							],
							"signatures": [
								{
									"id": 830,
									"name": "getChildren",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieves the children of the specified BookmarkTreeNode id."
									},
									"parameters": [
										{
											"id": 831,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 832,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 833,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2348,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 834,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 835,
																	"name": "results",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 909,
																			"name": "BookmarkTreeNode"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 836,
							"name": "getRecent",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2360,
									"character": 29
								}
							],
							"signatures": [
								{
									"id": 837,
									"name": "getRecent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieves the recently added bookmarks."
									},
									"parameters": [
										{
											"id": 838,
											"name": "numberOfItems",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The maximum number of items to return."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 839,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 840,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2362,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 841,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 842,
																	"name": "results",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 909,
																			"name": "BookmarkTreeNode"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 849,
							"name": "getSubTree",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2386,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 850,
									"name": "getSubTree",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieves part of the Bookmarks hierarchy, starting at the specified node."
									},
									"parameters": [
										{
											"id": 851,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ID of the root of the subtree to retrieve."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 852,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 853,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2388,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 854,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 855,
																	"name": "results",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 909,
																			"name": "BookmarkTreeNode"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 843,
							"name": "getTree",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2373,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 844,
									"name": "getTree",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieves the entire Bookmarks hierarchy."
									},
									"parameters": [
										{
											"id": 845,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 846,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2374,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 847,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 848,
																	"name": "results",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 909,
																			"name": "BookmarkTreeNode"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 874,
							"name": "move",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2447,
									"character": 24
								}
							],
							"signatures": [
								{
									"id": 875,
									"name": "move",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Moves the specified BookmarkTreeNode to the provided location."
									},
									"parameters": [
										{
											"id": 876,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 877,
											"name": "destination",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 878,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 880,
															"name": "index",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 2451,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 879,
															"name": "parentId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 2450,
																	"character": 16
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																880,
																879
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2449,
															"character": 18
														}
													]
												}
											}
										},
										{
											"id": 881,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 882,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2453,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 883,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 884,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 909,
																		"name": "BookmarkTreeNode"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 896,
							"name": "remove",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2485,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 897,
									"name": "remove",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Removes a bookmark or an empty bookmark folder."
									},
									"parameters": [
										{
											"id": 898,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 899,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 900,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2487,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 901,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 902,
							"name": "removeTree",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2496,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 903,
									"name": "removeTree",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Recursively removes a bookmark folder."
									},
									"parameters": [
										{
											"id": 904,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 905,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 906,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2498,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 907,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 856,
							"name": "search",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2401,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 857,
									"name": "search",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Searches for BookmarkTreeNodes matching the given query. Queries specified\nwith an object produce BookmarkTreeNodes matching all specified properties."
									},
									"parameters": [
										{
											"id": 858,
											"name": "query",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Either a string of words and quoted phrases that are matched against bookmark URLs and titles, or an object. If an object, the properties <code>query</code>, <code>url</code>, and <code>title</code> may be specified and bookmarks matching all specified properties will be produced."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 859,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 860,
																	"name": "query",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"shortText": "A string of words and quoted phrases that are matched against bookmark URLs\nand titles."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 2407,
																			"character": 13
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																},
																{
																	"id": 862,
																	"name": "title",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"shortText": "The title of the bookmark; matches verbatim."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 2417,
																			"character": 13
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																},
																{
																	"id": 861,
																	"name": "url",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"shortText": "The URL of the bookmark; matches verbatim. Note that folders have no URL."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 2412,
																			"character": 11
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"kind": 1024,
																	"children": [
																		860,
																		862,
																		861
																	]
																}
															],
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 2402,
																	"character": 21
																}
															]
														}
													}
												]
											}
										},
										{
											"id": 863,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 864,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2419,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 865,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 866,
																	"name": "results",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 909,
																			"name": "BookmarkTreeNode"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 885,
							"name": "update",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2468,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 886,
									"name": "update",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Updates the properties of a bookmark or folder. Specify only the properties\nthat you want to change; unspecified properties will be left unchanged.\n<b>Note:</b> Currently, only 'title' and 'url' are supported."
									},
									"parameters": [
										{
											"id": 887,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 888,
											"name": "changes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 889,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 890,
															"name": "title",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 2471,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 891,
															"name": "url",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 2472,
																	"character": 11
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																890,
																891
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2470,
															"character": 14
														}
													]
												}
											}
										},
										{
											"id": 892,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 893,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2474,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 894,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 895,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 909,
																		"name": "BookmarkTreeNode"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								909,
								919
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								908
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								925,
								924,
								940,
								958,
								926,
								965,
								968,
								948,
								931
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								867,
								822,
								829,
								836,
								849,
								843,
								874,
								896,
								902,
								856,
								885
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 2234,
							"character": 28
						}
					]
				},
				{
					"id": 971,
					"name": "browserAction",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use browser actions to put icons in the main Google Chrome toolbar, to the\nright of the address bar. In addition to its <a\nhref='browserAction#icon'>icon</a>, a browser action can have a <a\nhref='browserAction#tooltip'>tooltip</a>, a <a\nhref='browserAction#badge'>badge</a>, and a <a\nhref='browserAction#popups'>popup</a>.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "browserAction\n"
							}
						]
					},
					"children": [
						{
							"id": 1066,
							"name": "TabDetails",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1067,
									"name": "tabId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The ID of the tab to query state for. If no tab is specified, the\nnon-tab-specific state is returned."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2632,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1067
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2627,
									"character": 31
								}
							]
						},
						{
							"id": 1064,
							"name": "ColorArray",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2619,
									"character": 26
								}
							],
							"type": {
								"type": "tuple",
								"elements": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 1065,
							"name": "ImageDataType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "Pixel data for an image. Must be an ImageData object; for example, from a\n<code>canvas</code> element."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2625,
									"character": 29
								}
							],
							"type": {
								"type": "reference",
								"name": "ImageData"
							}
						},
						{
							"id": 1068,
							"name": "onClicked",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a browser action icon is clicked. Does not fire if the browser\naction has a popup."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2859,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 1069,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 2859,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 1070,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 1071,
															"name": "tab",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reference",
																"id": 5892,
																"name": "tabs.Tab"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 1058,
							"name": "disable",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2850,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 1059,
									"name": "disable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Disables the browser action for a tab."
									},
									"parameters": [
										{
											"id": 1060,
											"name": "tabId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The ID of the tab for which to modify the browser action."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1061,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1062,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2852,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1063,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1052,
							"name": "enable",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2839,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 1053,
									"name": "enable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Enables the browser action for a tab. Defaults to enabled."
									},
									"parameters": [
										{
											"id": 1054,
											"name": "tabId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The ID of the tab for which to modify the browser action."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1055,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1056,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2841,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1057,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1045,
							"name": "getBadgeBackgroundColor",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2826,
									"character": 43
								}
							],
							"signatures": [
								{
									"id": 1046,
									"name": "getBadgeBackgroundColor",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the background color of the browser action."
									},
									"parameters": [
										{
											"id": 1047,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 1066,
												"name": "TabDetails"
											}
										},
										{
											"id": 1048,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1049,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2828,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 1050,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1051,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 1064,
																		"name": "ColorArray"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1029,
							"name": "getBadgeText",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2787,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 1030,
									"name": "getBadgeText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the badge text of the browser action. If no tab is specified, the\nnon-tab-specific badge text is returned."
									},
									"parameters": [
										{
											"id": 1031,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 1066,
												"name": "TabDetails"
											}
										},
										{
											"id": 1032,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1033,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2789,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 1034,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1035,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1013,
							"name": "getPopup",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2745,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 1014,
									"name": "getPopup",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the HTML document that is set as the popup for this browser action."
									},
									"parameters": [
										{
											"id": 1015,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 1066,
												"name": "TabDetails"
											}
										},
										{
											"id": 1016,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1017,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2747,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 1018,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1019,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 981,
							"name": "getTitle",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2664,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 982,
									"name": "getTitle",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the title of the browser action."
									},
									"parameters": [
										{
											"id": 983,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 1066,
												"name": "TabDetails"
											}
										},
										{
											"id": 984,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 985,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2666,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 986,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 987,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1036,
							"name": "setBadgeBackgroundColor",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2800,
									"character": 43
								}
							],
							"signatures": [
								{
									"id": 1037,
									"name": "setBadgeBackgroundColor",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the background color for the badge."
									},
									"parameters": [
										{
											"id": 1038,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1039,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1040,
															"name": "color",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "An array of four integers in the range 0-255 that make up the RGBA color of\nthe badge. Can also be a string with a CSS hex color value; for example,\n<code>#FF0000</code> or <code>#F00</code> (red). Renders colors at full\nopacity."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 2808,
																	"character": 13
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "reference",
																		"id": 1064,
																		"name": "ColorArray"
																	}
																]
															}
														},
														{
															"id": 1041,
															"name": "tabId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Limits the change to when a particular tab is selected. Automatically resets\nwhen the tab is closed."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 2814,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1040,
																1041
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2801,
															"character": 14
														}
													]
												}
											}
										},
										{
											"id": 1042,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1043,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2816,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1044,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1020,
							"name": "setBadgeText",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2759,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 1021,
									"name": "setBadgeText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the badge text for the browser action. The badge is displayed on top of\nthe icon."
									},
									"parameters": [
										{
											"id": 1022,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1023,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1025,
															"name": "tabId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Limits the change to when a particular tab is selected. Automatically resets\nwhen the tab is closed."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 2774,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1024,
															"name": "text",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Any number of characters can be passed, but only about four can fit into the\nspace. If an empty string (<code>''</code>) is passed, the badge text is\ncleared.  If <code>tabId</code> is specified and <code>text</code> is null,\nthe text for the specified tab is cleared and defaults to the global badge\ntext."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 2768,
																	"character": 12
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1025,
																1024
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2760,
															"character": 14
														}
													]
												}
											}
										},
										{
											"id": 1026,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1027,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2776,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1028,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 988,
							"name": "setIcon",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2680,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 989,
									"name": "setIcon",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the icon for the browser action. The icon can be specified as the path\nto an image file, as the pixel data from a canvas element, or as a dictionary\nof one of those. Either the <code>path</code> or the <code>imageData</code>\nproperty must be specified."
									},
									"parameters": [
										{
											"id": 990,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 991,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 992,
															"name": "imageData",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Either an ImageData object or a dictionary {size -> ImageData} representing\nan icon to be set. If the icon is specified as a dictionary, the image used\nis chosen depending on the screen's pixel density. If the number of image\npixels that fit into one screen space unit equals <code>scale</code>, then an\nimage with size <code>scale</code> * n is selected, where <i>n</i> is the\nsize of the icon in the UI. At least one image must be specified. Note that\n'details.imageData = foo' is equivalent to 'details.imageData = {'16': foo}'"
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 2691,
																	"character": 17
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "reference",
																		"id": 1065,
																		"name": "ImageDataType"
																	},
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 993,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 2691,
																					"character": 35
																				}
																			],
																			"indexSignature": {
																				"id": 994,
																				"name": "__index",
																				"kind": 8192,
																				"kindString": "Index signature",
																				"flags": {},
																				"parameters": [
																					{
																						"id": 995,
																						"name": "name",
																						"kind": 32768,
																						"flags": {},
																						"type": {
																							"type": "intrinsic",
																							"name": "string"
																						}
																					}
																				],
																				"type": {
																					"type": "intrinsic",
																					"name": "any"
																				}
																			}
																		}
																	}
																]
															}
														},
														{
															"id": 996,
															"name": "path",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Either a relative image path or a dictionary {size -> relative image path}\npointing to an icon to be set. If the icon is specified as a dictionary, the\nimage used is chosen depending on the screen's pixel density. If the number\nof image pixels that fit into one screen space unit equals\n<code>scale</code>, then an image with size <code>scale</code> * n is\nselected, where <i>n</i> is the size of the icon in the UI. At least one\nimage must be specified. Note that 'details.path = foo' is equivalent to\n'details.path = {'16': foo}'"
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 2703,
																	"character": 12
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 997,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 2703,
																					"character": 23
																				}
																			],
																			"indexSignature": {
																				"id": 998,
																				"name": "__index",
																				"kind": 8192,
																				"kindString": "Index signature",
																				"flags": {},
																				"parameters": [
																					{
																						"id": 999,
																						"name": "name",
																						"kind": 32768,
																						"flags": {},
																						"type": {
																							"type": "intrinsic",
																							"name": "string"
																						}
																					}
																				],
																				"type": {
																					"type": "intrinsic",
																					"name": "any"
																				}
																			}
																		}
																	}
																]
															}
														},
														{
															"id": 1000,
															"name": "tabId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Limits the change to when a particular tab is selected. Automatically resets\nwhen the tab is closed."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 2709,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																992,
																996,
																1000
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2681,
															"character": 14
														}
													]
												}
											}
										},
										{
											"id": 1001,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1002,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2711,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1003,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1004,
							"name": "setPopup",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2721,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 1005,
									"name": "setPopup",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the HTML document to be opened as a popup when the user clicks the\nbrowser action icon."
									},
									"parameters": [
										{
											"id": 1006,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1007,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1009,
															"name": "popup",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "The HTML file to show in a popup. If set to the empty string (''), no popup\nis shown."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 2733,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 1008,
															"name": "tabId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Limits the change to when a particular tab is selected. Automatically resets\nwhen the tab is closed."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 2727,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1009,
																1008
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2722,
															"character": 14
														}
													]
												}
											}
										},
										{
											"id": 1010,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1011,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2735,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1012,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 972,
							"name": "setTitle",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2641,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 973,
									"name": "setTitle",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the title of the browser action. This title appears in the tooltip."
									},
									"parameters": [
										{
											"id": 974,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 975,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 977,
															"name": "tabId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Limits the change to when a particular tab is selected. Automatically resets\nwhen the tab is closed."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 2652,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 976,
															"name": "title",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "The string the browser action should display when moused over."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 2646,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																977,
																976
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2642,
															"character": 14
														}
													]
												}
											}
										},
										{
											"id": 978,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 979,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2654,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 980,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1066
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								1064,
								1065
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								1068
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								1058,
								1052,
								1045,
								1029,
								1013,
								981,
								1036,
								1020,
								988,
								1004,
								972
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 2618,
							"character": 32
						}
					]
				},
				{
					"id": 1072,
					"name": "browsingData",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.browsingData</code> API to remove browsing data from a\nuser's local profile.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "browsingData"
							},
							{
								"tag": "chrome-permission",
								"text": "browsingData\n"
							}
						]
					},
					"children": [
						{
							"id": 1183,
							"name": "DataTypeSet",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "A set of data types. Missing data types are interpreted as\n<code>false</code>."
							},
							"children": [
								{
									"id": 1184,
									"name": "appcache",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Websites' appcaches."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2938,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1185,
									"name": "cache",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The browser's cache."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2943,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1186,
									"name": "cacheStorage",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Cache storage"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2948,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1187,
									"name": "cookies",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The browser's cookies."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2953,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1188,
									"name": "downloads",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The browser's download list."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2958,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1189,
									"name": "fileSystems",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Websites' file systems."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2963,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1190,
									"name": "formData",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The browser's stored form data."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2968,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1191,
									"name": "history",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The browser's history."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2973,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1192,
									"name": "indexedDB",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Websites' IndexedDB data."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2978,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1193,
									"name": "localStorage",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Websites' local storage data."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2983,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1195,
									"name": "passwords",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Stored passwords."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2995,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1196,
									"name": "pluginData",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Plugins' data.",
										"tags": [
											{
												"tag": "deprecated",
												"text": "Support for Flash has been removed. This data type will be ignored.\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3002,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1194,
									"name": "serverBoundCertificates",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Server-bound certificates.",
										"tags": [
											{
												"tag": "deprecated",
												"text": "Support for server-bound certificates has been removed. This data type will be ignored.\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2990,
											"character": 29
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1197,
									"name": "serviceWorkers",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Service Workers."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3007,
											"character": 20
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1198,
									"name": "webSQL",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Websites' WebSQL data."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3012,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1184,
										1185,
										1186,
										1187,
										1188,
										1189,
										1190,
										1191,
										1192,
										1193,
										1195,
										1196,
										1194,
										1197,
										1198
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2934,
									"character": 32
								}
							]
						},
						{
							"id": 1174,
							"name": "RemovalOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Options that determine exactly what data will be removed."
							},
							"children": [
								{
									"id": 1182,
									"name": "excludeOrigins",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "When present, data for origins in this list is excluded from deletion. Can't\nbe used together with <code>origins</code>. Only supported for cookies,\nstorage and cache.  Cookies are excluded for the whole registrable domain."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2927,
											"character": 20
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 1176,
									"name": "originTypes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "An object whose properties specify which origin types ought to be cleared. If\nthis object isn't specified, it defaults to clearing only \"unprotected\"\norigins. Please ensure that you <em>really</em> want to remove application\ndata before adding 'protectedWeb' or 'extensions'."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2897,
											"character": 17
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1177,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1180,
													"name": "extension",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Extensions and packaged applications a user has installed (be _really_\ncareful!)."
													},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2912,
															"character": 17
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 1179,
													"name": "protectedWeb",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Websites that have been installed as hosted applications (be careful!)."
													},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2906,
															"character": 20
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 1178,
													"name": "unprotectedWeb",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Normal websites."
													},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 2901,
															"character": 22
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														1180,
														1179,
														1178
													]
												}
											]
										}
									}
								},
								{
									"id": 1181,
									"name": "origins",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "When present, only data for origins in this list is deleted. Only supported\nfor cookies, storage and cache. Cookies are cleared for the whole registrable\ndomain."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2920,
											"character": 13
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 1175,
									"name": "since",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Remove data accumulated on or after this date, represented in milliseconds\nsince the epoch (accessible via the <code>getTime</code> method of the\nJavaScript <code>Date</code> object). If absent, defaults to 0 (which would\nremove all browsing data)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 2889,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1182,
										1176,
										1181,
										1175
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 2882,
									"character": 35
								}
							]
						},
						{
							"id": 1083,
							"name": "remove",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3053,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 1084,
									"name": "remove",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clears various types of browsing data stored in a user's profile."
									},
									"parameters": [
										{
											"id": 1085,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 1174,
												"name": "RemovalOptions"
											}
										},
										{
											"id": 1086,
											"name": "dataToRemove",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The set of data types to remove."
											},
											"type": {
												"type": "reference",
												"id": 1183,
												"name": "DataTypeSet"
											}
										},
										{
											"id": 1087,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called when deletion has completed.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1088,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 3056,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1089,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1090,
							"name": "removeAppcache",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3065,
									"character": 34
								}
							],
							"signatures": [
								{
									"id": 1091,
									"name": "removeAppcache",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clears websites' appcache data."
									},
									"parameters": [
										{
											"id": 1092,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 1174,
												"name": "RemovalOptions"
											}
										},
										{
											"id": 1093,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called when websites' appcache data has been cleared.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1094,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 3067,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1095,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1096,
							"name": "removeCache",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3076,
									"character": 31
								}
							],
							"signatures": [
								{
									"id": 1097,
									"name": "removeCache",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clears the browser's cache."
									},
									"parameters": [
										{
											"id": 1098,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 1174,
												"name": "RemovalOptions"
											}
										},
										{
											"id": 1099,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called when the browser's cache has been cleared.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1100,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 3078,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1101,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1102,
							"name": "removeCacheStorage",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3087,
									"character": 38
								}
							],
							"signatures": [
								{
									"id": 1103,
									"name": "removeCacheStorage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clears websites' cache storage data."
									},
									"parameters": [
										{
											"id": 1104,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 1174,
												"name": "RemovalOptions"
											}
										},
										{
											"id": 1105,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called when websites' cache storage has been cleared.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1106,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 3089,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1107,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1108,
							"name": "removeCookies",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3099,
									"character": 33
								}
							],
							"signatures": [
								{
									"id": 1109,
									"name": "removeCookies",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clears the browser's cookies and server-bound certificates modified within a\nparticular timeframe."
									},
									"parameters": [
										{
											"id": 1110,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 1174,
												"name": "RemovalOptions"
											}
										},
										{
											"id": 1111,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called when the browser's cookies and server-bound certificates have been cleared.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1112,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 3101,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1113,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1114,
							"name": "removeDownloads",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3111,
									"character": 35
								}
							],
							"signatures": [
								{
									"id": 1115,
									"name": "removeDownloads",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clears the browser's list of downloaded files (<em>not</em> the downloaded\nfiles themselves)."
									},
									"parameters": [
										{
											"id": 1116,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 1174,
												"name": "RemovalOptions"
											}
										},
										{
											"id": 1117,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called when the browser's list of downloaded files has been cleared.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1118,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 3113,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1119,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1120,
							"name": "removeFileSystems",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3122,
									"character": 37
								}
							],
							"signatures": [
								{
									"id": 1121,
									"name": "removeFileSystems",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clears websites' file system data."
									},
									"parameters": [
										{
											"id": 1122,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 1174,
												"name": "RemovalOptions"
											}
										},
										{
											"id": 1123,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called when websites' file systems have been cleared.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1124,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 3124,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1125,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1126,
							"name": "removeFormData",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3133,
									"character": 34
								}
							],
							"signatures": [
								{
									"id": 1127,
									"name": "removeFormData",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clears the browser's stored form data (autofill)."
									},
									"parameters": [
										{
											"id": 1128,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 1174,
												"name": "RemovalOptions"
											}
										},
										{
											"id": 1129,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called when the browser's form data has been cleared.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1130,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 3135,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1131,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1132,
							"name": "removeHistory",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3144,
									"character": 33
								}
							],
							"signatures": [
								{
									"id": 1133,
									"name": "removeHistory",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clears the browser's history."
									},
									"parameters": [
										{
											"id": 1134,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 1174,
												"name": "RemovalOptions"
											}
										},
										{
											"id": 1135,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called when the browser's history has cleared.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1136,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 3146,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1137,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1138,
							"name": "removeIndexedDB",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3155,
									"character": 35
								}
							],
							"signatures": [
								{
									"id": 1139,
									"name": "removeIndexedDB",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clears websites' IndexedDB data."
									},
									"parameters": [
										{
											"id": 1140,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 1174,
												"name": "RemovalOptions"
											}
										},
										{
											"id": 1141,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called when websites' IndexedDB data has been cleared.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1142,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 3157,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1143,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1144,
							"name": "removeLocalStorage",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3166,
									"character": 38
								}
							],
							"signatures": [
								{
									"id": 1145,
									"name": "removeLocalStorage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clears websites' local storage data."
									},
									"parameters": [
										{
											"id": 1146,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 1174,
												"name": "RemovalOptions"
											}
										},
										{
											"id": 1147,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called when websites' local storage has been cleared.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1148,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 3168,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1149,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1156,
							"name": "removePasswords",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3189,
									"character": 35
								}
							],
							"signatures": [
								{
									"id": 1157,
									"name": "removePasswords",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clears the browser's stored passwords."
									},
									"parameters": [
										{
											"id": 1158,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 1174,
												"name": "RemovalOptions"
											}
										},
										{
											"id": 1159,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called when the browser's passwords have been cleared.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1160,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 3191,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1161,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1150,
							"name": "removePluginData",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3178,
									"character": 36
								}
							],
							"signatures": [
								{
									"id": 1151,
									"name": "removePluginData",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clears plugins' data.",
										"tags": [
											{
												"tag": "deprecated",
												"text": "Support for Flash has been removed. This function has no effect.\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1152,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 1174,
												"name": "RemovalOptions"
											}
										},
										{
											"id": 1153,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called when plugins' data has been cleared."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1154,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 3180,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1155,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1162,
							"name": "removeServiceWorkers",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3200,
									"character": 40
								}
							],
							"signatures": [
								{
									"id": 1163,
									"name": "removeServiceWorkers",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clears websites' service workers."
									},
									"parameters": [
										{
											"id": 1164,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 1174,
												"name": "RemovalOptions"
											}
										},
										{
											"id": 1165,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called when websites' service workers have been cleared.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1166,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 3202,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1167,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1168,
							"name": "removeWebSQL",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3211,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 1169,
									"name": "removeWebSQL",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clears websites' WebSQL data."
									},
									"parameters": [
										{
											"id": 1170,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 1174,
												"name": "RemovalOptions"
											}
										},
										{
											"id": 1171,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called when websites' WebSQL databases have been cleared.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1172,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 3213,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1173,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1073,
							"name": "settings",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3024,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 1074,
									"name": "settings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Reports which types of data are currently selected in the 'Clear browsing\ndata' settings UI.  Note: some of the data types included in this API are not\navailable in the settings UI, and some UI settings control more than one data\ntype listed here."
									},
									"parameters": [
										{
											"id": 1075,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1076,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 3025,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 1077,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1078,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 1079,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 1082,
																					"name": "dataRemovalPermitted",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"comment": {
																						"shortText": "All of the types will be present in the result, with values of\n<code>true</code> if they are permitted to be removed (e.g., by enterprise\npolicy) and <code>false</code> if not."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 3041,
																							"character": 30
																						}
																					],
																					"type": {
																						"type": "reference",
																						"id": 1183,
																						"name": "DataTypeSet"
																					}
																				},
																				{
																					"id": 1081,
																					"name": "dataToRemove",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"comment": {
																						"shortText": "All of the types will be present in the result, with values of\n<code>true</code> if they are both selected to be removed and permitted to be\nremoved, otherwise <code>false</code>."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 3034,
																							"character": 22
																						}
																					],
																					"type": {
																						"type": "reference",
																						"id": 1183,
																						"name": "DataTypeSet"
																					}
																				},
																				{
																					"id": 1080,
																					"name": "options",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 3027,
																							"character": 17
																						}
																					],
																					"type": {
																						"type": "reference",
																						"id": 1174,
																						"name": "RemovalOptions"
																					}
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						1082,
																						1081,
																						1080
																					]
																				}
																			],
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 3026,
																					"character": 15
																				}
																			]
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1183,
								1174
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								1083,
								1090,
								1096,
								1102,
								1108,
								1114,
								1120,
								1126,
								1132,
								1138,
								1144,
								1156,
								1150,
								1162,
								1168,
								1073
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 2878,
							"character": 31
						}
					]
				},
				{
					"id": 1199,
					"name": "cast",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 1200,
							"name": "channel",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"comment": {
								"shortText": "API for communicating with a Google Cast device over an authenticated\nchannel.",
								"tags": [
									{
										"tag": "chrome-namespace",
										"text": "cast.channel"
									},
									{
										"tag": "chrome-permission",
										"text": "cast\n"
									}
								]
							},
							"children": [
								{
									"id": 1234,
									"name": "ChannelInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1240,
											"name": "audioOnly",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Whether the channel is audio only as identified by the device certificate\nduring channel authentication."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 3319,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 1235,
											"name": "channelId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Id for the channel."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 3292,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1236,
											"name": "connectInfo",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Connection information that was used to establish the channel to the\nreceiver."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 3298,
													"character": 17
												}
											],
											"type": {
												"type": "reference",
												"id": 1226,
												"name": "ConnectInfo"
											}
										},
										{
											"id": 1238,
											"name": "errorState",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "If set, the last error condition encountered by the channel."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 3308,
													"character": 16
												}
											],
											"type": {
												"type": "reference",
												"id": 1224,
												"name": "ChannelError"
											}
										},
										{
											"id": 1239,
											"name": "keepAlive",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "If true, keep-alive messages are handled automatically by the channel."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 3313,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 1237,
											"name": "readyState",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The current state of the channel."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 3303,
													"character": 16
												}
											],
											"type": {
												"type": "reference",
												"id": 1223,
												"name": "ReadyState"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1240,
												1235,
												1236,
												1238,
												1239,
												1237
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3288,
											"character": 32
										}
									]
								},
								{
									"id": 1226,
									"name": "ConnectInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1230,
											"name": "auth",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The authentication method required for the channel."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 3268,
													"character": 10
												}
											],
											"type": {
												"type": "literal",
												"value": "ssl_verified"
											}
										},
										{
											"id": 1233,
											"name": "capabilities",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "If set, CastDeviceCapability bitmask values describing capability of the cast\ndevice."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 3285,
													"character": 18
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1227,
											"name": "ipAddress",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The IPV4 address of the Cast receiver, e.g. '198.1.0.2'. TODO(mfoltz):\nInvestigate whether IPV6 addresses \"just work.\""
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 3251,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1232,
											"name": "livenessTimeout",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "The maximum amount of idle time allowed before a channel is closed."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 3279,
													"character": 21
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1231,
											"name": "pingInterval",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "The amount of time to wait in milliseconds before sending pings to idle\nchannels."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 3274,
													"character": 18
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1228,
											"name": "port",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The port number to connect to, 0-65535."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 3256,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1229,
											"name": "timeout",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "The amount of time to wait in milliseconds before stopping the connection\nprocess. Timeouts are disabled if the value is zero. The default timeout is\n8000ms."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 3263,
													"character": 13
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1230,
												1233,
												1227,
												1232,
												1231,
												1228,
												1229
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3246,
											"character": 32
										}
									]
								},
								{
									"id": 1246,
									"name": "ErrorInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1249,
											"name": "challengeReplyErrorType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "An error encountered when processing the authentication handshake. Values are\ndefined in the enum ChallengeReplyErrorType in logging.proto."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 3366,
													"character": 29
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1247,
											"name": "errorState",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The type of error encountered by the channel."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 3354,
													"character": 16
												}
											],
											"type": {
												"type": "reference",
												"id": 1224,
												"name": "ChannelError"
											}
										},
										{
											"id": 1248,
											"name": "eventType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "The event that was occurring when the error happened.  Values are defined in\nthe enum EventType in logging.proto."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 3360,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1250,
											"name": "netReturnValue",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "A return value from the underlying net:: socket libraries. Values are defined\nin net/base/net_error_list.h."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 3372,
													"character": 20
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1251,
											"name": "nssErrorCode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "An error code returned by NSS. Values are defined in secerr.h."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 3377,
													"character": 18
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1249,
												1247,
												1248,
												1250,
												1251
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3350,
											"character": 30
										}
									]
								},
								{
									"id": 1241,
									"name": "MessageInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1245,
											"name": "data",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The content of the message.  Must be either a string or an ArrayBuffer."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 3347,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1244,
											"name": "destinationId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 3342,
													"character": 19
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1242,
											"name": "namespace_",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The message namespace.  A namespace is a URN of the form\nurn:cast-x:<namespace> that is used to interpret and route Cast messages."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 3327,
													"character": 16
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1243,
											"name": "sourceId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "<p>source and destination ids identify the origin and destination of the\nmessage.  They are used to route messages between endpoints that share a\ndevice-to-device channel.</p><p>For messages between applications:   - The\nsender application id is a unique identifier generated on behalf     of the\nsender application.   - The receiver id is always the the session id for the\napplication.</p><p>For messages to or from the sender or receiver platform,\nthe special ids 'sender-0' and 'receiver-0' can be used.</p><p>For messages\nintended for all endpoints using a given channel, the wildcard destination_id\n'*' can be used.</p>"
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 3340,
													"character": 14
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1245,
												1244,
												1242,
												1243
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3322,
											"character": 32
										}
									]
								},
								{
									"id": 1225,
									"name": "ChannelAuthType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Authentication methods that may be required to connect to a Cast receiver."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3244,
											"character": 31
										}
									],
									"type": {
										"type": "literal",
										"value": "ssl_verified"
									}
								},
								{
									"id": 1224,
									"name": "ChannelError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Error conditions that the channel may encounter.  All error conditions are\nterminal.  When an error condition is encountered the API will: (1)\nTransition the channel to readyState == 'closed'. (2) Set\nChannelInfo.lastError to the error condition. (3) Fire an onError event with\nthe error condition. (4) Fire an onClose event."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3239,
											"character": 28
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "channel_not_open"
											},
											{
												"type": "literal",
												"value": "authentication_error"
											},
											{
												"type": "literal",
												"value": "connect_error"
											},
											{
												"type": "literal",
												"value": "socket_error"
											},
											{
												"type": "literal",
												"value": "transport_error"
											},
											{
												"type": "literal",
												"value": "invalid_message"
											},
											{
												"type": "literal",
												"value": "invalid_channel_id"
											},
											{
												"type": "literal",
												"value": "connect_timeout"
											},
											{
												"type": "literal",
												"value": "ping_timeout"
											},
											{
												"type": "literal",
												"value": "unknown"
											}
										]
									}
								},
								{
									"id": 1223,
									"name": "ReadyState",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "The state of the channel."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3230,
											"character": 26
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "connecting"
											},
											{
												"type": "literal",
												"value": "open"
											},
											{
												"type": "literal",
												"value": "closing"
											},
											{
												"type": "literal",
												"value": "closed"
											}
										]
									}
								},
								{
									"id": 1257,
									"name": "onError",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"comment": {
										"shortText": "Fired when an error occurs as a result of a channel operation or a network\nevent. |error| contains details of the error."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3456,
											"character": 24
										}
									],
									"type": {
										"type": "reference",
										"id": 2537,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 1258,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"comment": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 3456,
															"character": 46
														}
													],
													"signatures": [
														{
															"id": 1259,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"comment": {},
															"parameters": [
																{
																	"id": 1260,
																	"name": "channel",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {},
																	"type": {
																		"type": "reference",
																		"id": 1234,
																		"name": "ChannelInfo"
																	}
																},
																{
																	"id": 1261,
																	"name": "error",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 1246,
																		"name": "ErrorInfo"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										],
										"name": "chrome.events.Event"
									}
								},
								{
									"id": 1252,
									"name": "onMessage",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"comment": {
										"shortText": "Fired when a message is received on an open channel."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3441,
											"character": 26
										}
									],
									"type": {
										"type": "reference",
										"id": 2537,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 1253,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"comment": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 3441,
															"character": 48
														}
													],
													"signatures": [
														{
															"id": 1254,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"comment": {},
															"parameters": [
																{
																	"id": 1255,
																	"name": "channel",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {},
																	"type": {
																		"type": "reference",
																		"id": 1234,
																		"name": "ChannelInfo"
																	}
																},
																{
																	"id": 1256,
																	"name": "message",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 1241,
																		"name": "MessageInfo"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										],
										"name": "chrome.events.Event"
									}
								},
								{
									"id": 1216,
									"name": "close",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3431,
											"character": 25
										}
									],
									"signatures": [
										{
											"id": 1217,
											"name": "close",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Requests that the channel be closed and invokes callback with the resulting\nchannel status.  The channel must be in readyState == 'open' or 'connecting'.\nIf successful, onClose will be fired with readyState == 'closed'.  If\nunsuccessful, channel.readyState will be set to 'closed', and\nchannel.errorState will be set to the error condition."
											},
											"parameters": [
												{
													"id": 1218,
													"name": "channel",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "reference",
														"id": 1234,
														"name": "ChannelInfo"
													}
												},
												{
													"id": 1219,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Callback holding the result of a channel operation."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 1220,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 3433,
																	"character": 15
																}
															],
															"signatures": [
																{
																	"id": 1221,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 1222,
																			"name": "result",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "\n"
																			},
																			"type": {
																				"type": "reference",
																				"id": 1234,
																				"name": "ChannelInfo"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 1201,
									"name": "open",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3393,
											"character": 24
										}
									],
									"signatures": [
										{
											"id": 1202,
											"name": "open",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Opens a new channel to the Cast receiver specified by connectInfo.  Only one\nchannel may be connected to same receiver from the same extension at a time.\nIf the open request is successful, the callback will be invoked with a\nChannelInfo with readyState == 'connecting'.  If unsuccessful, the callback\nwill be invoked with a ChannelInfo with channel.readyState == 'closed',\nchannel.errorState will be set to the error condition, and onError will be\nfired with error details."
											},
											"parameters": [
												{
													"id": 1203,
													"name": "connectInfo",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "reference",
														"id": 1226,
														"name": "ConnectInfo"
													}
												},
												{
													"id": 1204,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Callback holding the result of a channel operation."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 1205,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 3395,
																	"character": 15
																}
															],
															"signatures": [
																{
																	"id": 1206,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 1207,
																			"name": "result",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "\n"
																			},
																			"type": {
																				"type": "reference",
																				"id": 1234,
																				"name": "ChannelInfo"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 1208,
									"name": "send",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3412,
											"character": 24
										}
									],
									"signatures": [
										{
											"id": 1209,
											"name": "send",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Sends a message on the channel and invokes callback with the resulting\nchannel status.  The channel must be in readyState == 'open'.  If\nunsuccessful, channel.readyState will be set to 'closed', channel.errorState\nwill be set to the error condition, and onError will be fired with error\ndetails."
											},
											"parameters": [
												{
													"id": 1210,
													"name": "channel",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "reference",
														"id": 1234,
														"name": "ChannelInfo"
													}
												},
												{
													"id": 1211,
													"name": "message",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "reference",
														"id": 1241,
														"name": "MessageInfo"
													}
												},
												{
													"id": 1212,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Callback holding the result of a channel operation."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 1213,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 3415,
																	"character": 15
																}
															],
															"signatures": [
																{
																	"id": 1214,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 1215,
																			"name": "result",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "\n"
																			},
																			"type": {
																				"type": "reference",
																				"id": 1234,
																				"name": "ChannelInfo"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										1234,
										1226,
										1246,
										1241
									]
								},
								{
									"title": "Type aliases",
									"kind": 4194304,
									"children": [
										1225,
										1224,
										1223
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1257,
										1252
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1216,
										1201,
										1208
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3226,
									"character": 31
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								1200
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 3226,
							"character": 23
						}
					]
				},
				{
					"id": 1262,
					"name": "certificateProvider",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use this API to expose certificates to the platform which can use these\ncertificates for TLS authentications.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "certificateProvider"
							},
							{
								"tag": "chrome-platform",
								"text": "chromeos"
							},
							{
								"tag": "chrome-permission",
								"text": "certificateProvider\n"
							}
						]
					},
					"children": [
						{
							"id": 1311,
							"name": "CertificateInfo",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1312,
									"name": "certificate",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Must be the DER encoding of a X.509 certificate. Currently, only certificates\nof RSA keys are supported."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3592,
											"character": 17
										}
									],
									"type": {
										"type": "reference",
										"name": "ArrayBuffer"
									}
								},
								{
									"id": 1313,
									"name": "supportedHashes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Must be set to all hashes supported for this certificate. This extension will\nonly be asked for signatures of digests calculated with one of these hash\nalgorithms. This should be in order of decreasing hash preference."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3599,
											"character": 21
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1308,
											"name": "Hash"
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1312,
										1313
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3587,
									"character": 36
								}
							]
						},
						{
							"id": 1297,
							"name": "CertificatesUpdateRequest",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1298,
									"name": "certificatesRequestId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Request identifier to be passed to {@link setCertificates}."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3527,
											"character": 27
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1298
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3523,
									"character": 46
								}
							]
						},
						{
							"id": 1290,
							"name": "ClientCertificateInfo",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1291,
									"name": "certificateChain",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The array must contain the DER encoding of the X.509 client certificate as\nits first element. <p>This must include exactly one certificate.</p>"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3494,
											"character": 22
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "ArrayBuffer"
										}
									}
								},
								{
									"id": 1292,
									"name": "supportedAlgorithms",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "All algorithms supported for this certificate. The extension will only be\nasked for signatures using one of these algorithms."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3500,
											"character": 25
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1288,
											"name": "Algorithm"
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1291,
										1292
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3489,
									"character": 42
								}
							]
						},
						{
							"id": 1327,
							"name": "PinResponseDetails",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1328,
									"name": "userInput",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The code provided by the user. Empty if user closed the dialog or some other\nerror occurred."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3671,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1328
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3666,
									"character": 39
								}
							]
						},
						{
							"id": 1304,
							"name": "ReportSignatureDetails",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1306,
									"name": "error",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Error that occurred while generating the signature, if any."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3563,
											"character": 11
										}
									],
									"type": {
										"type": "literal",
										"value": "GENERAL_ERROR"
									}
								},
								{
									"id": 1305,
									"name": "signRequestId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Request identifier that was received via the {@link onSignatureRequested}\nevent."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3558,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1307,
									"name": "signature",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The signature, if successfully generated."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3568,
											"character": 15
										}
									],
									"type": {
										"type": "reference",
										"name": "ArrayBuffer"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1306,
										1305,
										1307
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3553,
									"character": 43
								}
							]
						},
						{
							"id": 1319,
							"name": "RequestPinDetails",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1323,
									"name": "attemptsLeft",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The number of attempts left. This is provided so that any UI can present this\ninformation to the user. Chrome is not expected to enforce this, instead\nstopPinRequest should be called by the extension with errorType =\nMAX_ATTEMPTS_EXCEEDED when the number of pin requests is exceeded."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3649,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1322,
									"name": "errorType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The error template displayed to the user. This should be set if the previous\nrequest failed, to notify the user of the failure reason."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3641,
											"character": 15
										}
									],
									"type": {
										"type": "reference",
										"id": 1310,
										"name": "PinRequestErrorType"
									}
								},
								{
									"id": 1321,
									"name": "requestType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The type of code requested. Default is PIN."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3635,
											"character": 17
										}
									],
									"type": {
										"type": "reference",
										"id": 1309,
										"name": "PinRequestType"
									}
								},
								{
									"id": 1320,
									"name": "signRequestId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The ID given by Chrome in SignRequest."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3630,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1323,
										1322,
										1321,
										1320
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3626,
									"character": 38
								}
							]
						},
						{
							"id": 1293,
							"name": "SetCertificatesDetails",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1294,
									"name": "certificatesRequestId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "When called in response to {@link onCertificatesUpdateRequested}, should\ncontain the received <code>certificatesRequestId</code> value. Otherwise,\nshould be unset."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3509,
											"character": 27
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1296,
									"name": "clientCertificates",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "List of currently available client certificates."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3520,
											"character": 24
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1290,
											"name": "ClientCertificateInfo"
										}
									}
								},
								{
									"id": 1295,
									"name": "error",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Error that occurred while extracting the certificates, if any. This error\nwill be surfaced to the user when appropriate."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3515,
											"character": 11
										}
									],
									"type": {
										"type": "literal",
										"value": "GENERAL_ERROR"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1294,
										1296,
										1295
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3503,
									"character": 43
								}
							]
						},
						{
							"id": 1314,
							"name": "SignRequest",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1318,
									"name": "certificate",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The DER encoding of a X.509 certificate. The extension must sign\n<code>digest</code> using the associated private key."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3623,
											"character": 17
										}
									],
									"type": {
										"type": "reference",
										"name": "ArrayBuffer"
									}
								},
								{
									"id": 1316,
									"name": "digest",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The digest that must be signed."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3612,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"name": "ArrayBuffer"
									}
								},
								{
									"id": 1317,
									"name": "hash",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Refers to the hash algorithm that was used to create <code>digest</code>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3617,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 1308,
										"name": "Hash"
									}
								},
								{
									"id": 1315,
									"name": "signRequestId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The unique ID to be used by the extension should it need to call a method\nthat requires it, e.g. requestPin."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3607,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1318,
										1316,
										1317,
										1315
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3602,
									"character": 32
								}
							]
						},
						{
							"id": 1299,
							"name": "SignatureRequest",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1302,
									"name": "algorithm",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Signature algorithm to be used."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3544,
											"character": 15
										}
									],
									"type": {
										"type": "reference",
										"id": 1288,
										"name": "Algorithm"
									}
								},
								{
									"id": 1303,
									"name": "certificate",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The DER encoding of a X.509 certificate. The extension must sign\n<code>input</code> using the associated private key."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3550,
											"character": 17
										}
									],
									"type": {
										"type": "reference",
										"name": "ArrayBuffer"
									}
								},
								{
									"id": 1301,
									"name": "input",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Data to be signed. Note that the data is not hashed."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3539,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "ArrayBuffer"
									}
								},
								{
									"id": 1300,
									"name": "signRequestId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Request identifier to be passed to {@link reportSignature}."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3534,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1302,
										1303,
										1301,
										1300
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3530,
									"character": 37
								}
							]
						},
						{
							"id": 1324,
							"name": "StopPinRequestDetails",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1326,
									"name": "errorType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The error template. If present it is displayed to user. Intended to contain\nthe reason for stopping the flow if it was caused by an error, e.g.\nMAX_ATTEMPTS_EXCEEDED."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3663,
											"character": 15
										}
									],
									"type": {
										"type": "reference",
										"id": 1310,
										"name": "PinRequestErrorType"
									}
								},
								{
									"id": 1325,
									"name": "signRequestId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The ID given by Chrome in SignRequest."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3656,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1326,
										1325
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3652,
									"character": 42
								}
							]
						},
						{
							"id": 1288,
							"name": "Algorithm",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "Types of supported cryptographic signature algorithms."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3482,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "RSASSA_PKCS1_v1_5_MD5_SHA1"
									},
									{
										"type": "literal",
										"value": "RSASSA_PKCS1_v1_5_SHA1"
									},
									{
										"type": "literal",
										"value": "RSASSA_PKCS1_v1_5_SHA256"
									},
									{
										"type": "literal",
										"value": "RSASSA_PKCS1_v1_5_SHA384"
									},
									{
										"type": "literal",
										"value": "RSASSA_PKCS1_v1_5_SHA512"
									},
									{
										"type": "literal",
										"value": "RSASSA_PSS_SHA256"
									},
									{
										"type": "literal",
										"value": "RSASSA_PSS_SHA384"
									},
									{
										"type": "literal",
										"value": "RSASSA_PSS_SHA512"
									}
								]
							}
						},
						{
							"id": 1289,
							"name": "Error",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "Types of errors that the extension can report."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3487,
									"character": 21
								}
							],
							"type": {
								"type": "literal",
								"value": "GENERAL_ERROR"
							}
						},
						{
							"id": 1308,
							"name": "Hash",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "Deprecated. Replaced by {@link Algorithm}."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3574,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "MD5_SHA1"
									},
									{
										"type": "literal",
										"value": "SHA1"
									},
									{
										"type": "literal",
										"value": "SHA256"
									},
									{
										"type": "literal",
										"value": "SHA384"
									},
									{
										"type": "literal",
										"value": "SHA512"
									}
								]
							}
						},
						{
							"id": 1310,
							"name": "PinRequestErrorType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The types of errors that can be presented to the user through the requestPin\nfunction."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3585,
									"character": 35
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "INVALID_PIN"
									},
									{
										"type": "literal",
										"value": "INVALID_PUK"
									},
									{
										"type": "literal",
										"value": "MAX_ATTEMPTS_EXCEEDED"
									},
									{
										"type": "literal",
										"value": "UNKNOWN_ERROR"
									}
								]
							}
						},
						{
							"id": 1309,
							"name": "PinRequestType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The type of code being requested by the extension with requestPin function."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3579,
									"character": 30
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "PIN"
									},
									{
										"type": "literal",
										"value": "PUK"
									}
								]
							}
						},
						{
							"id": 1337,
							"name": "onCertificatesRequested",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "<p>This event fires every time the browser requests the current list of\ncertificates provided by this extension. The extension must call\n<code>reportCallback</code> exactly once with the current list of\ncertificates.</p>",
								"tags": [
									{
										"tag": "deprecated",
										"text": "Use {@link onCertificatesUpdateRequested} instead.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3771,
									"character": 40
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 1338,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 3771,
													"character": 62
												}
											],
											"signatures": [
												{
													"id": 1339,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1340,
															"name": "reportCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 1341,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 3773,
																			"character": 23
																		}
																	],
																	"signatures": [
																		{
																			"id": 1342,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 1343,
																					"name": "certificates",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "array",
																						"elementType": {
																							"type": "reference",
																							"id": 1311,
																							"name": "CertificateInfo"
																						}
																					}
																				},
																				{
																					"id": 1344,
																					"name": "callback",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "reflection",
																						"declaration": {
																							"id": 1345,
																							"name": "__type",
																							"kind": 65536,
																							"kindString": "Type literal",
																							"flags": {},
																							"sources": [
																								{
																									"fileName": "npm/index.d.ts",
																									"line": 3775,
																									"character": 19
																								}
																							],
																							"signatures": [
																								{
																									"id": 1346,
																									"name": "__type",
																									"kind": 4096,
																									"kindString": "Call signature",
																									"flags": {},
																									"parameters": [
																										{
																											"id": 1347,
																											"name": "rejectedCertificates",
																											"kind": 32768,
																											"kindString": "Parameter",
																											"flags": {},
																											"type": {
																												"type": "array",
																												"elementType": {
																													"type": "reference",
																													"name": "ArrayBuffer"
																												}
																											}
																										}
																									],
																									"type": {
																										"type": "intrinsic",
																										"name": "void"
																									}
																								}
																							]
																						}
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 1329,
							"name": "onCertificatesUpdateRequested",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "This event fires if the certificates set via {@link setCertificates} are\ninsufficient or the browser requests updated information. The extension must\ncall {@link setCertificates} with the updated list of certificates and the\nreceived <code>certificatesRequestId</code>."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3738,
									"character": 46
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 1330,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 3738,
													"character": 68
												}
											],
											"signatures": [
												{
													"id": 1331,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 1332,
															"name": "request",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reference",
																"id": 1297,
																"name": "CertificatesUpdateRequest"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 1348,
							"name": "onSignDigestRequested",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "This event fires every time the browser needs to sign a message using a\ncertificate provided by this extension in reply to an {@link\nonCertificatesRequested} event. The extension must sign the data in\n<code>request</code> using the appropriate algorithm and private key and\nreturn it by calling <code>reportCallback</code>. <code>reportCallback</code>\nmust be called exactly once.",
								"tags": [
									{
										"tag": "deprecated",
										"text": "Use {@link onSignatureRequested} instead.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3792,
									"character": 38
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 1349,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 3792,
													"character": 60
												}
											],
											"signatures": [
												{
													"id": 1350,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 1351,
															"name": "request",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Contains the details about the sign request.\n"
															},
															"type": {
																"type": "reference",
																"id": 1314,
																"name": "SignRequest"
															}
														},
														{
															"id": 1352,
															"name": "reportCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 1353,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 3798,
																			"character": 23
																		}
																	],
																	"signatures": [
																		{
																			"id": 1354,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 1355,
																					"name": "signature",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {
																						"isOptional": true
																					},
																					"type": {
																						"type": "reference",
																						"name": "ArrayBuffer"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 1333,
							"name": "onSignatureRequested",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "This event fires every time the browser needs to sign a message using a\ncertificate provided by this extension via {@link setCertificates}. <p>The\nextension must sign the input data from <code>request</code> using the\nappropriate algorithm and private key and return it by calling {@link\nreportSignature} with the received <code>signRequestId</code>.</p>"
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3754,
									"character": 37
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 1334,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 3754,
													"character": 59
												}
											],
											"signatures": [
												{
													"id": 1335,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 1336,
															"name": "request",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reference",
																"id": 1299,
																"name": "SignatureRequest"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 1282,
							"name": "reportSignature",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3727,
									"character": 35
								}
							],
							"signatures": [
								{
									"id": 1283,
									"name": "reportSignature",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Should be called as a response to {@link onSignatureRequested}. <p>The\nextension must eventually call this function for every {@link\nonSignatureRequested} event; the API implementation will stop waiting for\nthis call after some time and respond with a timeout error when this function\nis called.</p>"
									},
									"parameters": [
										{
											"id": 1284,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 1304,
												"name": "ReportSignatureDetails"
											}
										},
										{
											"id": 1285,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1286,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 3729,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1287,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1263,
							"name": "requestPin",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3684,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 1264,
									"name": "requestPin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Requests the PIN from the user. Only one ongoing request at a time is\nallowed. The requests issued while another flow is ongoing are rejected. It's\nthe extension's responsibility to try again later if another flow is in\nprogress."
									},
									"parameters": [
										{
											"id": 1265,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Contains the details about the requested dialog."
											},
											"type": {
												"type": "reference",
												"id": 1319,
												"name": "RequestPinDetails"
											}
										},
										{
											"id": 1266,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Is called when the dialog is resolved with the user input, or when the dialog request finishes unsuccessfully (e.g. the dialog was canceled by the user or was not allowed to be shown)."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1267,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 3686,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 1268,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1269,
																	"name": "details",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 1327,
																		"name": "PinResponseDetails"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1276,
							"name": "setCertificates",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3712,
									"character": 35
								}
							],
							"signatures": [
								{
									"id": 1277,
									"name": "setCertificates",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets a list of certificates to use in the browser. <p>The extension should\ncall this function after initialization and on every change in the set of\ncurrently available certificates. The extension should also call this\nfunction in response to {@link onCertificatesUpdateRequested} every time this\nevent is received.</p>"
									},
									"parameters": [
										{
											"id": 1278,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The certificates to set. Invalid certificates will be ignored."
											},
											"type": {
												"type": "reference",
												"id": 1293,
												"name": "SetCertificatesDetails"
											}
										},
										{
											"id": 1279,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called upon completion.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1280,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 3714,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1281,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1270,
							"name": "stopPinRequest",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3697,
									"character": 34
								}
							],
							"signatures": [
								{
									"id": 1271,
									"name": "stopPinRequest",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Stops the pin request started by the {@link requestPin} function."
									},
									"parameters": [
										{
											"id": 1272,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Contains the details about the reason for stopping the request flow."
											},
											"type": {
												"type": "reference",
												"id": 1324,
												"name": "StopPinRequestDetails"
											}
										},
										{
											"id": 1273,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "To be used by Chrome to send to the extension the status from their request to close PIN dialog for user.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1274,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 3699,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 1275,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1311,
								1297,
								1290,
								1327,
								1304,
								1319,
								1293,
								1314,
								1299,
								1324
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								1288,
								1289,
								1308,
								1310,
								1309
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								1337,
								1329,
								1348,
								1333
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								1282,
								1263,
								1276,
								1270
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 3478,
							"character": 38
						}
					]
				},
				{
					"id": 1356,
					"name": "commands",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the commands API to add keyboard shortcuts that trigger actions in your\nextension, for example, an action to open the browser action or send a\ncommand to the extension.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "commands\n"
							}
						]
					},
					"children": [
						{
							"id": 1363,
							"name": "Command",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1365,
									"name": "description",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The Extension Command description"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3824,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1364,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The name of the Extension Command"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3819,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1366,
									"name": "shortcut",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The shortcut active for this command, or blank if not active."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3829,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1365,
										1364,
										1366
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3815,
									"character": 28
								}
							]
						},
						{
							"id": 1367,
							"name": "onCommand",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a registered command is activated using a keyboard shortcut."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3848,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 1368,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 3848,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 1369,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 1370,
															"name": "command",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 1371,
															"name": "tab",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reference",
																"id": 5892,
																"name": "tabs.Tab"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 1357,
							"name": "getAll",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3839,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 1358,
									"name": "getAll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns all the registered extension commands for this extension and their\nshortcut (if active)."
									},
									"parameters": [
										{
											"id": 1359,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called to return the registered commands."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1360,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 3840,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1361,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1362,
																	"name": "commands",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 1363,
																			"name": "Command"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1363
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								1367
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								1357
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 3814,
							"character": 27
						}
					]
				},
				{
					"id": 1372,
					"name": "contentScripts",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Stub namespace for the \"content_scripts\" manifest key.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "contentScripts\n"
							}
						]
					},
					"children": [
						{
							"id": 1374,
							"name": "ContentScript",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1379,
									"name": "all_frames",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "If specified true, it will inject into all frames, even if the frame is not\nthe top-most frame in the tab. Each frame is checked independently for URL\nrequirements; it will not inject into child frames if the URL requirements\nare not met. Defaults to false, meaning that only the top frame is matched."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3907,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1377,
									"name": "css",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The list of CSS files to be injected into matching pages. These are injected\nin the order they appear in this array, before any DOM is constructed or\ndisplayed for the page."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3893,
											"character": 9
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 1382,
									"name": "exclude_globs",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Applied after matches to exclude URLs that match this glob. Intended to\nemulate the <a\nhref=\"https://wiki.greasespot.net/Metadata_Block#.40exclude\">@exclude </a>\nGreasemonkey keyword."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3930,
											"character": 19
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 1376,
									"name": "exclude_matches",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Excludes pages that this content script would otherwise be injected into. See\n<a href=\"match_patterns\">Match Patterns</a> for more details on the syntax of\nthese strings."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3886,
											"character": 21
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 1381,
									"name": "include_globs",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Applied after matches to include only those URLs that also match this glob.\nIntended to emulate the <a\nhref=\"http://wiki.greasespot.net/Metadata_Block#.40include\">@include </a>\nGreasemonkey keyword."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3922,
											"character": 19
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 1378,
									"name": "js",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The list of JavaScript files to be injected into matching pages. These are\ninjected in the order they appear in this array."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3899,
											"character": 8
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 1380,
									"name": "match_about_blank",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Whether the script should inject into an about:blank frame where the parent\nor opener frame matches one of the patterns declared in matches. Defaults to\nfalse."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3914,
											"character": 23
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1375,
									"name": "matches",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Specifies which pages this content script will be injected into. See <a\nhref=\"match_patterns\">Match Patterns</a> for more details on the syntax of\nthese strings."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3879,
											"character": 13
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 1383,
									"name": "run_at",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Specifies when JavaScript files are injected into the web page. The preferred\nand default value is <code>document_idle</code>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3936,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 1373,
										"name": "RunAt"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1379,
										1377,
										1382,
										1376,
										1381,
										1378,
										1380,
										1375,
										1383
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3873,
									"character": 34
								}
							]
						},
						{
							"id": 1373,
							"name": "RunAt",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The stage in the document lifecycle when the javascript file is injected."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3871,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "document_idle"
									},
									{
										"type": "literal",
										"value": "document_start"
									},
									{
										"type": "literal",
										"value": "document_end"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1374
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								1373
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 3867,
							"character": 33
						}
					]
				},
				{
					"id": 1384,
					"name": "contentSettings",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.contentSettings</code> API to change settings that\ncontrol whether websites can use features such as cookies, JavaScript, and\nplugins. More generally speaking, content settings allow you to customize\nChrome's behavior on a per-site basis instead of globally.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "contentSettings"
							},
							{
								"tag": "chrome-permission",
								"text": "contentSettings\n"
							}
						]
					},
					"children": [
						{
							"id": 1389,
							"name": "ContentSetting",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1390,
									"name": "clear",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 1391,
											"name": "clear",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Clear all content setting rules set by this extension."
											},
											"parameters": [
												{
													"id": 1392,
													"name": "details",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 1393,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 1394,
																	"name": "scope",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"shortText": "Where to clear the setting (default: regular)."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 3990,
																			"character": 15
																		}
																	],
																	"type": {
																		"type": "reference",
																		"id": 1388,
																		"name": "Scope"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"kind": 1024,
																	"children": [
																		1394
																	]
																}
															]
														}
													}
												},
												{
													"id": 1395,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "\n"
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 1396,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 1397,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 1398,
									"name": "get",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 1399,
											"name": "get",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Gets the current content setting for a given pair of URLs."
											},
											"parameters": [
												{
													"id": 1400,
													"name": "details",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 1401,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 1405,
																	"name": "incognito",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"shortText": "Whether to check the content settings for an incognito session. (default\nfalse)"
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 4027,
																			"character": 19
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "boolean"
																	}
																},
																{
																	"id": 1402,
																	"name": "primaryUrl",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"comment": {
																		"shortText": "The primary URL for which the content setting should be retrieved. Note that\nthe meaning of a primary URL depends on the content type."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 4008,
																			"character": 20
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																},
																{
																	"id": 1404,
																	"name": "resourceIdentifier",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"shortText": "A more specific identifier of the type of content for which the settings\nshould be retrieved."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 4021,
																			"character": 28
																		}
																	],
																	"type": {
																		"type": "reference",
																		"id": 1385,
																		"name": "ResourceIdentifier"
																	}
																},
																{
																	"id": 1403,
																	"name": "secondaryUrl",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"shortText": "The secondary URL for which the content setting should be retrieved. Defaults\nto the primary URL. Note that the meaning of a secondary URL depends on the\ncontent type, and not all content types use secondary URLs."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 4015,
																			"character": 22
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"kind": 1024,
																	"children": [
																		1405,
																		1402,
																		1404,
																		1403
																	]
																}
															]
														}
													}
												},
												{
													"id": 1406,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 1407,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 1408,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 1409,
																			"name": "details",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "\n"
																			},
																			"type": {
																				"type": "reflection",
																				"declaration": {
																					"id": 1410,
																					"name": "__type",
																					"kind": 65536,
																					"kindString": "Type literal",
																					"flags": {},
																					"children": [
																						{
																							"id": 1411,
																							"name": "setting",
																							"kind": 1024,
																							"kindString": "Property",
																							"flags": {},
																							"comment": {
																								"shortText": "The content setting. See the description of the individual ContentSetting\nobjects for the possible values."
																							},
																							"sources": [
																								{
																									"fileName": "npm/index.d.ts",
																									"line": 4035,
																									"character": 19
																								}
																							],
																							"type": {
																								"type": "reference",
																								"name": "T"
																							}
																						}
																					],
																					"groups": [
																						{
																							"title": "Properties",
																							"kind": 1024,
																							"children": [
																								1411
																							]
																						}
																					]
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 1424,
									"name": "getResourceIdentifiers",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 1425,
											"name": "getResourceIdentifiers",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1426,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 1427,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 1428,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 1429,
																			"name": "resourceIdentifiers",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"text": "A list of resource identifiers for this content type, or <var>undefined</var> if this content type does not use resource identifiers.\n"
																			},
																			"type": {
																				"type": "array",
																				"elementType": {
																					"type": "reference",
																					"id": 1385,
																					"name": "ResourceIdentifier"
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 1412,
									"name": "set",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 1413,
											"name": "set",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Applies a new content setting rule."
											},
											"parameters": [
												{
													"id": 1414,
													"name": "details",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 1415,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 1416,
																	"name": "primaryPattern",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"comment": {
																		"shortText": "The pattern for the primary URL. For details on the format of a pattern, see\n<a href='contentSettings#patterns'>Content Setting Patterns</a>."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 4052,
																			"character": 24
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																},
																{
																	"id": 1418,
																	"name": "resourceIdentifier",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"shortText": "The resource identifier for the content type."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 4064,
																			"character": 28
																		}
																	],
																	"type": {
																		"type": "reference",
																		"id": 1385,
																		"name": "ResourceIdentifier"
																	}
																},
																{
																	"id": 1420,
																	"name": "scope",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"shortText": "Where to set the setting (default: regular)."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 4075,
																			"character": 15
																		}
																	],
																	"type": {
																		"type": "reference",
																		"id": 1388,
																		"name": "Scope"
																	}
																},
																{
																	"id": 1417,
																	"name": "secondaryPattern",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"shortText": "The pattern for the secondary URL. Defaults to matching all URLs. For details\non the format of a pattern, see <a href='contentSettings#patterns'>Content\nSetting Patterns</a>."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 4059,
																			"character": 26
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																},
																{
																	"id": 1419,
																	"name": "setting",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"comment": {
																		"shortText": "The setting applied by this rule. See the description of the individual\nContentSetting objects for the possible values."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 4070,
																			"character": 17
																		}
																	],
																	"type": {
																		"type": "reference",
																		"name": "T"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"kind": 1024,
																	"children": [
																		1416,
																		1418,
																		1420,
																		1417,
																		1419
																	]
																}
															]
														}
													}
												},
												{
													"id": 1421,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "\n"
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 1422,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 1423,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Methods",
									"kind": 2048,
									"children": [
										1390,
										1398,
										1424,
										1412
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3978,
									"character": 35
								}
							],
							"typeParameter": [
								{
									"id": 1430,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							]
						},
						{
							"id": 1385,
							"name": "ResourceIdentifier",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "The only content type using resource identifiers is {@link\ncontentSettings.plugins}. For more information, see <a\nhref=\"contentSettings#resource-identifiers\">Resource Identifiers</a>."
							},
							"children": [
								{
									"id": 1387,
									"name": "description",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "A human readable description of the resource."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3966,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1386,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The resource identifier for the given content type."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 3961,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1387,
										1386
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3957,
									"character": 39
								}
							]
						},
						{
							"id": 1441,
							"name": "CameraContentSetting",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4111,
									"character": 36
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "allow"
									},
									{
										"type": "literal",
										"value": "block"
									},
									{
										"type": "literal",
										"value": "ask"
									}
								]
							}
						},
						{
							"id": 1431,
							"name": "CookiesContentSetting",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4091,
									"character": 37
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "allow"
									},
									{
										"type": "literal",
										"value": "block"
									},
									{
										"type": "literal",
										"value": "session_only"
									}
								]
							}
						},
						{
							"id": 1438,
							"name": "FullscreenContentSetting",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4105,
									"character": 40
								}
							],
							"type": {
								"type": "literal",
								"value": "allow"
							}
						},
						{
							"id": 1432,
							"name": "ImagesContentSetting",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4093,
									"character": 36
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "allow"
									},
									{
										"type": "literal",
										"value": "block"
									}
								]
							}
						},
						{
							"id": 1433,
							"name": "JavascriptContentSetting",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4095,
									"character": 40
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "allow"
									},
									{
										"type": "literal",
										"value": "block"
									}
								]
							}
						},
						{
							"id": 1434,
							"name": "LocationContentSetting",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4097,
									"character": 38
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "allow"
									},
									{
										"type": "literal",
										"value": "block"
									},
									{
										"type": "literal",
										"value": "ask"
									}
								]
							}
						},
						{
							"id": 1440,
							"name": "MicrophoneContentSetting",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4109,
									"character": 40
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "allow"
									},
									{
										"type": "literal",
										"value": "block"
									},
									{
										"type": "literal",
										"value": "ask"
									}
								]
							}
						},
						{
							"id": 1439,
							"name": "MouselockContentSetting",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4107,
									"character": 39
								}
							],
							"type": {
								"type": "literal",
								"value": "allow"
							}
						},
						{
							"id": 1443,
							"name": "MultipleAutomaticDownloadsContentSetting",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4115,
									"character": 56
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "allow"
									},
									{
										"type": "literal",
										"value": "block"
									},
									{
										"type": "literal",
										"value": "ask"
									}
								]
							}
						},
						{
							"id": 1437,
							"name": "NotificationsContentSetting",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4103,
									"character": 43
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "allow"
									},
									{
										"type": "literal",
										"value": "block"
									},
									{
										"type": "literal",
										"value": "ask"
									}
								]
							}
						},
						{
							"id": 1435,
							"name": "PluginsContentSetting",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4099,
									"character": 37
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "allow"
									},
									{
										"type": "literal",
										"value": "block"
									},
									{
										"type": "literal",
										"value": "detect_important_content"
									}
								]
							}
						},
						{
							"id": 1436,
							"name": "PopupsContentSetting",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4101,
									"character": 36
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "allow"
									},
									{
										"type": "literal",
										"value": "block"
									}
								]
							}
						},
						{
							"id": 1442,
							"name": "PpapiBrokerContentSetting",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4113,
									"character": 41
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "allow"
									},
									{
										"type": "literal",
										"value": "block"
									},
									{
										"type": "literal",
										"value": "ask"
									}
								]
							}
						},
						{
							"id": 1388,
							"name": "Scope",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The scope of the ContentSetting. One of<br><var>regular</var>: setting for\nregular profile (which is inherited by the incognito profile if not\noverridden elsewhere),<br><var>incognito_session_only</var>: setting for\nincognito profile that can only be set during an incognito session and is\ndeleted when the incognito session ends (overrides regular settings)."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 3976,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "regular"
									},
									{
										"type": "literal",
										"value": "incognito_session_only"
									}
								]
							}
						},
						{
							"id": 1456,
							"name": "automaticDownloads",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Whether to allow sites to download multiple files automatically. One of\n<br><var>allow</var>: Allow sites to download multiple files\nautomatically,<br><var>block</var>: Don't allow sites to download multiple\nfiles automatically,<br><var>ask</var>: Ask when a site wants to download\nfiles automatically after the first file. <br>Default is\n<var>ask</var>.<br>The primary URL is the URL of the top-level frame. The\nsecondary URL is not used."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4235,
									"character": 35
								}
							],
							"type": {
								"type": "reference",
								"id": 1389,
								"typeArguments": [
									{
										"type": "reference",
										"id": 1443,
										"name": "MultipleAutomaticDownloadsContentSetting"
									}
								],
								"name": "ContentSetting"
							}
						},
						{
							"id": 1454,
							"name": "camera",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Whether to allow sites to access the camera. One of <br><var>allow</var>:\nAllow sites to access the camera,<br><var>block</var>: Don't allow sites to\naccess the camera,<br><var>ask</var>: Ask when a site wants to access the\ncamera. <br>Default is <var>ask</var>.<br>The primary URL is the URL of the\ndocument which requested camera access. The secondary URL is not\nused.<br>NOTE: The 'allow' setting is not valid if both patterns are\n'<all_urls>'."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4214,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"id": 1389,
								"typeArguments": [
									{
										"type": "reference",
										"id": 1441,
										"name": "CameraContentSetting"
									}
								],
								"name": "ContentSetting"
							}
						},
						{
							"id": 1444,
							"name": "cookies",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Whether to allow cookies and other local data to be set by websites. One\nof<br><var>allow</var>: Accept cookies,<br><var>block</var>: Block\ncookies,<br><var>session_only</var>: Accept cookies only for the current\nsession. <br>Default is <var>allow</var>.<br>The primary URL is the URL\nrepresenting the cookie origin. The secondary URL is the URL of the top-level\nframe."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4125,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"id": 1389,
								"typeArguments": [
									{
										"type": "reference",
										"id": 1431,
										"name": "CookiesContentSetting"
									}
								],
								"name": "ContentSetting"
							}
						},
						{
							"id": 1451,
							"name": "fullscreen",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "<i>Deprecated.</i> No longer has any effect. Fullscreen permission is now\nautomatically granted for all sites. Value is always <var>allow</var>."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4186,
									"character": 27
								}
							],
							"type": {
								"type": "reference",
								"id": 1389,
								"typeArguments": [
									{
										"type": "reference",
										"id": 1438,
										"name": "FullscreenContentSetting"
									}
								],
								"name": "ContentSetting"
							}
						},
						{
							"id": 1445,
							"name": "images",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Whether to show images. One of<br><var>allow</var>: Show\nimages,<br><var>block</var>: Don't show images. <br>Default is\n<var>allow</var>.<br>The primary URL is the URL of the top-level frame. The\nsecondary URL is the URL of the image."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4133,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"id": 1389,
								"typeArguments": [
									{
										"type": "reference",
										"id": 1432,
										"name": "ImagesContentSetting"
									}
								],
								"name": "ContentSetting"
							}
						},
						{
							"id": 1446,
							"name": "javascript",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Whether to run JavaScript. One of<br><var>allow</var>: Run\nJavaScript,<br><var>block</var>: Don't run JavaScript. <br>Default is\n<var>allow</var>.<br>The primary URL is the URL of the top-level frame. The\nsecondary URL is not used."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4141,
									"character": 27
								}
							],
							"type": {
								"type": "reference",
								"id": 1389,
								"typeArguments": [
									{
										"type": "reference",
										"id": 1433,
										"name": "JavascriptContentSetting"
									}
								],
								"name": "ContentSetting"
							}
						},
						{
							"id": 1447,
							"name": "location",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Whether to allow Geolocation. One of <br><var>allow</var>: Allow sites to\ntrack your physical location,<br><var>block</var>: Don't allow sites to track\nyour physical location,<br><var>ask</var>: Ask before allowing sites to track\nyour physical location. <br>Default is <var>ask</var>.<br>The primary URL is\nthe URL of the document which requested location data. The secondary URL is\nthe URL of the top-level frame (which may or may not differ from the\nrequesting URL)."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4152,
									"character": 25
								}
							],
							"type": {
								"type": "reference",
								"id": 1389,
								"typeArguments": [
									{
										"type": "reference",
										"id": 1434,
										"name": "LocationContentSetting"
									}
								],
								"name": "ContentSetting"
							}
						},
						{
							"id": 1453,
							"name": "microphone",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Whether to allow sites to access the microphone. One of <br><var>allow</var>:\nAllow sites to access the microphone,<br><var>block</var>: Don't allow sites\nto access the microphone,<br><var>ask</var>: Ask when a site wants to access\nthe microphone. <br>Default is <var>ask</var>.<br>The primary URL is the URL\nof the document which requested microphone access. The secondary URL is not\nused.<br>NOTE: The 'allow' setting is not valid if both patterns are\n'<all_urls>'."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4203,
									"character": 27
								}
							],
							"type": {
								"type": "reference",
								"id": 1389,
								"typeArguments": [
									{
										"type": "reference",
										"id": 1440,
										"name": "MicrophoneContentSetting"
									}
								],
								"name": "ContentSetting"
							}
						},
						{
							"id": 1452,
							"name": "mouselock",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "<i>Deprecated.</i> No longer has any effect. Mouse lock permission is now\nautomatically granted for all sites. Value is always <var>allow</var>."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4192,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 1389,
								"typeArguments": [
									{
										"type": "reference",
										"id": 1439,
										"name": "MouselockContentSetting"
									}
								],
								"name": "ContentSetting"
							}
						},
						{
							"id": 1450,
							"name": "notifications",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Whether to allow sites to show desktop notifications. One\nof<br><var>allow</var>: Allow sites to show desktop\nnotifications,<br><var>block</var>: Don't allow sites to show desktop\nnotifications,<br><var>ask</var>: Ask when a site wants to show desktop\nnotifications. <br>Default is <var>ask</var>.<br>The primary URL is the URL\nof the document which wants to show the notification. The secondary URL is\nnot used."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4180,
									"character": 30
								}
							],
							"type": {
								"type": "reference",
								"id": 1389,
								"typeArguments": [
									{
										"type": "reference",
										"id": 1437,
										"name": "NotificationsContentSetting"
									}
								],
								"name": "ContentSetting"
							}
						},
						{
							"id": 1448,
							"name": "plugins",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Whether to run plugins. One of<br><var>allow</var>: Run plugins\nautomatically,<br><var>block</var>: Don't run plugins\nautomatically,<br><var>detect_important_content</var>: Only run automatically\nthose plugins that are detected as the website's main content.<br>The primary\nURL is the URL of the top-level frame. The secondary URL is not used."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4161,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"id": 1389,
								"typeArguments": [
									{
										"type": "reference",
										"id": 1435,
										"name": "PluginsContentSetting"
									}
								],
								"name": "ContentSetting"
							}
						},
						{
							"id": 1449,
							"name": "popups",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Whether to allow sites to show pop-ups. One of<br><var>allow</var>: Allow\nsites to show pop-ups,<br><var>block</var>: Don't allow sites to show\npop-ups. <br>Default is <var>block</var>.<br>The primary URL is the URL of\nthe top-level frame. The secondary URL is not used."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4169,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"id": 1389,
								"typeArguments": [
									{
										"type": "reference",
										"id": 1436,
										"name": "PopupsContentSetting"
									}
								],
								"name": "ContentSetting"
							}
						},
						{
							"id": 1455,
							"name": "unsandboxedPlugins",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Whether to allow sites to run plugins unsandboxed. One of\n<br><var>allow</var>: Allow sites to run plugins\nunsandboxed,<br><var>block</var>: Don't allow sites to run plugins\nunsandboxed,<br><var>ask</var>: Ask when a site wants to run a plugin\nunsandboxed. <br>Default is <var>ask</var>.<br>The primary URL is the URL of\nthe top-level frame. The secondary URL is not used."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4224,
									"character": 35
								}
							],
							"type": {
								"type": "reference",
								"id": 1389,
								"typeArguments": [
									{
										"type": "reference",
										"id": 1442,
										"name": "PpapiBrokerContentSetting"
									}
								],
								"name": "ContentSetting"
							}
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1389,
								1385
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								1441,
								1431,
								1438,
								1432,
								1433,
								1434,
								1440,
								1439,
								1443,
								1437,
								1435,
								1436,
								1442,
								1388
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								1456,
								1454,
								1444,
								1451,
								1445,
								1446,
								1447,
								1453,
								1452,
								1450,
								1448,
								1449,
								1455
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 3951,
							"character": 34
						}
					]
				},
				{
					"id": 1457,
					"name": "contextMenus",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.contextMenus</code> API to add items to Google Chrome's\ncontext menu. You can choose what types of objects your context menu\nadditions apply to, such as images, hyperlinks, and pages.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "contextMenus"
							},
							{
								"tag": "chrome-permission",
								"text": "contextMenus\n"
							}
						]
					},
					"children": [
						{
							"id": 1513,
							"name": "ContextType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The different contexts a menu can appear in. Specifying 'all' is equivalent\nto the combination of all other contexts except for 'launcher'. The\n'launcher' context is only supported by apps and is used to add menu items to\nthe context menu that appears when clicking the app icon in the\nlauncher/taskbar/dock/etc. Different platforms might put limitations on what\nis actually supported in a launcher context menu."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4257,
									"character": 27
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "all"
									},
									{
										"type": "literal",
										"value": "page"
									},
									{
										"type": "literal",
										"value": "frame"
									},
									{
										"type": "literal",
										"value": "selection"
									},
									{
										"type": "literal",
										"value": "link"
									},
									{
										"type": "literal",
										"value": "editable"
									},
									{
										"type": "literal",
										"value": "image"
									},
									{
										"type": "literal",
										"value": "video"
									},
									{
										"type": "literal",
										"value": "audio"
									},
									{
										"type": "literal",
										"value": "launcher"
									},
									{
										"type": "literal",
										"value": "browser_action"
									},
									{
										"type": "literal",
										"value": "page_action"
									},
									{
										"type": "literal",
										"value": "action"
									}
								]
							}
						},
						{
							"id": 1514,
							"name": "ItemType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The type of menu item."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4262,
									"character": 24
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "normal"
									},
									{
										"type": "literal",
										"value": "checkbox"
									},
									{
										"type": "literal",
										"value": "radio"
									},
									{
										"type": "literal",
										"value": "separator"
									}
								]
							}
						},
						{
							"id": 1515,
							"name": "ACTION_MENU_TOP_LEVEL_LIMIT",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "The maximum number of top level extension items that can be added to an\nextension action context menu. Any items beyond this limit will be ignored."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4268,
									"character": 44
								}
							],
							"type": {
								"type": "literal",
								"value": 6
							}
						},
						{
							"id": 1516,
							"name": "onClicked",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4424,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 1517,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 4424,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 1518,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 1458,
							"name": "create",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4279,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 1459,
									"name": "create",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a new context menu item. If an error occurs during creation, it may\nnot be detected until the creation callback fires; details will be in {@link\nruntime.lastError}.",
										"returns": "The ID of the newly created item.\n"
									},
									"parameters": [
										{
											"id": 1460,
											"name": "createProperties",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1461,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1465,
															"name": "checked",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The initial state of a checkbox or radio button: <code>true</code> for\nselected, <code>false</code> for unselected. Only one radio button can be\nselected at a time in a given group."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4307,
																	"character": 15
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 1466,
															"name": "contexts",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "List of contexts this menu item will appear in. Defaults to\n<code>['page']</code>."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4313,
																	"character": 16
																}
															],
															"type": {
																"type": "intersection",
																"types": [
																	{
																		"type": "tuple",
																		"elements": [
																			{
																				"type": "reference",
																				"id": 1513,
																				"name": "ContextType"
																			}
																		]
																	},
																	{
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 1513,
																			"name": "ContextType"
																		}
																	}
																]
															}
														},
														{
															"id": 1474,
															"name": "documentUrlPatterns",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Restricts the item to apply only to documents or frames whose URL matches one\nof the given patterns. For details on pattern formats, see <a\nhref='match_patterns'>Match Patterns</a>."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4344,
																	"character": 27
																}
															],
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														},
														{
															"id": 1476,
															"name": "enabled",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether this context menu item is enabled or disabled. Defaults to\n<code>true</code>."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4358,
																	"character": 15
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 1463,
															"name": "id",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The unique ID to assign to this item. Mandatory for event pages. Cannot be\nthe same as another ID for this extension."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4290,
																	"character": 10
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 1468,
															"name": "onclick",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "A function that is called back when the menu item is clicked. Event pages\ncannot use this; instead, they should register a listener for {@link\ncontextMenus.onClicked}.",
																"tags": [
																	{
																		"tag": "param",
																		"text": "Information about the item clicked and the context where the click happened.",
																		"param": "onclick.info"
																	},
																	{
																		"tag": "param",
																		"text": "The details of the tab where the click took place. This parameter is not present for platform apps.\n",
																		"param": "onclick.tab"
																	}
																]
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4328,
																	"character": 15
																}
															],
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 1469,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 4328,
																			"character": 17
																		}
																	],
																	"signatures": [
																		{
																			"id": 1470,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 1471,
																					"name": "info",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "intrinsic",
																						"name": "object"
																					}
																				},
																				{
																					"id": 1472,
																					"name": "tab",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"id": 5892,
																						"name": "tabs.Tab"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														},
														{
															"id": 1473,
															"name": "parentId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The ID of a parent menu item; this makes the item a child of a previously\nadded item."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4337,
																	"character": 16
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "number"
																	},
																	{
																		"type": "intrinsic",
																		"name": "string"
																	}
																]
															}
														},
														{
															"id": 1475,
															"name": "targetUrlPatterns",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Similar to <code>documentUrlPatterns</code>, filters based on the\n<code>src</code> attribute of <code>img</code>, <code>audio</code>, and\n<code>video</code> tags and the <code>href</code> attribute of <code>a</code>\ntags."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4352,
																	"character": 25
																}
															],
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														},
														{
															"id": 1464,
															"name": "title",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The text to display in the item; this is <em>required</em> unless\n<code>type</code> is <code>separator</code>. When the context is\n<code>selection</code>, use <code>%s</code> within the string to show the\nselected text. For example, if this parameter's value is \"Translate '%s' to\nPig Latin\" and the user selects the word \"cool\", the context menu item for\nthe selection is \"Translate 'cool' to Pig Latin\"."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4300,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 1462,
															"name": "type",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The type of menu item. Defaults to <code>normal</code>."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4284,
																	"character": 12
																}
															],
															"type": {
																"type": "reference",
																"id": 1514,
																"name": "ItemType"
															}
														},
														{
															"id": 1467,
															"name": "visible",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether the item is visible in the menu."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4318,
																	"character": 15
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1465,
																1466,
																1474,
																1476,
																1463,
																1468,
																1473,
																1475,
																1464,
																1462,
																1467
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 4280,
															"character": 23
														}
													]
												}
											}
										},
										{
											"id": 1477,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called when the item has been created in the browser. If an error occurs during creation, details will be available in {@link runtime.lastError}."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1478,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 4360,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1479,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							]
						},
						{
							"id": 1502,
							"name": "remove",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4410,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 1503,
									"name": "remove",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Removes a context menu item."
									},
									"parameters": [
										{
											"id": 1504,
											"name": "menuItemId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ID of the context menu item to remove."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 1505,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called when the context menu has been removed.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1506,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 4412,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1507,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1508,
							"name": "removeAll",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4420,
									"character": 29
								}
							],
							"signatures": [
								{
									"id": 1509,
									"name": "removeAll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Removes all context menu items added by this extension."
									},
									"parameters": [
										{
											"id": 1510,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called when removal is complete.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1511,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 4421,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1512,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1480,
							"name": "update",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4370,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 1481,
									"name": "update",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Updates a previously created context menu item."
									},
									"parameters": [
										{
											"id": 1482,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ID of the item to update."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 1483,
											"name": "updateProperties",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The properties to update. Accepts the same values as the {@link contextMenus.create} function."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1484,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1487,
															"name": "checked",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4375,
																	"character": 15
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 1488,
															"name": "contexts",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4376,
																	"character": 16
																}
															],
															"type": {
																"type": "intersection",
																"types": [
																	{
																		"type": "tuple",
																		"elements": [
																			{
																				"type": "reference",
																				"id": 1513,
																				"name": "ContextType"
																			}
																		]
																	},
																	{
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 1513,
																			"name": "ContextType"
																		}
																	}
																]
															}
														},
														{
															"id": 1496,
															"name": "documentUrlPatterns",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4397,
																	"character": 27
																}
															],
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														},
														{
															"id": 1498,
															"name": "enabled",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4399,
																	"character": 15
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 1490,
															"name": "onclick",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"tags": [
																	{
																		"tag": "param",
																		"text": "",
																		"param": "onclick.info"
																	},
																	{
																		"tag": "param",
																		"text": "The details of the tab where the click took place. This parameter is not present for platform apps.\n",
																		"param": "onclick.tab"
																	}
																]
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4387,
																	"character": 15
																}
															],
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 1491,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 4387,
																			"character": 17
																		}
																	],
																	"signatures": [
																		{
																			"id": 1492,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 1493,
																					"name": "info",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "intrinsic",
																						"name": "object"
																					}
																				},
																				{
																					"id": 1494,
																					"name": "tab",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"id": 5892,
																						"name": "tabs.Tab"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														},
														{
															"id": 1495,
															"name": "parentId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The ID of the item to be made this item's parent. Note: You cannot set an\nitem to become a child of its own descendant."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4396,
																	"character": 16
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "number"
																	},
																	{
																		"type": "intrinsic",
																		"name": "string"
																	}
																]
															}
														},
														{
															"id": 1497,
															"name": "targetUrlPatterns",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4398,
																	"character": 25
																}
															],
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														},
														{
															"id": 1486,
															"name": "title",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4374,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 1485,
															"name": "type",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4373,
																	"character": 12
																}
															],
															"type": {
																"type": "reference",
																"id": 1514,
																"name": "ItemType"
															}
														},
														{
															"id": 1489,
															"name": "visible",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether the item is visible in the menu."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4381,
																	"character": 15
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1487,
																1488,
																1496,
																1498,
																1490,
																1495,
																1497,
																1486,
																1485,
																1489
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 4372,
															"character": 23
														}
													]
												}
											}
										},
										{
											"id": 1499,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called when the context menu has been updated.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1500,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 4401,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1501,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								1513,
								1514
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								1515,
								1516
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								1458,
								1502,
								1508,
								1480
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 4248,
							"character": 31
						}
					]
				},
				{
					"id": 1519,
					"name": "cookies",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.cookies</code> API to query and modify cookies, and to\nbe notified when they change.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "cookies"
							},
							{
								"tag": "chrome-permission",
								"text": "cookies\n"
							}
						]
					},
					"children": [
						{
							"id": 1578,
							"name": "Cookie",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Represents information about an HTTP cookie."
							},
							"children": [
								{
									"id": 1581,
									"name": "domain",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The domain of the cookie (e.g. \"www.google.com\", \"example.com\")."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 4465,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1588,
									"name": "expirationDate",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The expiration date of the cookie as the number of seconds since the UNIX\nepoch. Not provided for session cookies."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 4506,
											"character": 20
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1582,
									"name": "hostOnly",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "True if the cookie is a host-only cookie (i.e. a request's host must exactly\nmatch the domain of the cookie)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 4471,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1585,
									"name": "httpOnly",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "True if the cookie is marked as HttpOnly (i.e. the cookie is inaccessible to\nclient-side scripts)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 4488,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1579,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The name of the cookie."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 4455,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1583,
									"name": "path",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The path of the cookie."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 4476,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1586,
									"name": "sameSite",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The cookie's same-site status (i.e. whether the cookie is sent with\ncross-site requests)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 4494,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"id": 1577,
										"name": "SameSiteStatus"
									}
								},
								{
									"id": 1584,
									"name": "secure",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "True if the cookie is marked as Secure (i.e. its scope is limited to secure\nchannels, typically HTTPS)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 4482,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1587,
									"name": "session",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "True if the cookie is a session cookie, as opposed to a persistent cookie\nwith an expiration date."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 4500,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1589,
									"name": "storeId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The ID of the cookie store containing this cookie, as provided in\ngetAllCookieStores()."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 4512,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1580,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The value of the cookie."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 4460,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1581,
										1588,
										1582,
										1585,
										1579,
										1583,
										1586,
										1584,
										1587,
										1589,
										1580
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4451,
									"character": 27
								}
							]
						},
						{
							"id": 1594,
							"name": "CookieDetails",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Details to identify the cookie."
							},
							"children": [
								{
									"id": 1596,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The name of the cookie to access."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 4558,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1597,
									"name": "storeId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The ID of the cookie store in which to look for the cookie. By default, the\ncurrent execution context's cookie store will be used."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 4564,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1595,
									"name": "url",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The URL with which the cookie to access is associated. This argument may be a\nfull URL, in which case any data following the URL path (e.g. the query\nstring) is simply ignored. If host permissions for this URL are not specified\nin the manifest file, the API call will fail."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 4553,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1596,
										1597,
										1595
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4546,
									"character": 34
								}
							]
						},
						{
							"id": 1590,
							"name": "CookieStore",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Represents a cookie store in the browser. An incognito mode window, for\ninstance, uses a separate cookie store from a non-incognito window."
							},
							"children": [
								{
									"id": 1591,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The unique identifier for the cookie store."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 4523,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1592,
									"name": "tabIds",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Identifiers of all the browser tabs that share this cookie store."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 4528,
											"character": 12
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1591,
										1592
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4519,
									"character": 32
								}
							]
						},
						{
							"id": 1593,
							"name": "OnChangedCause",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The underlying reason behind the cookie's change. If a cookie was inserted,\nor removed via an explicit call to \"chrome.cookies.remove\", \"cause\" will be\n\"explicit\". If a cookie was automatically removed due to expiry, \"cause\" will\nbe \"expired\". If a cookie was removed due to being overwritten with an\nalready-expired expiration date, \"cause\" will be set to \"expired_overwrite\".\nIf a cookie was automatically removed due to garbage collection, \"cause\" will\nbe \"evicted\".  If a cookie was automatically removed due to a \"set\" call that\noverwrote it, \"cause\" will be \"overwrite\". Plan your response accordingly."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4541,
									"character": 30
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "evicted"
									},
									{
										"type": "literal",
										"value": "expired"
									},
									{
										"type": "literal",
										"value": "explicit"
									},
									{
										"type": "literal",
										"value": "expired_overwrite"
									},
									{
										"type": "literal",
										"value": "overwrite"
									}
								]
							}
						},
						{
							"id": 1577,
							"name": "SameSiteStatus",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "A cookie's 'SameSite' state\n(https://tools.ietf.org/html/draft-west-first-party-cookies).\n'no_restriction' corresponds to a cookie set with 'SameSite=None', 'lax' to\n'SameSite=Lax', and 'strict' to 'SameSite=Strict'. 'unspecified' corresponds\nto a cookie set without the SameSite attribute."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4446,
									"character": 30
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "no_restriction"
									},
									{
										"type": "literal",
										"value": "lax"
									},
									{
										"type": "literal",
										"value": "strict"
									},
									{
										"type": "literal",
										"value": "unspecified"
									}
								]
							}
						},
						{
							"id": 1598,
							"name": "onChanged",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a cookie is set or removed. As a special case, note that updating\na cookie's properties is implemented as a two step process: the cookie to be\nupdated is first removed entirely, generating a notification with \"cause\" of\n\"overwrite\" .  Afterwards, a new cookie is written with the updated values,\ngenerating a second notification with \"cause\" \"explicit\"."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4758,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 1599,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 4758,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 1600,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 1601,
															"name": "changeInfo",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 1602,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 1605,
																			"name": "cause",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The underlying reason behind the cookie's change."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 4777,
																					"character": 15
																				}
																			],
																			"type": {
																				"type": "reference",
																				"id": 1593,
																				"name": "OnChangedCause"
																			}
																		},
																		{
																			"id": 1604,
																			"name": "cookie",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "Information about the cookie that was set or removed."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 4772,
																					"character": 16
																				}
																			],
																			"type": {
																				"type": "reference",
																				"id": 1578,
																				"name": "Cookie"
																			}
																		},
																		{
																			"id": 1603,
																			"name": "removed",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "True if a cookie was removed."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 4767,
																					"character": 17
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "boolean"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				1605,
																				1604,
																				1603
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 4763,
																			"character": 19
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 1520,
							"name": "get",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4577,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 1521,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieves information about a single cookie. If more than one cookie of the\nsame name exists for the given URL, the one with the longest path will be\nreturned. For cookies with the same path length, the cookie with the earliest\ncreation time will be returned."
									},
									"parameters": [
										{
											"id": 1522,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 1594,
												"name": "CookieDetails"
											}
										},
										{
											"id": 1523,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1524,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 4579,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 1525,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1526,
																	"name": "cookie",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"text": "Contains details about the cookie. This parameter is null if no such cookie was found.\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 1578,
																		"name": "Cookie"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1527,
							"name": "getAll",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4594,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 1528,
									"name": "getAll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieves all cookies from a single cookie store that match the given\ninformation.  The cookies returned will be sorted, with those with the\nlongest path first.  If multiple cookies have the same path length, those\nwith the earliest creation time will be first."
									},
									"parameters": [
										{
											"id": 1529,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Information to filter the cookies being retrieved."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1530,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1533,
															"name": "domain",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Restricts the retrieved cookies to those whose domains match or are\nsubdomains of this one."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4610,
																	"character": 14
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 1532,
															"name": "name",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Filters the cookies by name."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4604,
																	"character": 12
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 1534,
															"name": "path",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Restricts the retrieved cookies to those whose path exactly matches this\nstring."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4616,
																	"character": 12
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 1535,
															"name": "secure",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Filters the cookies by their Secure property."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4621,
																	"character": 14
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 1536,
															"name": "session",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Filters out session vs. persistent cookies."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4626,
																	"character": 15
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 1537,
															"name": "storeId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The cookie store to retrieve cookies from. If omitted, the current execution\ncontext's cookie store will be used."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4632,
																	"character": 15
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 1531,
															"name": "url",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Restricts the retrieved cookies to those that would match the given URL."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4599,
																	"character": 11
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1533,
																1532,
																1534,
																1535,
																1536,
																1537,
																1531
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 4595,
															"character": 14
														}
													]
												}
											}
										},
										{
											"id": 1538,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1539,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 4634,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 1540,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1541,
																	"name": "cookies",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "All the existing, unexpired cookies that match the given cookie info.\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 1578,
																			"name": "Cookie"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1571,
							"name": "getAllCookieStores",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4745,
									"character": 38
								}
							],
							"signatures": [
								{
									"id": 1572,
									"name": "getAllCookieStores",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Lists all existing cookie stores."
									},
									"parameters": [
										{
											"id": 1573,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1574,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 4746,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 1575,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1576,
																	"name": "cookieStores",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "All the existing cookie stores.\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 1590,
																			"name": "CookieStore"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1560,
							"name": "remove",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4717,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 1561,
									"name": "remove",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deletes a cookie by name."
									},
									"parameters": [
										{
											"id": 1562,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 1594,
												"name": "CookieDetails"
											}
										},
										{
											"id": 1563,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1564,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 4719,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1565,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1566,
																	"name": "details",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"text": "Contains details about the cookie that's been removed.  If removal failed for any reason, this will be \"null\", and {@link runtime.lastError} will be set.\n"
																	},
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 1567,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 1569,
																					"name": "name",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"comment": {
																						"shortText": "The name of the cookie that's been removed."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 4729,
																							"character": 14
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "string"
																					}
																				},
																				{
																					"id": 1570,
																					"name": "storeId",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"comment": {
																						"shortText": "The ID of the cookie store from which the cookie was removed."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 4734,
																							"character": 17
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "string"
																					}
																				},
																				{
																					"id": 1568,
																					"name": "url",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"comment": {
																						"shortText": "The URL associated with the cookie that's been removed."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 4724,
																							"character": 13
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "string"
																					}
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						1569,
																						1570,
																						1568
																					]
																				}
																			],
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 4720,
																					"character": 17
																				}
																			]
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1542,
							"name": "set",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4647,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 1543,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets a cookie with the given cookie data; may overwrite equivalent cookies if\nthey exist."
									},
									"parameters": [
										{
											"id": 1544,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Details about the cookie being set."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1545,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1549,
															"name": "domain",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The domain of the cookie. If omitted, the cookie becomes a host-only cookie."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4670,
																	"character": 14
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 1554,
															"name": "expirationDate",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The expiration date of the cookie as the number of seconds since the UNIX\nepoch. If omitted, the cookie becomes a session cookie."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4697,
																	"character": 22
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1552,
															"name": "httpOnly",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether the cookie should be marked as HttpOnly. Defaults to false."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4685,
																	"character": 16
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 1547,
															"name": "name",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The name of the cookie. Empty by default if omitted."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4660,
																	"character": 12
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 1550,
															"name": "path",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The path of the cookie. Defaults to the path portion of the url parameter."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4675,
																	"character": 12
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 1553,
															"name": "sameSite",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The cookie's same-site status. Defaults to \"unspecified\", i.e., if omitted,\nthe cookie is set without specifying a SameSite attribute."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4691,
																	"character": 16
																}
															],
															"type": {
																"type": "reference",
																"id": 1577,
																"name": "SameSiteStatus"
															}
														},
														{
															"id": 1551,
															"name": "secure",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether the cookie should be marked as Secure. Defaults to false."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4680,
																	"character": 14
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 1555,
															"name": "storeId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The ID of the cookie store in which to set the cookie. By default, the cookie\nis set in the current execution context's cookie store."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4703,
																	"character": 15
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 1546,
															"name": "url",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "The request-URI to associate with the setting of the cookie. This value can\naffect the default domain and path values of the created cookie. If host\npermissions for this URL are not specified in the manifest file, the API call\nwill fail."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4655,
																	"character": 11
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 1548,
															"name": "value",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The value of the cookie. Empty by default if omitted."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 4665,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1549,
																1554,
																1552,
																1547,
																1550,
																1553,
																1551,
																1555,
																1546,
																1548
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 4648,
															"character": 14
														}
													]
												}
											}
										},
										{
											"id": 1556,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1557,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 4705,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1558,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1559,
																	"name": "cookie",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"text": "Contains details about the cookie that's been set.  If setting failed for any reason, this will be \"null\", and {@link runtime.lastError} will be set.\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 1578,
																		"name": "Cookie"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1578,
								1594,
								1590
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								1593,
								1577
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								1598
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								1520,
								1527,
								1571,
								1560,
								1542
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 4438,
							"character": 26
						}
					]
				},
				{
					"id": 1606,
					"name": "debugger",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "The <code>chrome.debugger</code> API serves as an alternate transport for\nChrome's <a\nhref='https://developer.chrome.com/devtools/docs/debugger-protocol'>remote\ndebugging protocol</a>. Use <code>chrome.debugger</code> to attach to one or\nmore tabs to instrument network interaction, debug JavaScript, mutate the DOM\nand CSS, etc. Use the Debuggee <code>tabId</code> to target tabs with\nsendCommand and route events by <code>tabId</code> from onEvent callbacks.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "debugger"
							},
							{
								"tag": "chrome-permission",
								"text": "debugger\n"
							}
						]
					},
					"children": [
						{
							"id": 1641,
							"name": "Debuggee",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Debuggee identifier. Either tabId or extensionId must be specified"
							},
							"children": [
								{
									"id": 1643,
									"name": "extensionId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The id of the extension which you intend to debug. Attaching to an extension\nbackground page is only possible when 'silent-debugger-extension-api' flag is\nenabled on the target browser."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 4812,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1642,
									"name": "tabId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The id of the tab which you intend to debug."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 4805,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1644,
									"name": "targetId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The opaque id of the debug target."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 4817,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1643,
										1642,
										1644
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4801,
									"character": 29
								}
							]
						},
						{
							"id": 1647,
							"name": "TargetInfo",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Debug target information"
							},
							"children": [
								{
									"id": 1652,
									"name": "attached",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "True if debugger is already attached."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 4857,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1651,
									"name": "extensionId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The extension id, defined if type = 'background_page'."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 4852,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1655,
									"name": "faviconUrl",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Target favicon URL."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 4872,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1649,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Target id."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 4842,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1650,
									"name": "tabId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The tab id, defined if type == 'page'."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 4847,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1653,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Target page title."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 4862,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1648,
									"name": "type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Target type."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 4837,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 1645,
										"name": "TargetInfoType"
									}
								},
								{
									"id": 1654,
									"name": "url",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Target URL."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 4867,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1652,
										1651,
										1655,
										1649,
										1650,
										1653,
										1648,
										1654
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4833,
									"character": 31
								}
							]
						},
						{
							"id": 1646,
							"name": "DetachReason",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "Connection termination reason."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4828,
									"character": 28
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "target_closed"
									},
									{
										"type": "literal",
										"value": "canceled_by_user"
									}
								]
							}
						},
						{
							"id": 1645,
							"name": "TargetInfoType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "Target type."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4823,
									"character": 30
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "page"
									},
									{
										"type": "literal",
										"value": "background_page"
									},
									{
										"type": "literal",
										"value": "worker"
									},
									{
										"type": "literal",
										"value": "other"
									}
								]
							}
						},
						{
							"id": 1665,
							"name": "onDetach",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when browser terminates debugging session for the tab. This happens\nwhen either the tab is being closed or Chrome DevTools is being invoked for\nthe attached tab."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4950,
									"character": 25
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 1666,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 4950,
													"character": 47
												}
											],
											"signatures": [
												{
													"id": 1667,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 1668,
															"name": "source",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "The debuggee that was detached."
															},
															"type": {
																"type": "reference",
																"id": 1641,
																"name": "Debuggee"
															}
														},
														{
															"id": 1669,
															"name": "reason",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Connection termination reason.\n"
															},
															"type": {
																"type": "reference",
																"id": 1646,
																"name": "DetachReason"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 1656,
							"name": "onEvent",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired whenever debugging target issues instrumentation event."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4932,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 1657,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 4932,
													"character": 46
												}
											],
											"signatures": [
												{
													"id": 1658,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 1659,
															"name": "source",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "The debuggee that generated this event."
															},
															"type": {
																"type": "reference",
																"id": 1641,
																"name": "Debuggee"
															}
														},
														{
															"id": 1660,
															"name": "method",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Method name. Should be one of the notifications defined by the <a href='https://developer.chrome.com/devtools/docs/debugger-protocol'>remote debugging protocol</a>."
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 1661,
															"name": "params",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "JSON object with the parameters. Structure of the parameters varies depending on the method name and is defined by the 'parameters' attribute of the event description in the remote debugging protocol.\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 1662,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 4941,
																			"character": 16
																		}
																	],
																	"indexSignature": {
																		"id": 1663,
																		"name": "__index",
																		"kind": 8192,
																		"kindString": "Index signature",
																		"flags": {},
																		"parameters": [
																			{
																				"id": 1664,
																				"name": "name",
																				"kind": 32768,
																				"flags": {},
																				"type": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			}
																		],
																		"type": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 1607,
							"name": "attach",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4882,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 1608,
									"name": "attach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Attaches debugger to the given target."
									},
									"parameters": [
										{
											"id": 1609,
											"name": "target",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Debugging target to which you want to attach."
											},
											"type": {
												"type": "reference",
												"id": 1641,
												"name": "Debuggee"
											}
										},
										{
											"id": 1610,
											"name": "requiredVersion",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Required debugging protocol version (\"0.1\"). One can only attach to the debuggee with matching major version and greater or equal minor version. List of the protocol versions can be obtained <a href='https://developer.chrome.com/devtools/docs/debugger-protocol'>here</a>."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1611,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called once the attach operation succeeds or fails. Callback receives no arguments. If the attach fails, {@link runtime.lastError} will be set to the error message.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1612,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 4885,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1613,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1614,
							"name": "detach",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4894,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 1615,
									"name": "detach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Detaches debugger from the given target."
									},
									"parameters": [
										{
											"id": 1616,
											"name": "target",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Debugging target from which you want to detach."
											},
											"type": {
												"type": "reference",
												"id": 1641,
												"name": "Debuggee"
											}
										},
										{
											"id": 1617,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called once the detach operation succeeds or fails. Callback receives no arguments. If the detach fails, {@link runtime.lastError} will be set to the error message.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1618,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 4896,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1619,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1635,
							"name": "getTargets",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4923,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 1636,
									"name": "getTargets",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the list of available debug targets."
									},
									"parameters": [
										{
											"id": 1637,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1638,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 4924,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 1639,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1640,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "Array of TargetInfo objects corresponding to the available debug targets.\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 1647,
																			"name": "TargetInfo"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1620,
							"name": "sendCommand",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4908,
									"character": 31
								}
							],
							"signatures": [
								{
									"id": 1621,
									"name": "sendCommand",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sends given command to the debugging target."
									},
									"parameters": [
										{
											"id": 1622,
											"name": "target",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Debugging target to which you want to send the command."
											},
											"type": {
												"type": "reference",
												"id": 1641,
												"name": "Debuggee"
											}
										},
										{
											"id": 1623,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Method name. Should be one of the methods defined by the <a href='https://developer.chrome.com/devtools/docs/debugger-protocol'>remote debugging protocol</a>."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1624,
											"name": "commandParams",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "JSON object with request parameters. This object must conform to the remote debugging params scheme for given method."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1625,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 4911,
															"character": 21
														}
													],
													"indexSignature": {
														"id": 1626,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 1627,
																"name": "name",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										},
										{
											"id": 1628,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Response body. If an error occurs while posting the message, the callback will be called with no arguments and {@link runtime.lastError} will be set to the error message."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1629,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 4912,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1630,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1631,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"text": "JSON object with the response. Structure of the response varies depending on the method name and is defined by the 'returns' attribute of the command description in the remote debugging protocol.\n"
																	},
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 1632,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 4913,
																					"character": 16
																				}
																			],
																			"indexSignature": {
																				"id": 1633,
																				"name": "__index",
																				"kind": 8192,
																				"kindString": "Index signature",
																				"flags": {},
																				"parameters": [
																					{
																						"id": 1634,
																						"name": "name",
																						"kind": 32768,
																						"flags": {},
																						"type": {
																							"type": "intrinsic",
																							"name": "string"
																						}
																					}
																				],
																				"type": {
																					"type": "intrinsic",
																					"name": "any"
																				}
																			}
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1641,
								1647
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								1646,
								1645
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								1665,
								1656
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								1607,
								1614,
								1635,
								1620
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 4797,
							"character": 21
						}
					]
				},
				{
					"id": 1670,
					"name": "declarativeContent",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.declarativeContent</code> API to take actions depending\non the content of a page, without requiring permission to read the page's\ncontent.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "declarativeContent"
							},
							{
								"tag": "chrome-permission",
								"text": "declarativeContent\n"
							}
						]
					},
					"children": [
						{
							"id": 1676,
							"name": "PageStateMatcher",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Matches the state of a web page based on various criteria."
							},
							"children": [
								{
									"id": 1678,
									"name": "css",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if all of the CSS selectors in the array match displayed elements in\na frame with the same origin as the page's main frame. All selectors in this\narray must be <a href=\"http://www.w3.org/TR/selectors4/#compound\">compound\nselectors</a> to speed up matching. Note: Listing hundreds of CSS selectors\nor listing CSS selectors that match hundreds of times per page can slow down\nweb sites."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5007,
											"character": 9
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 1679,
									"name": "isBookmarked",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if the bookmarked state of the page is equal to the specified value.\nRequres the <a href='declare_permissions'>bookmarks permission</a>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5013,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1677,
									"name": "pageUrl",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if the conditions of the <code>UrlFilter</code> are fulfilled for the\ntop-level URL of the page."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 4997,
											"character": 13
										}
									],
									"type": {
										"type": "reference",
										"id": 2583,
										"name": "UrlFilter"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1678,
										1679,
										1677
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4992,
									"character": 37
								}
							]
						},
						{
							"id": 1686,
							"name": "RequestContentScript",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Declarative event action that injects a content script. <p><b>WARNING:</b>\nThis action is still experimental and is not supported on stable builds of\nChrome.</p>"
							},
							"children": [
								{
									"id": 1689,
									"name": "allFrames",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Whether the content script runs in all frames of the matching page, or in\nonly the top frame. Default is <code>false</code>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5073,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1687,
									"name": "css",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Names of CSS files to be injected as a part of the content script."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5062,
											"character": 9
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 1688,
									"name": "js",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Names of JavaScript files to be injected as a part of the content script."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5067,
											"character": 8
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 1690,
									"name": "matchAboutBlank",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Whether to insert the content script on <code>about:blank</code> and\n<code>about:srcdoc</code>. Default is <code>false</code>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5079,
											"character": 21
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1689,
										1687,
										1688,
										1690
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5058,
									"character": 41
								}
							]
						},
						{
							"id": 1681,
							"name": "SetIcon",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Declarative event action that sets the n-<abbr title=\"device-independent\npixel\">dip</abbr> square icon for the extension's {@link pageAction page\naction} or {@link browserAction browser action} while the corresponding\nconditions are met. This action can be used without <a\nhref=\"declare_permissions.html#host-permissions\">host permissions</a>, but\nthe extension must have a page or browser action.<p>Exactly one of\n<code>imageData</code> or <code>path</code> must be specified. Both are\ndictionaries mapping a number of pixels to an image representation. The image\nrepresentation in <code>imageData</code> is an <a\nhref=\"https://developer.mozilla.org/en-US/docs/Web/API/ImageData\">ImageData</a> object; for example, from a <code>canvas</code> element, while the image representation in <code>path</code> is the path to an image file relative to the extension's manifest. If <code>scale</code> screen pixels fit into a device-independent pixel, the <code>scale * n</code> icon is used. If that scale is missing, another image is resized to the required size.</p>"
							},
							"children": [
								{
									"id": 1682,
									"name": "imageData",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Either an <code>ImageData</code> object or a dictionary {size -> ImageData}\nrepresenting an icon to be set. If the icon is specified as a dictionary, the\nimage used is chosen depending on the screen's pixel density. If the number\nof image pixels that fit into one screen space unit equals\n<code>scale</code>, then an image with size <code>scale * n</code> is\nselected, where <i>n</i> is the size of the icon in the UI. At least one\nimage must be specified. Note that <code>details.imageData = foo</code> is\nequivalent to <code>details.imageData = {'16': foo}</code>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5050,
											"character": 15
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ArrayBuffer"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 1683,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 1684,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 1685,
																"name": "name",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										]
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1682
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5039,
									"character": 28
								}
							]
						},
						{
							"id": 1680,
							"name": "ShowPageAction",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Declarative event action that shows the extension's {@link pageAction page\naction} while the corresponding conditions are met. This action can be used\nwithout <a href=\"declare_permissions#host-permissions\">host permissions</a>,\nbut the extension must have a page action. If the extension has the <a\nhref=\"activeTab.html\">activeTab</a> permission, clicking the page action\ngrants access to the active tab."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5024,
									"character": 35
								}
							]
						},
						{
							"id": 1671,
							"name": "ImageDataType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "See <a\nhref=\"https://developer.mozilla.org/en-US/docs/Web/API/ImageData\">https://developer.mozilla.org/en-US/docs/Web/API/ImageData</a>."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4979,
									"character": 29
								}
							],
							"type": {
								"type": "reference",
								"name": "ArrayBuffer"
							}
						},
						{
							"id": 1672,
							"name": "PageStateMatcherInstanceType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4981,
									"character": 44
								}
							],
							"type": {
								"type": "literal",
								"value": "declarativeContent.PageStateMatcher"
							}
						},
						{
							"id": 1675,
							"name": "RequestContentScriptInstanceType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4987,
									"character": 48
								}
							],
							"type": {
								"type": "literal",
								"value": "declarativeContent.RequestContentScript"
							}
						},
						{
							"id": 1674,
							"name": "SetIconInstanceType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4985,
									"character": 35
								}
							],
							"type": {
								"type": "literal",
								"value": "declarativeContent.SetIcon"
							}
						},
						{
							"id": 1673,
							"name": "ShowPageActionInstanceType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 4983,
									"character": 42
								}
							],
							"type": {
								"type": "literal",
								"value": "declarativeContent.ShowPageAction"
							}
						},
						{
							"id": 1691,
							"name": "onPageChanged",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5082,
									"character": 30
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 1692,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 5082,
													"character": 52
												}
											],
											"signatures": [
												{
													"id": 1693,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1676,
								1686,
								1681,
								1680
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								1671,
								1672,
								1675,
								1674,
								1673
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								1691
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 4974,
							"character": 37
						}
					]
				},
				{
					"id": 1694,
					"name": "declarativeNetRequest",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "The <code>chrome.declarativeNetRequest</code> API is used to block or modify\nnetwork requests by specifying declarative rules. This lets extensions\nmodify network requests without intercepting them and viewing their content,\nthus providing more privacy.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "declarativeNetRequest"
							},
							{
								"tag": "chrome-permission",
								"text": "declarativeNetRequest\n"
							}
						]
					},
					"children": [
						{
							"id": 1855,
							"name": "ExtensionActionOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1856,
									"name": "displayActionCountAsBadgeText",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Whether to automatically display the action count for a page as the\nextension's badge text. This preference is persisted across sessions."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5572,
											"character": 35
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1857,
									"name": "tabUpdate",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Details of how the tab's action count should be adjusted."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5577,
											"character": 15
										}
									],
									"type": {
										"type": "reference",
										"id": 1852,
										"name": "TabActionCountUpdate"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1856,
										1857
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5567,
									"character": 43
								}
							]
						},
						{
							"id": 1843,
							"name": "IsRegexSupportedResult",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1844,
									"name": "isSupported",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5519,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1845,
									"name": "reason",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Specifies the reason why the regular expression is not supported. Only\nprovided if <code>isSupported</code> is false."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5525,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 1766,
										"name": "UnsupportedRegexReason"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1844,
										1845
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5518,
									"character": 43
								}
							]
						},
						{
							"id": 1815,
							"name": "MatchedRule",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1816,
									"name": "ruleId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "A matching rule's ID."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5396,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1817,
									"name": "rulesetId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "ID of the {@link Ruleset} this rule belongs to. For a rule originating from\nthe set of dynamic rules, this will be equal to {@link DYNAMIC_RULESET_ID}."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5402,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1816,
										1817
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5392,
									"character": 32
								}
							]
						},
						{
							"id": 1818,
							"name": "MatchedRuleInfo",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1819,
									"name": "rule",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5406,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 1815,
										"name": "MatchedRule"
									}
								},
								{
									"id": 1821,
									"name": "tabId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The tabId of the tab from which the request originated if the tab is still\nactive. Else -1."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5418,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1820,
									"name": "timeStamp",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The time the rule was matched. Timestamps will correspond to the Javascript\nconvention for times, i.e. number of milliseconds since the epoch."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5412,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1819,
										1821,
										1820
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5405,
									"character": 36
								}
							]
						},
						{
							"id": 1836,
							"name": "MatchedRuleInfoDebug",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1838,
									"name": "request",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Details about the request for which the rule was matched."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5496,
											"character": 13
										}
									],
									"type": {
										"type": "reference",
										"id": 1827,
										"name": "RequestDetails"
									}
								},
								{
									"id": 1837,
									"name": "rule",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5491,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 1815,
										"name": "MatchedRule"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1838,
										1837
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5490,
									"character": 41
								}
							]
						},
						{
							"id": 1822,
							"name": "MatchedRulesFilter",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1824,
									"name": "minTimeStamp",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "If specified, only matches rules after the given timestamp."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5430,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1823,
									"name": "tabId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "If specified, only matches rules for the given tab."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5425,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1824,
										1823
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5421,
									"character": 39
								}
							]
						},
						{
							"id": 1801,
							"name": "ModifyHeaderInfo",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1802,
									"name": "header",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The name of the header to be modified."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5331,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1803,
									"name": "operation",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The operation to be performed on a header."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5336,
											"character": 15
										}
									],
									"type": {
										"type": "reference",
										"id": 1764,
										"name": "HeaderOperation"
									}
								},
								{
									"id": 1804,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The new value for the header. Must be specified for <code>append</code> and\n<code>set</code> operations."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5342,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1802,
										1803,
										1804
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5327,
									"character": 37
								}
							]
						},
						{
							"id": 1771,
							"name": "QueryKeyValue",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1772,
									"name": "key",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5145,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1773,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5147,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1772,
										1773
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5144,
									"character": 34
								}
							]
						},
						{
							"id": 1774,
							"name": "QueryTransform",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1776,
									"name": "addOrReplaceParams",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The list of query key-value pairs to be added or replaced."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5159,
											"character": 24
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1771,
											"name": "QueryKeyValue"
										}
									}
								},
								{
									"id": 1775,
									"name": "removeParams",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The list of query keys to be removed."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5154,
											"character": 18
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1776,
										1775
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5150,
									"character": 35
								}
							]
						},
						{
							"id": 1787,
							"name": "Redirect",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1788,
									"name": "extensionPath",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Path relative to the extension directory. Should start with '/'."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5216,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1791,
									"name": "regexSubstitution",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Substitution pattern for rules which specify a <code>regexFilter</code>. The\nfirst match of <code>regexFilter</code> within the url will be replaced with\nthis pattern. Within <code>regexSubstitution</code>, backslash-escaped digits\n(\\1 to \\9) can be used to insert the corresponding capture groups. \\0 refers\nto the entire matching text."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5235,
											"character": 23
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1789,
									"name": "transform",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Url transformations to perform."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5221,
											"character": 15
										}
									],
									"type": {
										"type": "reference",
										"id": 1777,
										"name": "URLTransform"
									}
								},
								{
									"id": 1790,
									"name": "url",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The redirect url. Redirects to JavaScript urls are not allowed."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5226,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1788,
										1791,
										1789,
										1790
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5212,
									"character": 29
								}
							]
						},
						{
							"id": 1839,
							"name": "RegexOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1841,
									"name": "isCaseSensitive",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Whether the <code>regex</code> specified is case sensitive. Default is true."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5508,
											"character": 21
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1840,
									"name": "regex",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The regular expresson to check."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5503,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1842,
									"name": "requireCapturing",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Whether the <code>regex</code> specified requires capturing. Capturing is\nonly required for redirect rules which specify a <code>regexSubstition</code>\naction. The default is false."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5515,
											"character": 22
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1841,
										1840,
										1842
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5499,
									"character": 33
								}
							]
						},
						{
							"id": 1827,
							"name": "RequestDetails",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1832,
									"name": "frameId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The value 0 indicates that the request happens in the main frame; a positive\nvalue indicates the ID of a subframe in which the request happens. If the\ndocument of a (sub-)frame is loaded (<code>type</code> is\n<code>main_frame</code> or <code>sub_frame</code>), <code>frameId</code>\nindicates the ID of this frame, not the ID of the outer frame. Frame IDs are\nunique within a tab."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5470,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1830,
									"name": "initiator",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The origin where the request was initiated. This does not change through\nredirects. If this is an opaque origin, the string 'null' will be used."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5455,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1831,
									"name": "method",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Standard HTTP method."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5460,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1833,
									"name": "parentFrameId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "ID of frame that wraps the frame which sent the request. Set to -1 if no\nparent frame exists."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5476,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1828,
									"name": "requestId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The ID of the request. Request IDs are unique within a browser session."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5444,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1834,
									"name": "tabId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The ID of the tab in which the request takes place. Set to -1 if the request\nisn't related to a tab."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5482,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1835,
									"name": "type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The resource type of the request."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5487,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 1762,
										"name": "ResourceType"
									}
								},
								{
									"id": 1829,
									"name": "url",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The URL of the request."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5449,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1832,
										1830,
										1831,
										1833,
										1828,
										1834,
										1835,
										1829
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5440,
									"character": 35
								}
							]
						},
						{
							"id": 1810,
							"name": "Rule",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1814,
									"name": "action",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The action to take if this rule is matched."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5389,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 1805,
										"name": "RuleAction"
									}
								},
								{
									"id": 1813,
									"name": "condition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The condition under which this rule is triggered."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5384,
											"character": 15
										}
									],
									"type": {
										"type": "reference",
										"id": 1792,
										"name": "RuleCondition"
									}
								},
								{
									"id": 1811,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "An id which uniquely identifies a rule. Mandatory and should be >= 1."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5374,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1812,
									"name": "priority",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Rule priority. Defaults to 1. When specified, should be >= 1."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5379,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1814,
										1813,
										1811,
										1812
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5370,
									"character": 25
								}
							]
						},
						{
							"id": 1805,
							"name": "RuleAction",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1807,
									"name": "redirect",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Describes how the redirect should be performed. Only valid for redirect\nrules."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5355,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"id": 1787,
										"name": "Redirect"
									}
								},
								{
									"id": 1808,
									"name": "requestHeaders",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The request headers to modify for the request. Only valid if RuleActionType\nis \"modifyHeaders\"."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5361,
											"character": 20
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1801,
											"name": "ModifyHeaderInfo"
										}
									}
								},
								{
									"id": 1809,
									"name": "responseHeaders",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The response headers to modify for the request. Only valid if RuleActionType\nis \"modifyHeaders\"."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5367,
											"character": 21
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1801,
											"name": "ModifyHeaderInfo"
										}
									}
								},
								{
									"id": 1806,
									"name": "type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The type of action to perform."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5349,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 1765,
										"name": "RuleActionType"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1807,
										1808,
										1809,
										1806
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5345,
									"character": 31
								}
							]
						},
						{
							"id": 1792,
							"name": "RuleCondition",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1800,
									"name": "domainType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Specifies whether the network request is first-party or third-party to the\ndomain from which it originated. If omitted, all requests are accepted."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5324,
											"character": 16
										}
									],
									"type": {
										"type": "reference",
										"id": 1763,
										"name": "DomainType"
									}
								},
								{
									"id": 1796,
									"name": "domains",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "<p>The rule will only match network requests originating from the list of\n<code>domains</code>. If the list is omitted, the rule is applied to requests\nfrom all domains. An empty list is not allowed.</p><p>Notes: <ul>\n<li>Sub-domains like \"a.example.com\" are also allowed.</li>  <li>The entries\nmust consist of only ascii characters.</li>  <li>Use punycode encoding for\ninternationalized domains.</li>  <li>    This matches against the request\ninitiator and not the request url.  </li> </ul></p>"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5291,
											"character": 13
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 1797,
									"name": "excludedDomains",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "<p>The rule will not match network requests originating from the list of\n<code>excludedDomains</code>. If the list is empty or omitted, no domains are\nexcluded. This takes precedence over <code>domains</code>.</p><p>Notes: <ul>\n<li>Sub-domains like \"a.example.com\" are also allowed.</li>  <li>The entries\nmust consist of only ascii characters.</li>  <li>Use punycode encoding for\ninternationalized domains.</li>  <li>    This matches against the request\ninitiator and not the request url.  </li> </ul></p>"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5302,
											"character": 21
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 1799,
									"name": "excludedResourceTypes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "List of resource types which the rule won't match. Only one of\n<code>resourceTypes</code> and <code>excludedResourceTypes</code> should be\nspecified. If neither of them is specified, all resource types except\n\"main_frame\" are blocked."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5318,
											"character": 27
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1762,
											"name": "ResourceType"
										}
									}
								},
								{
									"id": 1795,
									"name": "isUrlFilterCaseSensitive",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Whether the <code>urlFilter</code> or <code>regexFilter</code> (whichever is\nspecified) is case sensitive. Default is true."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5280,
											"character": 30
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1794,
									"name": "regexFilter",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "<p>Regular expression to match against the network request url. This follows\nthe <a href = \"https://github.com/google/re2/wiki/Syntax\">RE2\nsyntax</a>.</p><p>Note: Only one of <code>urlFilter</code> or\n<code>regexFilter</code> can be specified.</p><p>Note: The\n<code>regexFilter</code> must be composed of only ASCII characters. This is\nmatched against a url where the host is encoded in the punycode format (in\ncase of internationalized domains) and any other non-ascii characters are url\nencoded in utf-8.</p>"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5274,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1798,
									"name": "resourceTypes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "<p>List of resource types which the rule can match. An empty list is not\nallowed.</p><p>Note: this must be specified for <code>allowAllRequests</code>\nrules and may only include the <code>sub_frame</code> and\n<code>main_frame</code> resource types.</p>"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5310,
											"character": 19
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1762,
											"name": "ResourceType"
										}
									}
								},
								{
									"id": 1793,
									"name": "urlFilter",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "<p>The pattern which is matched against the network request url. Supported\nconstructs:</p><p><b>'*'</b>  : Wildcard: Matches any number of\ncharacters.</p><p><b>'|'</b>  : Left/right anchor: If used at either end of\nthe pattern,               specifies the beginning/end of the url\nrespectively.</p><p><b>'||'</b> : Domain name anchor: If used at the\nbeginning of the pattern,               specifies the start of a (sub-)domain\nof the URL.</p><p><b>'^'</b>  : Separator character: This matches anything\nexcept a letter, a               digit or one of the following: _ - . %. This\ncan also match               the end of the URL.</p><p>Therefore\n<code>urlFilter</code> is composed of the following parts: (optional\nLeft/Domain name anchor) + pattern + (optional Right anchor).</p><p>If\nomitted, all urls are matched. An empty string is not allowed.</p><p>A\npattern beginning with <code>||*</code> is not allowed. Use <code>*</code>\ninstead.</p><p>Note: Only one of <code>urlFilter</code> or\n<code>regexFilter</code> can be specified.</p><p>Note: The\n<code>urlFilter</code> must be composed of only ASCII characters. This is\nmatched against a url where the host is encoded in the punycode format (in\ncase of internationalized domains) and any other non-ascii characters are url\nencoded in utf-8. For example, when the request url is http://abc.рф?q=ф,\nthe <code>urlFilter</code> will be matched against the url\nhttp://abc.xn--p1ai/?q=%D1%84.</p>"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5262,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1800,
										1796,
										1797,
										1799,
										1795,
										1794,
										1798,
										1793
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5238,
									"character": 34
								}
							]
						},
						{
							"id": 1825,
							"name": "RulesMatchedDetails",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1826,
									"name": "rulesMatchedInfo",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Rules matching the given filter."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5437,
											"character": 22
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1818,
											"name": "MatchedRuleInfo"
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1826
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5433,
									"character": 40
								}
							]
						},
						{
							"id": 1767,
							"name": "Ruleset",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1770,
									"name": "enabled",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Whether the ruleset is enabled by default."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5141,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1768,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "A non-empty string uniquely identifying the ruleset. IDs beginning with '_'\nare reserved for internal use."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5131,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1769,
									"name": "path",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The path of the JSON ruleset relative to the extension directory."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5136,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1770,
										1768,
										1769
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5126,
									"character": 28
								}
							]
						},
						{
							"id": 1852,
							"name": "TabActionCountUpdate",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1854,
									"name": "increment",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The amount to increment the tab's action count by. Negative values will\ndecrement the count."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5564,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1853,
									"name": "tabId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The tab for which to update the action count."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5558,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1854,
										1853
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5554,
									"character": 41
								}
							]
						},
						{
							"id": 1777,
							"name": "URLTransform",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1784,
									"name": "fragment",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The new fragment for the request. Should be either empty, in which case the\nexisting fragment is cleared; or should begin with '#'."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5199,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1779,
									"name": "host",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The new host for the request."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5172,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1786,
									"name": "password",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The new password for the request."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5209,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1781,
									"name": "path",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The new path for the request. If empty, the existing path is cleared."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5182,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1780,
									"name": "port",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The new port for the request. If empty, the existing port is cleared."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5177,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1782,
									"name": "query",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The new query for the request. Should be either empty, in which case the\nexisting query is cleared; or should begin with '?'."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5188,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1783,
									"name": "queryTransform",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Add, remove or replace query key-value pairs."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5193,
											"character": 20
										}
									],
									"type": {
										"type": "reference",
										"id": 1774,
										"name": "QueryTransform"
									}
								},
								{
									"id": 1778,
									"name": "scheme",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The new scheme for the request. Allowed values are \"http\", \"https\", \"ftp\" and\n\"chrome-extension\"."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5167,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1785,
									"name": "username",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The new username for the request."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5204,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1784,
										1779,
										1786,
										1781,
										1780,
										1782,
										1783,
										1778,
										1785
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5162,
									"character": 33
								}
							]
						},
						{
							"id": 1846,
							"name": "UpdateRuleOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1848,
									"name": "addRules",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Rules to add."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5537,
											"character": 14
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1810,
											"name": "Rule"
										}
									}
								},
								{
									"id": 1847,
									"name": "removeRuleIds",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "IDs of the rules to remove. Any invalid IDs will be ignored."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5532,
											"character": 19
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1848,
										1847
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5528,
									"character": 38
								}
							]
						},
						{
							"id": 1849,
							"name": "UpdateRulesetOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1850,
									"name": "disableRulesetIds",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The set of ids corresponding to a static {@link Ruleset} that should be\ndisabled."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5545,
											"character": 23
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 1851,
									"name": "enableRulesetIds",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The set of ids corresponding to a static {@link Ruleset} that should be\nenabled."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5551,
											"character": 22
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1850,
										1851
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5540,
									"character": 41
								}
							]
						},
						{
							"id": 1763,
							"name": "DomainType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "This describes whether the request is first or third party to the frame in\nwhich it originated. A request is said to be first party if it has the same\ndomain (eTLD+1) as the frame in which the request originated."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5109,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "firstParty"
									},
									{
										"type": "literal",
										"value": "thirdParty"
									}
								]
							}
						},
						{
							"id": 1764,
							"name": "HeaderOperation",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "This describes the possible operations for a \"modifyHeaders\" rule."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5114,
									"character": 31
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "append"
									},
									{
										"type": "literal",
										"value": "set"
									},
									{
										"type": "literal",
										"value": "remove"
									}
								]
							}
						},
						{
							"id": 1762,
							"name": "ResourceType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "This describes the resource type of the network request."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5102,
									"character": 28
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "main_frame"
									},
									{
										"type": "literal",
										"value": "sub_frame"
									},
									{
										"type": "literal",
										"value": "stylesheet"
									},
									{
										"type": "literal",
										"value": "script"
									},
									{
										"type": "literal",
										"value": "image"
									},
									{
										"type": "literal",
										"value": "font"
									},
									{
										"type": "literal",
										"value": "object"
									},
									{
										"type": "literal",
										"value": "xmlhttprequest"
									},
									{
										"type": "literal",
										"value": "ping"
									},
									{
										"type": "literal",
										"value": "csp_report"
									},
									{
										"type": "literal",
										"value": "media"
									},
									{
										"type": "literal",
										"value": "websocket"
									},
									{
										"type": "literal",
										"value": "other"
									}
								]
							}
						},
						{
							"id": 1765,
							"name": "RuleActionType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "Describes the kind of action to take if a given RuleCondition matches."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5119,
									"character": 30
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "block"
									},
									{
										"type": "literal",
										"value": "redirect"
									},
									{
										"type": "literal",
										"value": "allow"
									},
									{
										"type": "literal",
										"value": "upgradeScheme"
									},
									{
										"type": "literal",
										"value": "modifyHeaders"
									},
									{
										"type": "literal",
										"value": "allowAllRequests"
									}
								]
							}
						},
						{
							"id": 1766,
							"name": "UnsupportedRegexReason",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "Describes the reason why a given regular expression isn't supported."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5124,
									"character": 38
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "syntaxError"
									},
									{
										"type": "literal",
										"value": "memoryLimitExceeded"
									}
								]
							}
						},
						{
							"id": 1864,
							"name": "DYNAMIC_RULESET_ID",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Ruleset ID for the dynamic rules added by the extension."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5624,
									"character": 35
								}
							],
							"type": {
								"type": "literal",
								"value": "_dynamic"
							}
						},
						{
							"id": 1860,
							"name": "GETMATCHEDRULES_QUOTA_INTERVAL",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Time interval within which <code>MAX_GETMATCHEDRULES_CALLS_PER_INTERVAL\ngetMatchedRules</code> calls can be made, specified in minutes. Additional\ncalls will fail immediately and set {@link runtime.lastError}. Note:\n<code>getMatchedRules</code> calls associated with a user gesture are exempt\nfrom the quota."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5600,
									"character": 47
								}
							],
							"type": {
								"type": "literal",
								"value": 10
							}
						},
						{
							"id": 1858,
							"name": "GUARANTEED_MINIMUM_STATIC_RULES",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "The minimum number of static rules guaranteed to an extension across its\nenabled static rulesets. Any rules above this limit will count towards the <a\nhref=\"#global-rule-limit\">global rule limit</a>."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5585,
									"character": 48
								}
							],
							"type": {
								"type": "literal",
								"value": 30000
							}
						},
						{
							"id": 1861,
							"name": "MAX_GETMATCHEDRULES_CALLS_PER_INTERVAL",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "The number of times <code>getMatchedRules</code> can be called within a\nperiod of <code>GETMATCHEDRULES_QUOTA_INTERVAL</code>."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5606,
									"character": 55
								}
							],
							"type": {
								"type": "literal",
								"value": 20
							}
						},
						{
							"id": 1859,
							"name": "MAX_NUMBER_OF_DYNAMIC_AND_SESSION_RULES",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "The maximum number of combined dynamic and session scoped rules an extension\ncan add."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5591,
									"character": 56
								}
							],
							"type": {
								"type": "literal",
								"value": 5000
							}
						},
						{
							"id": 1862,
							"name": "MAX_NUMBER_OF_REGEX_RULES",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "The maximum number of regular expression rules that an extension can add.\nThis limit is evaluated separately for the set of dynamic rules and those\nspecified in the rule resources file."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5613,
									"character": 42
								}
							],
							"type": {
								"type": "literal",
								"value": 1000
							}
						},
						{
							"id": 1863,
							"name": "MAX_NUMBER_OF_STATIC_RULESETS",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "The maximum number of static <code>Rulesets</code> an extension can specify\nas part of the <code>\"rule_resources\"</code> manifest key."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5619,
									"character": 46
								}
							],
							"type": {
								"type": "literal",
								"value": 10
							}
						},
						{
							"id": 1865,
							"name": "SESSION_RULESET_ID",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Ruleset ID for the session-scoped rules added by the extension."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5629,
									"character": 35
								}
							],
							"type": {
								"type": "literal",
								"value": "_session"
							}
						},
						{
							"id": 1866,
							"name": "onRuleMatchedDebug",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a rule is matched with a request. Only available for unpacked\nextensions with the <code>declarativeNetRequestFeedback</code> permission as\nthis is intended to be used for debugging purposes only."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5806,
									"character": 35
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 1867,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 5806,
													"character": 57
												}
											],
											"signatures": [
												{
													"id": 1868,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 1869,
															"name": "info",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "The rule that has been matched along with information about the associated request.\n"
															},
															"type": {
																"type": "reference",
																"id": 1836,
																"name": "MatchedRuleInfoDebug"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 1756,
							"name": "getAvailableStaticRuleCount",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5795,
									"character": 47
								}
							],
							"signatures": [
								{
									"id": 1757,
									"name": "getAvailableStaticRuleCount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the number of static rules an extension can enable before the <a\nhref=\"#global-rule-limit\">global static rule limit</a> is reached."
									},
									"parameters": [
										{
											"id": 1758,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1759,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 5796,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 1760,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1761,
																	"name": "count",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1701,
							"name": "getDynamicRules",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5657,
									"character": 35
								}
							],
							"signatures": [
								{
									"id": 1702,
									"name": "getDynamicRules",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the current set of dynamic rules for the extension."
									},
									"parameters": [
										{
											"id": 1703,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Called with the set of dynamic rules. An error might be raised in case of transient internal errors."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1704,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 5658,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 1705,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1706,
																	"name": "rules",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 1810,
																			"name": "Rule"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1725,
							"name": "getEnabledRulesets",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5716,
									"character": 38
								}
							],
							"signatures": [
								{
									"id": 1726,
									"name": "getEnabledRulesets",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the ids for the current set of enabled static rulesets."
									},
									"parameters": [
										{
											"id": 1727,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Called with a list of ids, where each id corresponds to an enabled static {@link Ruleset}."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1728,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 5717,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 1729,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1730,
																	"name": "rulesetIds",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "string"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1731,
							"name": "getMatchedRules",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5735,
									"character": 35
								}
							],
							"signatures": [
								{
									"id": 1732,
									"name": "getMatchedRules",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns all rules matched for the extension. Callers can optionally filter\nthe list of matched rules by specifying a |filter|. This method is only\navailable to extensions with the <code>declarativeNetRequestFeedback</code>\npermission or having the <code>activeTab</code> permission granted for the\n<code>tabId</code> specified in <code>filter</code>. Note: Rules not\nassociated with an active document that were matched more than five minutes\nago will not be returned."
									},
									"parameters": [
										{
											"id": 1733,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An object to filter the list of matched rules."
											},
											"type": {
												"type": "reference",
												"id": 1822,
												"name": "MatchedRulesFilter"
											}
										},
										{
											"id": 1734,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Called once the list of matched rules has been fetched. In case of an error, {@link runtime.lastError} will be set and no rules will be returned. This can happen for multiple reasons, such as insufficient permissions, or exceeding the quota."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1735,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 5737,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 1736,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1737,
																	"name": "details",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 1825,
																		"name": "RulesMatchedDetails"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								},
								{
									"id": 1738,
									"name": "getMatchedRules",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns all rules matched for the extension. Callers can optionally filter\nthe list of matched rules by specifying a |filter|. This method is only\navailable to extensions with the <code>declarativeNetRequestFeedback</code>\npermission or having the <code>activeTab</code> permission granted for the\n<code>tabId</code> specified in <code>filter</code>. Note: Rules not\nassociated with an active document that were matched more than five minutes\nago will not be returned."
									},
									"parameters": [
										{
											"id": 1739,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Called once the list of matched rules has been fetched. In case of an error, {@link runtime.lastError} will be set and no rules will be returned. This can happen for multiple reasons, such as insufficient permissions, or exceeding the quota."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1740,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 5755,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 1741,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1742,
																	"name": "details",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 1825,
																		"name": "RulesMatchedDetails"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1713,
							"name": "getSessionRules",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5687,
									"character": 35
								}
							],
							"signatures": [
								{
									"id": 1714,
									"name": "getSessionRules",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the current set of session scoped rules for the extension."
									},
									"parameters": [
										{
											"id": 1715,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Called with the set of session scoped rules."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1716,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 5688,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 1717,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1718,
																	"name": "rules",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 1810,
																			"name": "Rule"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1749,
							"name": "isRegexSupported",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5781,
									"character": 36
								}
							],
							"signatures": [
								{
									"id": 1750,
									"name": "isRegexSupported",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Checks if the given regular expression will be supported as a\n<code>regexFilter</code> rule condition."
									},
									"parameters": [
										{
											"id": 1751,
											"name": "regexOptions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The regular expression to check."
											},
											"type": {
												"type": "reference",
												"id": 1839,
												"name": "RegexOptions"
											}
										},
										{
											"id": 1752,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Called with details consisting of whether the regular expression is supported and the reason if not."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1753,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 5783,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 1754,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1755,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 1843,
																		"name": "IsRegexSupportedResult"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1743,
							"name": "setExtensionActionOptions",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5768,
									"character": 45
								}
							],
							"signatures": [
								{
									"id": 1744,
									"name": "setExtensionActionOptions",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Configures if the action count for tabs should be displayed as the extension\naction's badge text and provides a way for that action count to be\nincremented."
									},
									"parameters": [
										{
											"id": 1745,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 1855,
												"name": "ExtensionActionOptions"
											}
										},
										{
											"id": 1746,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1747,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 5770,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1748,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1695,
							"name": "updateDynamicRules",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5646,
									"character": 38
								}
							],
							"signatures": [
								{
									"id": 1696,
									"name": "updateDynamicRules",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Modifies the current set of dynamic rules for the extension. The rules with\nIDs listed in <code>options.removeRuleIds</code> are first removed, and then\nthe rules given in <code>options.addRules</code> are added. Notes: <ul>\n<li>This update happens as a single atomic operation: either all specified\nrules are added and removed, or an error is returned.</li> <li>These rules\nare persisted across browser sessions and across extension updates.</li>\n<li>Static rules specified as part of the extension package can not be\nremoved using this function.</li> <li>{@link\nMAX_NUMBER_OF_DYNAMIC_AND_SESSION_RULES} is the maximum number of combined\ndynamic and session rules an extension can add.</li> </ul>"
									},
									"parameters": [
										{
											"id": 1697,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 1846,
												"name": "UpdateRuleOptions"
											}
										},
										{
											"id": 1698,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called once the update is complete or has failed. In case of an error, {@link runtime.lastError} will be set and no change will be made to the rule set. This can happen for multiple reasons, such as invalid rule format, duplicate rule ID, rule count limit exceeded, internal errors, and others.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1699,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 5648,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1700,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1719,
							"name": "updateEnabledRulesets",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5705,
									"character": 41
								}
							],
							"signatures": [
								{
									"id": 1720,
									"name": "updateEnabledRulesets",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Updates the set of enabled static rulesets for the extension. The rulesets\nwith IDs listed in <code>options.disableRulesetIds</code> are first removed,\nand then the rulesets listed in <code>options.enableRulesetIds</code> are\nadded.<br/> Note that the set of enabled static rulesets is persisted across\nsessions but not across extension updates, i.e. the\n<code>rule_resources</code> manifest key will determine the set of enabled\nstatic rulesets on each extension update."
									},
									"parameters": [
										{
											"id": 1721,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 1849,
												"name": "UpdateRulesetOptions"
											}
										},
										{
											"id": 1722,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called once the update is complete. In case of an error, {@link runtime.lastError} will be set and no change will be made to set of enabled rulesets. This can happen for multiple reasons, such as invalid ruleset IDs, rule count limit exceeded, or internal errors.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1723,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 5707,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1724,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1707,
							"name": "updateSessionRules",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5676,
									"character": 38
								}
							],
							"signatures": [
								{
									"id": 1708,
									"name": "updateSessionRules",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Modifies the current set of session scoped rules for the extension. The rules\nwith IDs listed in <code>options.removeRuleIds</code> are first removed, and\nthen the rules given in <code>options.addRules</code> are added. Notes: <ul>\n<li>This update happens as a single atomic operation: either all specified\nrules are added and removed, or an error is returned.</li> <li>These rules\nare not persisted across sessions and are backed in memory.</li> <li>{@link\nMAX_NUMBER_OF_DYNAMIC_AND_SESSION_RULES} is the maximum number of combined\ndynamic and session rules an extension can add.</li> </ul>"
									},
									"parameters": [
										{
											"id": 1709,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 1846,
												"name": "UpdateRuleOptions"
											}
										},
										{
											"id": 1710,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called once the update is complete or has failed. In case of an error, {@link runtime.lastError} will be set and no change will be made to the rule set. This can happen for multiple reasons, such as invalid rule format, duplicate rule ID, rule count limit exceeded, and others.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1711,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 5678,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1712,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1855,
								1843,
								1815,
								1818,
								1836,
								1822,
								1801,
								1771,
								1774,
								1787,
								1839,
								1827,
								1810,
								1805,
								1792,
								1825,
								1767,
								1852,
								1777,
								1846,
								1849
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								1763,
								1764,
								1762,
								1765,
								1766
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								1864,
								1860,
								1858,
								1861,
								1859,
								1862,
								1863,
								1865,
								1866
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								1756,
								1701,
								1725,
								1731,
								1713,
								1749,
								1743,
								1695,
								1719,
								1707
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 5098,
							"character": 40
						}
					]
				},
				{
					"id": 1870,
					"name": "declarativeWebRequest",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "<em><strong>Note:</strong> this API is currently on hold, without concrete\nplans to move to stable.</em> Use the\n<code>chrome.declarativeWebRequest</code> API to intercept, block, or modify\nrequests in-flight. It is significantly faster than the <a\nhref='webRequest'><code>chrome.webRequest</code> API</a> because you can\nregister rules that are evaluated in the browser rather than the JavaScript\nengine, which reduces roundtrip latencies and allows higher efficiency.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "declarativeWebRequest"
							},
							{
								"tag": "beta",
								"text": ""
							},
							{
								"tag": "chrome-permission",
								"text": "declarativeWebRequest\n"
							}
						]
					},
					"children": [
						{
							"id": 1941,
							"name": "AddRequestCookie",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Adds a cookie to the request or overrides a cookie, in case another cookie of\nthe same name exists already. Note that it is preferred to use the Cookies\nAPI because this is computationally less expensive."
							},
							"children": [
								{
									"id": 1942,
									"name": "cookie",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Cookie to be added to the request. No field may be undefined."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6245,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 1917,
										"name": "RequestCookie"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1942
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 6241,
									"character": 37
								}
							]
						},
						{
							"id": 1943,
							"name": "AddResponseCookie",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Adds a cookie to the response or overrides a cookie, in case another cookie\nof the same name exists already. Note that it is preferred to use the Cookies\nAPI because this is computationally less expensive."
							},
							"children": [
								{
									"id": 1944,
									"name": "cookie",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Cookie to be added to the response. The name and value need to be specified."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6257,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 1920,
										"name": "ResponseCookie"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1944
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 6253,
									"character": 38
								}
							]
						},
						{
							"id": 1906,
							"name": "AddResponseHeader",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Adds the response header to the response of this web request. As multiple\nresponse headers may share the same name, you need to first remove and then\nadd a new response header in order to replace one."
							},
							"children": [
								{
									"id": 1907,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "HTTP response header name."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6049,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1908,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "HTTP response header value."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6054,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1907,
										1908
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 6045,
									"character": 38
								}
							]
						},
						{
							"id": 1893,
							"name": "CancelRequest",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Declarative event action that cancels a network request."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5963,
									"character": 34
								}
							]
						},
						{
							"id": 1945,
							"name": "EditRequestCookie",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Edits one or more cookies of request. Note that it is preferred to use the\nCookies API because this is computationally less expensive."
							},
							"children": [
								{
									"id": 1946,
									"name": "filter",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Filter for cookies that will be modified. All empty entries are ignored."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6268,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 1917,
										"name": "RequestCookie"
									}
								},
								{
									"id": 1947,
									"name": "modification",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Attributes that shall be overridden in cookies that machted the filter.\nAttributes that are set to an empty string are removed."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6274,
											"character": 18
										}
									],
									"type": {
										"type": "reference",
										"id": 1917,
										"name": "RequestCookie"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1946,
										1947
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 6264,
									"character": 38
								}
							]
						},
						{
							"id": 1948,
							"name": "EditResponseCookie",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Edits one or more cookies of response. Note that it is preferred to use the\nCookies API because this is computationally less expensive."
							},
							"children": [
								{
									"id": 1949,
									"name": "filter",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Filter for cookies that will be modified. All empty entries are ignored."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6285,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 1929,
										"name": "FilterResponseCookie"
									}
								},
								{
									"id": 1950,
									"name": "modification",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Attributes that shall be overridden in cookies that machted the filter.\nAttributes that are set to an empty string are removed."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6291,
											"character": 18
										}
									],
									"type": {
										"type": "reference",
										"id": 1920,
										"name": "ResponseCookie"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1949,
										1950
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 6281,
									"character": 39
								}
							]
						},
						{
							"id": 1929,
							"name": "FilterResponseCookie",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "A filter of a cookie in HTTP Responses."
							},
							"children": [
								{
									"id": 1939,
									"name": "ageLowerBound",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Inclusive lower bound on the cookie lifetime (specified in seconds after\ncurrent time). Only cookies whose expiration date-time is set to 'now +\nageLowerBound' or later fulfill this criterion. Session cookies do not meet\nthe criterion of this filter. The cookie lifetime is calculated from either\n'max-age' or 'expires' cookie attributes. If both are specified, 'max-age' is\nused to calculate the cookie lifetime."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6227,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1938,
									"name": "ageUpperBound",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Inclusive upper bound on the cookie lifetime (specified in seconds after\ncurrent time). Only cookies whose expiration date-time is in the interval\n[now, now + ageUpperBound] fulfill this criterion. Session cookies and\ncookies whose expiration date-time is in the past do not meet the criterion\nof this filter. The cookie lifetime is calculated from either 'max-age' or\n'expires' cookie attributes. If both are specified, 'max-age' is used to\ncalculate the cookie lifetime."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6217,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1934,
									"name": "domain",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Value of the Domain cookie attribute."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6191,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1932,
									"name": "expires",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Value of the Expires cookie attribute."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6181,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1937,
									"name": "httpOnly",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Existence of the HttpOnly cookie attribute."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6206,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1933,
									"name": "maxAge",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Value of the Max-Age cookie attribute"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6186,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1930,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Name of a cookie."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6171,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1935,
									"name": "path",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Value of the Path cookie attribute."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6196,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1936,
									"name": "secure",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Existence of the Secure cookie attribute."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6201,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1940,
									"name": "sessionCookie",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Filters session cookies. Session cookies have no lifetime specified in any of\n'max-age' or 'expires' attributes."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6233,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1931,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Value of a cookie, may be padded in double-quotes."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6176,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1939,
										1938,
										1934,
										1932,
										1937,
										1933,
										1930,
										1935,
										1936,
										1940,
										1931
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 6167,
									"character": 41
								}
							]
						},
						{
							"id": 1872,
							"name": "HeaderFilter",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Filters request headers for various criteria. Multiple criteria are evaluated\nas a conjunction."
							},
							"children": [
								{
									"id": 1875,
									"name": "nameContains",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if the header name contains all of the specified strings."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5852,
											"character": 18
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 1876,
									"name": "nameEquals",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if the header name is equal to the specified string."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5857,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1873,
									"name": "namePrefix",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if the header name starts with the specified string."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5842,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1874,
									"name": "nameSuffix",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if the header name ends with the specified string."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5847,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1879,
									"name": "valueContains",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if the header value contains all of the specified strings."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5872,
											"character": 19
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 1880,
									"name": "valueEquals",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if the header value is equal to the specified string."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5877,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1877,
									"name": "valuePrefix",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if the header value starts with the specified string."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5862,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1878,
									"name": "valueSuffix",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if the header value ends with the specified string."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5867,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1875,
										1876,
										1873,
										1874,
										1879,
										1880,
										1877,
										1878
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5838,
									"character": 33
								}
							]
						},
						{
							"id": 1912,
							"name": "IgnoreRules",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Masks all rules that match the specified criteria."
							},
							"children": [
								{
									"id": 1914,
									"name": "hasTag",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "If set, rules with the specified tag are ignored. This ignoring is not\npersisted, it affects only rules and their actions of the same network\nrequest stage. Note that rules are executed in descending order of their\npriorities. This action affects rules of lower priority than the current\nrule. Rules with the same priority may or may not be ignored."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6090,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1913,
									"name": "lowerPriorityThan",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "If set, rules with a lower priority than the specified value are ignored.\nThis boundary is not persisted, it affects only rules and their actions of\nthe same network request stage."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6081,
											"character": 23
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1914,
										1913
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 6075,
									"character": 32
								}
							]
						},
						{
							"id": 1898,
							"name": "RedirectByRegEx",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Redirects a request by applying a regular expression on the URL. The regular\nexpressions use the <a\nhref=\"https://github.com/google/re2/blob/master/doc/syntax.txt\">RE2\nsyntax</a>."
							},
							"children": [
								{
									"id": 1899,
									"name": "from",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "A match pattern that may contain capture groups. Capture groups are\nreferenced in the Perl syntax ($1, $2, ...) instead of the RE2 syntax (\\1,\n\\2, ...) in order to be closer to JavaScript Regular Expressions."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6002,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1900,
									"name": "to",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Destination pattern."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6007,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1899,
										1900
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5996,
									"character": 36
								}
							]
						},
						{
							"id": 1894,
							"name": "RedirectRequest",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Declarative event action that redirects a network request."
							},
							"children": [
								{
									"id": 1895,
									"name": "redirectUrl",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Destination to where the request is redirected."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5973,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1895
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5969,
									"character": 36
								}
							]
						},
						{
							"id": 1897,
							"name": "RedirectToEmptyDocument",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Declarative event action that redirects a network request to an empty\ndocument."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5987,
									"character": 44
								}
							]
						},
						{
							"id": 1896,
							"name": "RedirectToTransparentImage",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Declarative event action that redirects a network request to a transparent\nimage."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5980,
									"character": 47
								}
							]
						},
						{
							"id": 1951,
							"name": "RemoveRequestCookie",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Removes one or more cookies of request. Note that it is preferred to use the\nCookies API because this is computationally less expensive."
							},
							"children": [
								{
									"id": 1952,
									"name": "filter",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Filter for cookies that will be removed. All empty entries are ignored."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6302,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 1917,
										"name": "RequestCookie"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1952
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 6298,
									"character": 40
								}
							]
						},
						{
							"id": 1904,
							"name": "RemoveRequestHeader",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Removes the request header of the specified name. Do not use SetRequestHeader\nand RemoveRequestHeader with the same header name on the same request. Each\nrequest header name occurs only once in each request."
							},
							"children": [
								{
									"id": 1905,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "HTTP request header name (case-insensitive)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6037,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1905
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 6033,
									"character": 40
								}
							]
						},
						{
							"id": 1953,
							"name": "RemoveResponseCookie",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Removes one or more cookies of response. Note that it is preferred to use the\nCookies API because this is computationally less expensive."
							},
							"children": [
								{
									"id": 1954,
									"name": "filter",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Filter for cookies that will be removed. All empty entries are ignored."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6313,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 1929,
										"name": "FilterResponseCookie"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1954
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 6309,
									"character": 41
								}
							]
						},
						{
							"id": 1909,
							"name": "RemoveResponseHeader",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Removes all response headers of the specified names and values."
							},
							"children": [
								{
									"id": 1910,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "HTTP request header name (case-insensitive)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6064,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1911,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "HTTP request header value (case-insensitive)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6069,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1910,
										1911
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 6060,
									"character": 41
								}
							]
						},
						{
							"id": 1917,
							"name": "RequestCookie",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "A filter or specification of a cookie in HTTP Requests."
							},
							"children": [
								{
									"id": 1918,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Name of a cookie."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6111,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1919,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Value of a cookie, may be padded in double-quotes."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6116,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1918,
										1919
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 6107,
									"character": 34
								}
							]
						},
						{
							"id": 1881,
							"name": "RequestMatcher",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Matches network events by various criteria."
							},
							"children": [
								{
									"id": 1885,
									"name": "contentType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if the MIME media type of a response (from the HTTP Content-Type\nheader) is contained in the list."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5910,
											"character": 17
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 1886,
									"name": "excludeContentType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if the MIME media type of a response (from the HTTP Content-Type\nheader) is <em>not</em> contained in the list."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5916,
											"character": 24
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 1888,
									"name": "excludeRequestHeaders",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if none of the request headers is matched by any of the\nHeaderFilters."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5928,
											"character": 27
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1872,
											"name": "HeaderFilter"
										}
									}
								},
								{
									"id": 1890,
									"name": "excludeResponseHeaders",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if none of the response headers is matched by any of the\nHeaderFilters."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5940,
											"character": 28
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1872,
											"name": "HeaderFilter"
										}
									}
								},
								{
									"id": 1883,
									"name": "firstPartyForCookiesUrl",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if the conditions of the UrlFilter are fulfilled for the 'first\nparty' URL of the request. The 'first party' URL of a request, when present,\ncan be different from the request's target URL, and describes what is\nconsidered 'first party' for the sake of third-party checks for cookies.",
										"tags": [
											{
												"tag": "deprecated",
												"text": "Ignored since release 82.\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5898,
											"character": 29
										}
									],
									"type": {
										"type": "reference",
										"id": 2583,
										"name": "UrlFilter"
									}
								},
								{
									"id": 1887,
									"name": "requestHeaders",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if some of the request headers is matched by one of the\nHeaderFilters."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5922,
											"character": 20
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1872,
											"name": "HeaderFilter"
										}
									}
								},
								{
									"id": 1884,
									"name": "resourceType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if the request type of a request is contained in the list. Requests\nthat cannot match any of the types will be filtered out."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5904,
											"character": 18
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1762,
											"name": "ResourceType"
										}
									}
								},
								{
									"id": 1889,
									"name": "responseHeaders",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if some of the response headers is matched by one of the\nHeaderFilters."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5934,
											"character": 21
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1872,
											"name": "HeaderFilter"
										}
									}
								},
								{
									"id": 1892,
									"name": "stages",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Contains a list of strings describing stages. Allowed values are\n'onBeforeRequest', 'onBeforeSendHeaders', 'onHeadersReceived',\n'onAuthRequired'. If this attribute is present, then it limits the applicable\nstages to those listed. Note that the whole condition is only applicable in\nstages compatible with all attributes."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5957,
											"character": 12
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1871,
											"name": "Stage"
										}
									}
								},
								{
									"id": 1891,
									"name": "thirdPartyForCookies",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "If set to true, matches requests that are subject to third-party cookie\npolicies. If set to false, matches all other requests.",
										"tags": [
											{
												"tag": "deprecated",
												"text": "Ignored since release 87.\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5948,
											"character": 26
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1882,
									"name": "url",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if the conditions of the UrlFilter are fulfilled for the URL of the\nrequest."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 5888,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"id": 2583,
										"name": "UrlFilter"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1885,
										1886,
										1888,
										1890,
										1883,
										1887,
										1884,
										1889,
										1892,
										1891,
										1882
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5883,
									"character": 35
								}
							]
						},
						{
							"id": 1920,
							"name": "ResponseCookie",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "A specification of a cookie in HTTP Responses."
							},
							"children": [
								{
									"id": 1925,
									"name": "domain",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Value of the Domain cookie attribute."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6146,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1923,
									"name": "expires",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Value of the Expires cookie attribute."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6136,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1928,
									"name": "httpOnly",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Existence of the HttpOnly cookie attribute."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6161,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1924,
									"name": "maxAge",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Value of the Max-Age cookie attribute"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6141,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1921,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Name of a cookie."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6126,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1926,
									"name": "path",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Value of the Path cookie attribute."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6151,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1927,
									"name": "secure",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Existence of the Secure cookie attribute."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6156,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1922,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Value of a cookie, may be padded in double-quotes."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6131,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1925,
										1923,
										1928,
										1924,
										1921,
										1926,
										1927,
										1922
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 6122,
									"character": 35
								}
							]
						},
						{
							"id": 1915,
							"name": "SendMessageToExtension",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Triggers the {@link declarativeWebRequest.onMessage} event."
							},
							"children": [
								{
									"id": 1916,
									"name": "message",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The value that will be passed in the <code>message</code> attribute of the\ndictionary that is passed to the event handler."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6101,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1916
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 6096,
									"character": 43
								}
							]
						},
						{
							"id": 1901,
							"name": "SetRequestHeader",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Sets the request header of the specified name to the specified value. If a\nheader with the specified name did not exist before, a new one is created.\nHeader name comparison is always case-insensitive. Each request header name\noccurs only once in each request."
							},
							"children": [
								{
									"id": 1902,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "HTTP request header name."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6020,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1903,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "HTTP request header value."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6025,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1902,
										1903
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 6016,
									"character": 37
								}
							]
						},
						{
							"id": 1871,
							"name": "Stage",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 5832,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "onBeforeRequest"
									},
									{
										"type": "literal",
										"value": "onBeforeSendHeaders"
									},
									{
										"type": "literal",
										"value": "onHeadersReceived"
									},
									{
										"type": "literal",
										"value": "onAuthRequired"
									}
								]
							}
						},
						{
							"id": 1958,
							"name": "onMessage",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a message is sent via {@link\ndeclarativeWebRequest.SendMessageToExtension} from an action of the\ndeclarative web request API."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 6325,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 1959,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 6325,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 1960,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 1961,
															"name": "details",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 1962,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 1968,
																			"name": "frameId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The value 0 indicates that the request happens in the main frame; a positive\nvalue indicates the ID of a subframe in which the request happens. If the\ndocument of a (sub-)frame is loaded (<code>type</code> is\n<code>main_frame</code> or <code>sub_frame</code>), <code>frameId</code>\nindicates the ID of this frame, not the ID of the outer frame. Frame IDs are\nunique within a tab."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 6361,
																					"character": 17
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 1963,
																			"name": "message",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The message sent by the calling script."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 6334,
																					"character": 17
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 1967,
																			"name": "method",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "Standard HTTP method."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 6351,
																					"character": 16
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 1969,
																			"name": "parentFrameId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "ID of frame that wraps the frame which sent the request. Set to -1 if no\nparent frame exists."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 6367,
																					"character": 23
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 1965,
																			"name": "requestId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the request. Request IDs are unique within a browser session. As a\nresult, they could be used to relate different events of the same request."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 6345,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 1964,
																			"name": "stage",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The stage of the network request during which the event was triggered."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 6339,
																					"character": 15
																				}
																			],
																			"type": {
																				"type": "reference",
																				"id": 1871,
																				"name": "Stage"
																			}
																		},
																		{
																			"id": 1970,
																			"name": "tabId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the tab in which the request takes place. Set to -1 if the request\nisn't related to a tab."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 6373,
																					"character": 15
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 1972,
																			"name": "timeStamp",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The time when this signal is triggered, in milliseconds since the epoch."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 6383,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 1971,
																			"name": "type",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "How the requested resource will be used."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 6378,
																					"character": 14
																				}
																			],
																			"type": {
																				"type": "reference",
																				"id": 6618,
																				"name": "webRequest.ResourceType"
																			}
																		},
																		{
																			"id": 1966,
																			"name": "url",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 6346,
																					"character": 13
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				1968,
																				1963,
																				1967,
																				1969,
																				1965,
																				1964,
																				1970,
																				1972,
																				1971,
																				1966
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 6330,
																			"character": 16
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 1955,
							"name": "onRequest",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 6316,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 1956,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 6316,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 1957,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1941,
								1943,
								1906,
								1893,
								1945,
								1948,
								1929,
								1872,
								1912,
								1898,
								1894,
								1897,
								1896,
								1951,
								1904,
								1953,
								1909,
								1917,
								1881,
								1920,
								1915,
								1901
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								1871
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								1958,
								1955
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 5831,
							"character": 40
						}
					]
				},
				{
					"id": 1973,
					"name": "desktopCapture",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Desktop Capture API that can be used to capture content of screen, individual\nwindows or tabs.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "desktopCapture"
							},
							{
								"tag": "chrome-permission",
								"text": "desktopCapture\n"
							}
						]
					},
					"children": [
						{
							"id": 1997,
							"name": "DesktopCaptureSourceType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "Enum used to define set of desktop media sources used in\nchooseDesktopMedia()."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 6403,
									"character": 40
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "screen"
									},
									{
										"type": "literal",
										"value": "window"
									},
									{
										"type": "literal",
										"value": "tab"
									},
									{
										"type": "literal",
										"value": "audio"
									}
								]
							}
						},
						{
							"id": 1994,
							"name": "cancelChooseDesktopMedia",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 6460,
									"character": 44
								}
							],
							"signatures": [
								{
									"id": 1995,
									"name": "cancelChooseDesktopMedia",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Hides desktop media picker dialog shown by chooseDesktopMedia()."
									},
									"parameters": [
										{
											"id": 1996,
											"name": "desktopMediaRequestId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Id returned by chooseDesktopMedia()\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1974,
							"name": "chooseDesktopMedia",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 6415,
									"character": 38
								}
							],
							"signatures": [
								{
									"id": 1975,
									"name": "chooseDesktopMedia",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Shows desktop media picker UI with the specified set of sources.",
										"returns": "An id that can be passed to cancelChooseDesktopMedia() in case the prompt need to be canceled.\n"
									},
									"parameters": [
										{
											"id": 1976,
											"name": "sources",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Set of sources that should be shown to the user. The sources order in the set decides the tab order in the picker."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 1997,
													"name": "DesktopCaptureSourceType"
												}
											}
										},
										{
											"id": 1977,
											"name": "targetTab",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Optional tab for which the stream is created. If not specified then the resulting stream can be used only by the calling extension. The stream can only be used by frames in the given tab whose security origin matches <code>tab.url</code>. The tab's origin must be a secure origin, e.g. HTTPS."
											},
											"type": {
												"type": "reference",
												"id": 5892,
												"name": "tabs.Tab"
											}
										},
										{
											"id": 1978,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1979,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 6418,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 1980,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1981,
																	"name": "streamId",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "An opaque string that can be passed to <code>getUserMedia()</code> API to generate media stream that corresponds to the source selected by the user. If user didn't select any source (i.e. canceled the prompt) then the callback is called with an empty <code>streamId</code>. The created <code>streamId</code> can be used only once and expires after a few seconds when it is not used."
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																},
																{
																	"id": 1982,
																	"name": "options",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "Contains properties that describe the stream."
																	},
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 1983,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 1984,
																					"name": "canRequestAudioTrack",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"comment": {
																						"shortText": "True if \"audio\" is included in parameter sources, and the end user does not\nuncheck the \"Share audio\" checkbox. Otherwise false, and in this case, one\nshould not ask for audio stream through getUserMedia call."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 6426,
																							"character": 30
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "boolean"
																					}
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						1984
																					]
																				}
																			],
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 6420,
																					"character": 16
																				}
																			]
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1985,
									"name": "chooseDesktopMedia",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Shows desktop media picker UI with the specified set of sources.",
										"returns": "An id that can be passed to cancelChooseDesktopMedia() in case the prompt need to be canceled.\n"
									},
									"parameters": [
										{
											"id": 1986,
											"name": "sources",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Set of sources that should be shown to the user. The sources order in the set decides the tab order in the picker."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 1997,
													"name": "DesktopCaptureSourceType"
												}
											}
										},
										{
											"id": 1987,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1988,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 6442,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 1989,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1990,
																	"name": "streamId",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "An opaque string that can be passed to <code>getUserMedia()</code> API to generate media stream that corresponds to the source selected by the user. If user didn't select any source (i.e. canceled the prompt) then the callback is called with an empty <code>streamId</code>. The created <code>streamId</code> can be used only once and expires after a few seconds when it is not used."
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																},
																{
																	"id": 1991,
																	"name": "options",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "Contains properties that describe the stream."
																	},
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 1992,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 1993,
																					"name": "canRequestAudioTrack",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"comment": {
																						"shortText": "True if \"audio\" is included in parameter sources, and the end user does not\nuncheck the \"Share audio\" checkbox. Otherwise false, and in this case, one\nshould not ask for audio stream through getUserMedia call."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 6450,
																							"character": 30
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "boolean"
																					}
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						1993
																					]
																				}
																			],
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 6444,
																					"character": 16
																				}
																			]
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								1997
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								1994,
								1974
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 6398,
							"character": 33
						}
					]
				},
				{
					"id": 1998,
					"name": "devtools",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 1999,
							"name": "inspectedWindow",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"comment": {
								"shortText": "Use the <code>chrome.devtools.inspectedWindow</code> API to interact with the\ninspected window: obtain the tab ID for the inspected page, evaluate the code\nin the context of the inspected window, reload the page, or obtain the list\nof resources within the page.",
								"tags": [
									{
										"tag": "chrome-namespace",
										"text": "devtools.inspectedWindow\n"
									}
								]
							},
							"children": [
								{
									"id": 2013,
									"name": "Resource",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A resource within the inspected page, such as a document, a script, or an\nimage."
									},
									"children": [
										{
											"id": 2014,
											"name": "url",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The URL of the resource."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 6484,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2015,
											"name": "getContent",
											"kind": 2048,
											"kindString": "Method",
											"flags": {},
											"signatures": [
												{
													"id": 2016,
													"name": "getContent",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "Gets the content of the resource."
													},
													"parameters": [
														{
															"id": 2017,
															"name": "callback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "A function that receives resource content when the request completes."
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 2018,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"signatures": [
																		{
																			"id": 2019,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 2020,
																					"name": "content",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"comment": {
																						"text": "Content of the resource (potentially encoded)."
																					},
																					"type": {
																						"type": "intrinsic",
																						"name": "string"
																					}
																				},
																				{
																					"id": 2021,
																					"name": "encoding",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"comment": {
																						"text": "Empty if the content is not encoded, encoding name otherwise. Currently, only base64 is supported.\n"
																					},
																					"type": {
																						"type": "intrinsic",
																						"name": "string"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										},
										{
											"id": 2022,
											"name": "setContent",
											"kind": 2048,
											"kindString": "Method",
											"flags": {},
											"signatures": [
												{
													"id": 2023,
													"name": "setContent",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "Sets the content of the resource."
													},
													"parameters": [
														{
															"id": 2024,
															"name": "content",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "New content of the resource. Only resources with the text type are currently supported."
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 2025,
															"name": "commit",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "True if the user has finished editing the resource, and the new content of the resource should be persisted; false if this is a minor change sent in progress of the user editing the resource."
															},
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 2026,
															"name": "callback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "A function called upon request completion."
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 2027,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"signatures": [
																		{
																			"id": 2028,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 2029,
																					"name": "error",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {
																						"isOptional": true
																					},
																					"comment": {
																						"text": "Set to undefined if the resource content was set successfully; describes error otherwise.\n"
																					},
																					"type": {
																						"type": "reflection",
																						"declaration": {
																							"id": 2030,
																							"name": "__type",
																							"kind": 65536,
																							"kindString": "Type literal",
																							"flags": {},
																							"indexSignature": {
																								"id": 2031,
																								"name": "__index",
																								"kind": 8192,
																								"kindString": "Index signature",
																								"flags": {},
																								"parameters": [
																									{
																										"id": 2032,
																										"name": "name",
																										"kind": 32768,
																										"flags": {},
																										"type": {
																											"type": "intrinsic",
																											"name": "string"
																										}
																									}
																								],
																								"type": {
																									"type": "intrinsic",
																									"name": "any"
																								}
																							}
																						}
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												2014
											]
										},
										{
											"title": "Methods",
											"kind": 2048,
											"children": [
												2015,
												2022
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6480,
											"character": 29
										}
									]
								},
								{
									"id": 2057,
									"name": "onResourceAdded",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"comment": {
										"shortText": "Fired when a new resource is added to the inspected page."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6660,
											"character": 32
										}
									],
									"type": {
										"type": "reference",
										"id": 2537,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 2058,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"comment": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 6660,
															"character": 54
														}
													],
													"signatures": [
														{
															"id": 2059,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"comment": {},
															"parameters": [
																{
																	"id": 2060,
																	"name": "resource",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 2013,
																		"name": "Resource"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										],
										"name": "chrome.events.Event"
									}
								},
								{
									"id": 2061,
									"name": "onResourceContentCommitted",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"comment": {
										"shortText": "Fired when a new revision of the resource is committed (e.g. user saves an\nedited version of the resource in the Developer Tools)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6673,
											"character": 43
										}
									],
									"type": {
										"type": "reference",
										"id": 2537,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 2062,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"comment": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 6673,
															"character": 65
														}
													],
													"signatures": [
														{
															"id": 2063,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"comment": {},
															"parameters": [
																{
																	"id": 2064,
																	"name": "resource",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {},
																	"type": {
																		"type": "reference",
																		"id": 2013,
																		"name": "Resource"
																	}
																},
																{
																	"id": 2065,
																	"name": "content",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "New content of the resource.\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										],
										"name": "chrome.events.Event"
									}
								},
								{
									"id": 2033,
									"name": "tabId",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"comment": {
										"shortText": "The ID of the tab being inspected. This ID may be used with chrome.tabs.*\nAPI."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6521,
											"character": 22
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2034,
									"name": "eval",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6541,
											"character": 18
										}
									],
									"signatures": [
										{
											"id": 2035,
											"name": "eval",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Evaluates a JavaScript expression in the context of the main frame of the\ninspected page. The expression must evaluate to a JSON-compliant object,\notherwise an exception is thrown. The eval function can report either a\nDevTools-side error or a JavaScript exception that occurs during evaluation.\nIn either case, the <code>result</code> parameter of the callback is\n<code>undefined</code>. In the case of a DevTools-side error, the\n<code>isException</code> parameter is non-null and has <code>isError</code>\nset to true and <code>code</code> set to an error code. In the case of a\nJavaScript error, <code>isException</code> is set to true and\n<code>value</code> is set to the string value of thrown object."
											},
											"parameters": [
												{
													"id": 2036,
													"name": "expression",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "An expression to evaluate."
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 2037,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "The options parameter can contain one or more options."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2038,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 2041,
																	"name": "contextSecurityOrigin",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"shortText": "Evaluate the expression in the context of a content script of an extension\nthat matches the specified origin. If given, contextSecurityOrigin overrides\nthe 'true' setting on userContentScriptContext."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 6566,
																			"character": 29
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																},
																{
																	"id": 2039,
																	"name": "frameURL",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"shortText": "If specified, the expression is evaluated on the iframe whose URL matches the\none specified. By default, the expression is evaluated in the top frame of\nthe inspected page."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 6549,
																			"character": 16
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																},
																{
																	"id": 2040,
																	"name": "useContentScriptContext",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"shortText": "Evaluate the expression in the context of the content script of the calling\nextension, provided that the content script is already injected into the\ninspected page. If not, the expression is not evaluated and the callback is\ninvoked with the exception parameter set to an object that has the\n<code>isError</code> field set to true and the <code>code</code> field set to\n<code>E_NOTFOUND</code>."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 6559,
																			"character": 31
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "boolean"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"kind": 1024,
																	"children": [
																		2041,
																		2039,
																		2040
																	]
																}
															],
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 6543,
																	"character": 15
																}
															]
														}
													}
												},
												{
													"id": 2042,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "A function called when evaluation completes."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2043,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 6568,
																	"character": 16
																}
															],
															"signatures": [
																{
																	"id": 2044,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2045,
																			"name": "result",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "The result of evaluation."
																			},
																			"type": {
																				"type": "reflection",
																				"declaration": {
																					"id": 2046,
																					"name": "__type",
																					"kind": 65536,
																					"kindString": "Type literal",
																					"flags": {},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 6569,
																							"character": 15
																						}
																					],
																					"indexSignature": {
																						"id": 2047,
																						"name": "__index",
																						"kind": 8192,
																						"kindString": "Index signature",
																						"flags": {},
																						"parameters": [
																							{
																								"id": 2048,
																								"name": "name",
																								"kind": 32768,
																								"flags": {},
																								"type": {
																									"type": "intrinsic",
																									"name": "string"
																								}
																							}
																						],
																						"type": {
																							"type": "intrinsic",
																							"name": "any"
																						}
																					}
																				}
																			}
																		},
																		{
																			"id": 2049,
																			"name": "exceptionInfo",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "An object providing details if an exception occurred while evaluating the expression.\n"
																			},
																			"type": {
																				"type": "reflection",
																				"declaration": {
																					"id": 2050,
																					"name": "__type",
																					"kind": 65536,
																					"kindString": "Type literal",
																					"flags": {},
																					"children": [
																						{
																							"id": 2052,
																							"name": "code",
																							"kind": 1024,
																							"kindString": "Property",
																							"flags": {},
																							"comment": {
																								"shortText": "Set if the error occurred on the DevTools side before the expression is\nevaluated."
																							},
																							"sources": [
																								{
																									"fileName": "npm/index.d.ts",
																									"line": 6581,
																									"character": 14
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						},
																						{
																							"id": 2053,
																							"name": "description",
																							"kind": 1024,
																							"kindString": "Property",
																							"flags": {},
																							"comment": {
																								"shortText": "Set if the error occurred on the DevTools side before the expression is\nevaluated."
																							},
																							"sources": [
																								{
																									"fileName": "npm/index.d.ts",
																									"line": 6587,
																									"character": 21
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						},
																						{
																							"id": 2054,
																							"name": "details",
																							"kind": 1024,
																							"kindString": "Property",
																							"flags": {},
																							"comment": {
																								"shortText": "Set if the error occurred on the DevTools side before the expression is\nevaluated, contains the array of the values that may be substituted into the\ndescription string to provide more information about the cause of the error."
																							},
																							"sources": [
																								{
																									"fileName": "npm/index.d.ts",
																									"line": 6594,
																									"character": 17
																								}
																							],
																							"type": {
																								"type": "array",
																								"elementType": {
																									"type": "intrinsic",
																									"name": "any"
																								}
																							}
																						},
																						{
																							"id": 2051,
																							"name": "isError",
																							"kind": 1024,
																							"kindString": "Property",
																							"flags": {},
																							"comment": {
																								"shortText": "Set if the error occurred on the DevTools side before the expression is\nevaluated."
																							},
																							"sources": [
																								{
																									"fileName": "npm/index.d.ts",
																									"line": 6575,
																									"character": 17
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "boolean"
																							}
																						},
																						{
																							"id": 2055,
																							"name": "isException",
																							"kind": 1024,
																							"kindString": "Property",
																							"flags": {},
																							"comment": {
																								"shortText": "Set if the evaluated code produces an unhandled exception."
																							},
																							"sources": [
																								{
																									"fileName": "npm/index.d.ts",
																									"line": 6599,
																									"character": 21
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "boolean"
																							}
																						},
																						{
																							"id": 2056,
																							"name": "value",
																							"kind": 1024,
																							"kindString": "Property",
																							"flags": {},
																							"comment": {
																								"shortText": "Set if the evaluated code produces an unhandled exception."
																							},
																							"sources": [
																								{
																									"fileName": "npm/index.d.ts",
																									"line": 6604,
																									"character": 15
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						}
																					],
																					"groups": [
																						{
																							"title": "Properties",
																							"kind": 1024,
																							"children": [
																								2052,
																								2053,
																								2054,
																								2051,
																								2055,
																								2056
																							]
																						}
																					],
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 6570,
																							"character": 22
																						}
																					]
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 2007,
									"name": "getResources",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6651,
											"character": 32
										}
									],
									"signatures": [
										{
											"id": 2008,
											"name": "getResources",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Retrieves the list of resources from the inspected page."
											},
											"parameters": [
												{
													"id": 2009,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "A function that receives the list of resources when the request completes."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2010,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 6652,
																	"character": 15
																}
															],
															"signatures": [
																{
																	"id": 2011,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2012,
																			"name": "resources",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "The resources within the page.\n"
																			},
																			"type": {
																				"type": "array",
																				"elementType": {
																					"type": "reference",
																					"id": 2013,
																					"name": "Resource"
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 2000,
									"name": "reload",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6616,
											"character": 26
										}
									],
									"signatures": [
										{
											"id": 2001,
											"name": "reload",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Reloads the inspected page."
											},
											"parameters": [
												{
													"id": 2002,
													"name": "reloadOptions",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "\n"
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2003,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 2004,
																	"name": "ignoreCache",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"shortText": "When true, the loader will bypass the cache for all inspected page resources\nloaded before the <code>load</code> event is fired. The effect is similar to\npressing Ctrl+Shift+R in the inspected window or within the Developer Tools\nwindow."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 6624,
																			"character": 19
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "boolean"
																	}
																},
																{
																	"id": 2006,
																	"name": "injectedScript",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"shortText": "If specified, the script will be injected into every frame of the inspected\npage immediately upon load, before any of the frame's scripts. The script\nwill not be injected after subsequent reloads&mdash;for example, if the user\npresses Ctrl+R."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 6641,
																			"character": 22
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																},
																{
																	"id": 2005,
																	"name": "userAgent",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"shortText": "If specified, the string will override the value of the\n<code>User-Agent</code> HTTP header that's sent while loading the resources\nof the inspected page. The string will also override the value of the\n<code>navigator.userAgent</code> property that's returned to any scripts that\nare running within the inspected page."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 6633,
																			"character": 17
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"kind": 1024,
																	"children": [
																		2004,
																		2006,
																		2005
																	]
																}
															],
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 6617,
																	"character": 21
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										2013
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										2057,
										2061,
										2033
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										2034,
										2007,
										2000
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 6475,
									"character": 43
								}
							]
						},
						{
							"id": 2066,
							"name": "network",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"comment": {
								"shortText": "Use the <code>chrome.devtools.network</code> API to retrieve the information\nabout network requests displayed by the Developer Tools in the Network panel.",
								"tags": [
									{
										"tag": "chrome-namespace",
										"text": "devtools.network\n"
									}
								]
							},
							"children": [
								{
									"id": 2076,
									"name": "Request",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Represents a network request for a document resource (script, image and so\non). See HAR Specification for reference."
									},
									"children": [
										{
											"id": 2077,
											"name": "getContent",
											"kind": 2048,
											"kindString": "Method",
											"flags": {},
											"signatures": [
												{
													"id": 2078,
													"name": "getContent",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "Returns content of the response body."
													},
													"parameters": [
														{
															"id": 2079,
															"name": "callback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "A function that receives the response body when the request completes."
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 2080,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"signatures": [
																		{
																			"id": 2081,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 2082,
																					"name": "content",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"comment": {
																						"text": "Content of the response body (potentially encoded)."
																					},
																					"type": {
																						"type": "intrinsic",
																						"name": "string"
																					}
																				},
																				{
																					"id": 2083,
																					"name": "encoding",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"comment": {
																						"text": "Empty if content is not encoded, encoding name otherwise. Currently, only base64 is supported.\n"
																					},
																					"type": {
																						"type": "intrinsic",
																						"name": "string"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									],
									"groups": [
										{
											"title": "Methods",
											"kind": 2048,
											"children": [
												2077
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6698,
											"character": 28
										}
									]
								},
								{
									"id": 2088,
									"name": "onNavigated",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"comment": {
										"shortText": "Fired when the inspected window navigates to a new page."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6741,
											"character": 28
										}
									],
									"type": {
										"type": "reference",
										"id": 2537,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 2089,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"comment": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 6741,
															"character": 50
														}
													],
													"signatures": [
														{
															"id": 2090,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"comment": {},
															"parameters": [
																{
																	"id": 2091,
																	"name": "url",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "URL of the new page.\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										],
										"name": "chrome.events.Event"
									}
								},
								{
									"id": 2084,
									"name": "onRequestFinished",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"comment": {
										"shortText": "Fired when a network request is finished and all request data are available."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6729,
											"character": 34
										}
									],
									"type": {
										"type": "reference",
										"id": 2537,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 2085,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"comment": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 6729,
															"character": 56
														}
													],
													"signatures": [
														{
															"id": 2086,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"comment": {},
															"parameters": [
																{
																	"id": 2087,
																	"name": "request",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "Description of a network request in the form of a HAR entry. See HAR specification for details.\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 2076,
																		"name": "Request"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										],
										"name": "chrome.events.Event"
									}
								},
								{
									"id": 2067,
									"name": "getHAR",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6720,
											"character": 26
										}
									],
									"signatures": [
										{
											"id": 2068,
											"name": "getHAR",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Returns HAR log that contains all known network requests."
											},
											"parameters": [
												{
													"id": 2069,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "A function that receives the HAR log when the request completes."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2070,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 6721,
																	"character": 15
																}
															],
															"signatures": [
																{
																	"id": 2071,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2072,
																			"name": "harLog",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "A HAR log. See HAR specification for details.\n"
																			},
																			"type": {
																				"type": "reflection",
																				"declaration": {
																					"id": 2073,
																					"name": "__type",
																					"kind": 65536,
																					"kindString": "Type literal",
																					"flags": {},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 6722,
																							"character": 15
																						}
																					],
																					"indexSignature": {
																						"id": 2074,
																						"name": "__index",
																						"kind": 8192,
																						"kindString": "Index signature",
																						"flags": {},
																						"parameters": [
																							{
																								"id": 2075,
																								"name": "name",
																								"kind": 32768,
																								"flags": {},
																								"type": {
																									"type": "intrinsic",
																									"name": "string"
																								}
																							}
																						],
																						"type": {
																							"type": "intrinsic",
																							"name": "any"
																						}
																					}
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										2076
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										2088,
										2084
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										2067
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 6693,
									"character": 35
								}
							]
						},
						{
							"id": 2092,
							"name": "panels",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"comment": {
								"shortText": "Use the <code>chrome.devtools.panels</code> API to integrate your extension\ninto Developer Tools window UI: create your own panels, access existing\npanels, and add sidebars.",
								"tags": [
									{
										"tag": "chrome-namespace",
										"text": "devtools.panels\n"
									}
								]
							},
							"children": [
								{
									"id": 2187,
									"name": "Button",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A button created by the extension."
									},
									"children": [
										{
											"id": 2193,
											"name": "onClicked",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Fired when the button is clicked."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 6957,
													"character": 15
												}
											],
											"type": {
												"type": "reference",
												"id": 2537,
												"typeArguments": [
													{
														"type": "reflection",
														"declaration": {
															"id": 2194,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 2195,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												],
												"name": "Event"
											}
										},
										{
											"id": 2188,
											"name": "update",
											"kind": 2048,
											"kindString": "Method",
											"flags": {},
											"signatures": [
												{
													"id": 2189,
													"name": "update",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "Updates the attributes of the button. If some of the arguments are omitted or\n<code>null</code>, the corresponding attributes are not updated."
													},
													"parameters": [
														{
															"id": 2190,
															"name": "iconPath",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "Path to the new icon of the button."
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 2191,
															"name": "tooltipText",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "Text shown as a tooltip when user hovers the mouse over the button."
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 2192,
															"name": "disabled",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "Whether the button is disabled.\n"
															},
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												2193
											]
										},
										{
											"title": "Methods",
											"kind": 2048,
											"children": [
												2188
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6939,
											"character": 27
										}
									]
								},
								{
									"id": 2115,
									"name": "ElementsPanel",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Represents the Elements panel."
									},
									"children": [
										{
											"id": 2123,
											"name": "onSelectionChanged",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Fired when an object is selected in the panel."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 6782,
													"character": 24
												}
											],
											"type": {
												"type": "reference",
												"id": 2537,
												"typeArguments": [
													{
														"type": "reflection",
														"declaration": {
															"id": 2124,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 2125,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												],
												"name": "Event"
											}
										},
										{
											"id": 2116,
											"name": "createSidebarPane",
											"kind": 2048,
											"kindString": "Method",
											"flags": {},
											"signatures": [
												{
													"id": 2117,
													"name": "createSidebarPane",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "Creates a pane within panel's sidebar."
													},
													"parameters": [
														{
															"id": 2118,
															"name": "title",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Text that is displayed in sidebar caption."
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 2119,
															"name": "callback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "A callback invoked when the sidebar is created."
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 2120,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"signatures": [
																		{
																			"id": 2121,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 2122,
																					"name": "result",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"comment": {
																						"text": "An ExtensionSidebarPane object for created sidebar pane.\n"
																					},
																					"type": {
																						"type": "reference",
																						"id": 2157,
																						"name": "ExtensionSidebarPane"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												2123
											]
										},
										{
											"title": "Methods",
											"kind": 2048,
											"children": [
												2116
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6764,
											"character": 34
										}
									]
								},
								{
									"id": 2137,
									"name": "ExtensionPanel",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Represents a panel created by extension."
									},
									"children": [
										{
											"id": 2154,
											"name": "onHidden",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Fired when the user switches away from the panel."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 6860,
													"character": 14
												}
											],
											"type": {
												"type": "reference",
												"id": 2537,
												"typeArguments": [
													{
														"type": "reflection",
														"declaration": {
															"id": 2155,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 2156,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												],
												"name": "Event"
											}
										},
										{
											"id": 2143,
											"name": "onSearch",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Fired upon a search action (start of a new search, search result navigation,\nor search being canceled)."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 6834,
													"character": 14
												}
											],
											"type": {
												"type": "reference",
												"id": 2537,
												"typeArguments": [
													{
														"type": "reflection",
														"declaration": {
															"id": 2144,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 2145,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"comment": {},
																	"parameters": [
																		{
																			"id": 2146,
																			"name": "action",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "Type of search action being performed."
																			},
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 2147,
																			"name": "queryString",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"text": "Query string (only for 'performSearch').\n"
																			},
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												],
												"name": "Event"
											}
										},
										{
											"id": 2148,
											"name": "onShown",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Fired when the user switches to the panel."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 6848,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"id": 2537,
												"typeArguments": [
													{
														"type": "reflection",
														"declaration": {
															"id": 2149,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 2150,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"comment": {},
																	"parameters": [
																		{
																			"id": 2151,
																			"name": "window",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "The JavaScript <code>window</code> object of panel's page.\n"
																			},
																			"type": {
																				"type": "reflection",
																				"declaration": {
																					"id": 2152,
																					"name": "__type",
																					"kind": 65536,
																					"kindString": "Type literal",
																					"flags": {},
																					"children": [
																						{
																							"id": 2153,
																							"name": "prototype",
																							"kind": 1024,
																							"kindString": "Property",
																							"flags": {
																								"isExternal": true
																							},
																							"sources": [
																								{
																									"fileName": "node_modules/typescript/lib/lib.dom.d.ts",
																									"line": 18599,
																									"character": 13
																								}
																							],
																							"type": {
																								"type": "reference",
																								"name": "Window"
																							}
																						}
																					],
																					"groups": [
																						{
																							"title": "Properties",
																							"kind": 1024,
																							"children": [
																								2153
																							]
																						}
																					]
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												],
												"name": "Event"
											}
										},
										{
											"id": 2138,
											"name": "createStatusBarButton",
											"kind": 2048,
											"kindString": "Method",
											"flags": {},
											"signatures": [
												{
													"id": 2139,
													"name": "createStatusBarButton",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "Appends a button to the status bar of the panel."
													},
													"parameters": [
														{
															"id": 2140,
															"name": "iconPath",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Path to the icon of the button. The file should contain a 64x24-pixel image composed of two 32x24 icons. The left icon is used when the button is inactive; the right icon is displayed when the button is pressed."
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 2141,
															"name": "tooltipText",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Text shown as a tooltip when user hovers the mouse over the button."
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 2142,
															"name": "disabled",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Whether the button is disabled.\n"
															},
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 2187,
														"name": "Button"
													}
												}
											]
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												2154,
												2143,
												2148
											]
										},
										{
											"title": "Methods",
											"kind": 2048,
											"children": [
												2138
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6816,
											"character": 35
										}
									]
								},
								{
									"id": 2157,
									"name": "ExtensionSidebarPane",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A sidebar created by the extension."
									},
									"children": [
										{
											"id": 2184,
											"name": "onHidden",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Fired when the sidebar pane becomes hidden as a result of the user switching\naway from the panel that hosts the sidebar pane."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 6931,
													"character": 14
												}
											],
											"type": {
												"type": "reference",
												"id": 2537,
												"typeArguments": [
													{
														"type": "reflection",
														"declaration": {
															"id": 2185,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 2186,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												],
												"name": "Event"
											}
										},
										{
											"id": 2178,
											"name": "onShown",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Fired when the sidebar pane becomes visible as a result of user switching to\nthe panel that hosts it."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 6918,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"id": 2537,
												"typeArguments": [
													{
														"type": "reflection",
														"declaration": {
															"id": 2179,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 2180,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"comment": {},
																	"parameters": [
																		{
																			"id": 2181,
																			"name": "window",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "The JavaScript <code>window</code> object of the sidebar page, if one was set with the <code>setPage()</code> method.\n"
																			},
																			"type": {
																				"type": "reflection",
																				"declaration": {
																					"id": 2182,
																					"name": "__type",
																					"kind": 65536,
																					"kindString": "Type literal",
																					"flags": {},
																					"children": [
																						{
																							"id": 2183,
																							"name": "prototype",
																							"kind": 1024,
																							"kindString": "Property",
																							"flags": {
																								"isExternal": true
																							},
																							"sources": [
																								{
																									"fileName": "node_modules/typescript/lib/lib.dom.d.ts",
																									"line": 18599,
																									"character": 13
																								}
																							],
																							"type": {
																								"type": "reference",
																								"name": "Window"
																							}
																						}
																					],
																					"groups": [
																						{
																							"title": "Properties",
																							"kind": 1024,
																							"children": [
																								2183
																							]
																						}
																					]
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												],
												"name": "Event"
											}
										},
										{
											"id": 2161,
											"name": "setExpression",
											"kind": 2048,
											"kindString": "Method",
											"flags": {},
											"signatures": [
												{
													"id": 2162,
													"name": "setExpression",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "Sets an expression that is evaluated within the inspected page. The result is\ndisplayed in the sidebar pane."
													},
													"parameters": [
														{
															"id": 2163,
															"name": "expression",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "An expression to be evaluated in context of the inspected page. JavaScript objects and DOM nodes are displayed in an expandable tree similar to the console/watch."
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 2164,
															"name": "rootTitle",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "An optional title for the root of the expression tree."
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 2165,
															"name": "callback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "A callback invoked after the sidebar pane is updated with the expression evaluation results.\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 2166,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"signatures": [
																		{
																			"id": 2167,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										},
										{
											"id": 2158,
											"name": "setHeight",
											"kind": 2048,
											"kindString": "Method",
											"flags": {},
											"signatures": [
												{
													"id": 2159,
													"name": "setHeight",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "Sets the height of the sidebar."
													},
													"parameters": [
														{
															"id": 2160,
															"name": "height",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "A CSS-like size specification, such as <code>'100px'</code> or <code>'12ex'</code>.\n"
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										},
										{
											"id": 2168,
											"name": "setObject",
											"kind": 2048,
											"kindString": "Method",
											"flags": {},
											"signatures": [
												{
													"id": 2169,
													"name": "setObject",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "Sets a JSON-compliant object to be displayed in the sidebar pane."
													},
													"parameters": [
														{
															"id": 2170,
															"name": "jsonObject",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "An object to be displayed in context of the inspected page. Evaluated in the context of the caller (API client)."
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 2171,
															"name": "rootTitle",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "An optional title for the root of the expression tree."
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 2172,
															"name": "callback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "A callback invoked after the sidebar is updated with the object.\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 2173,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"signatures": [
																		{
																			"id": 2174,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										},
										{
											"id": 2175,
											"name": "setPage",
											"kind": 2048,
											"kindString": "Method",
											"flags": {},
											"signatures": [
												{
													"id": 2176,
													"name": "setPage",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "Sets an HTML page to be displayed in the sidebar pane."
													},
													"parameters": [
														{
															"id": 2177,
															"name": "path",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Relative path of an extension page to display within the sidebar.\n"
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												2184,
												2178
											]
										},
										{
											"title": "Methods",
											"kind": 2048,
											"children": [
												2161,
												2158,
												2168,
												2175
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6868,
											"character": 41
										}
									]
								},
								{
									"id": 2126,
									"name": "SourcesPanel",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Represents the Sources panel."
									},
									"children": [
										{
											"id": 2134,
											"name": "onSelectionChanged",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Fired when an object is selected in the panel."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 6808,
													"character": 24
												}
											],
											"type": {
												"type": "reference",
												"id": 2537,
												"typeArguments": [
													{
														"type": "reflection",
														"declaration": {
															"id": 2135,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 2136,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												],
												"name": "Event"
											}
										},
										{
											"id": 2127,
											"name": "createSidebarPane",
											"kind": 2048,
											"kindString": "Method",
											"flags": {},
											"signatures": [
												{
													"id": 2128,
													"name": "createSidebarPane",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "Creates a pane within panel's sidebar."
													},
													"parameters": [
														{
															"id": 2129,
															"name": "title",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Text that is displayed in sidebar caption."
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 2130,
															"name": "callback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "A callback invoked when the sidebar is created."
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 2131,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"signatures": [
																		{
																			"id": 2132,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 2133,
																					"name": "result",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"comment": {
																						"text": "An ExtensionSidebarPane object for created sidebar pane.\n"
																					},
																					"type": {
																						"type": "reference",
																						"id": 2157,
																						"name": "ExtensionSidebarPane"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												2134
											]
										},
										{
											"title": "Methods",
											"kind": 2048,
											"children": [
												2127
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6790,
											"character": 33
										}
									]
								},
								{
									"id": 2196,
									"name": "elements",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"comment": {
										"shortText": "Elements panel."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6965,
											"character": 25
										}
									],
									"type": {
										"type": "reference",
										"id": 2115,
										"name": "ElementsPanel"
									}
								},
								{
									"id": 2197,
									"name": "sources",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"comment": {
										"shortText": "Sources panel."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6970,
											"character": 24
										}
									],
									"type": {
										"type": "reference",
										"id": 2126,
										"name": "SourcesPanel"
									}
								},
								{
									"id": 2198,
									"name": "themeName",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"comment": {
										"shortText": "The name of the color theme set in user's DevTools settings. Possible values:\n<code>default</code> (the default) and <code>dark</code>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6976,
											"character": 26
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2093,
									"name": "create",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 6987,
											"character": 26
										}
									],
									"signatures": [
										{
											"id": 2094,
											"name": "create",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Creates an extension panel."
											},
											"parameters": [
												{
													"id": 2095,
													"name": "title",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Title that is displayed next to the extension icon in the Developer Tools toolbar."
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 2096,
													"name": "iconPath",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Path of the panel's icon relative to the extension directory."
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 2097,
													"name": "pagePath",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Path of the panel's HTML page relative to the extension directory."
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 2098,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "A function that is called when the panel is created."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2099,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 6991,
																	"character": 16
																}
															],
															"signatures": [
																{
																	"id": 2100,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2101,
																			"name": "panel",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "An ExtensionPanel object representing the created panel.\n"
																			},
																			"type": {
																				"type": "reference",
																				"id": 2137,
																				"name": "ExtensionPanel"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 2108,
									"name": "openResource",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7017,
											"character": 32
										}
									],
									"signatures": [
										{
											"id": 2109,
											"name": "openResource",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Requests DevTools to open a URL in a Developer Tools panel."
											},
											"parameters": [
												{
													"id": 2110,
													"name": "url",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The URL of the resource to open."
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 2111,
													"name": "lineNumber",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Specifies the line number to scroll to when the resource is loaded."
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2112,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "A function that is called when the resource has been successfully loaded.\n"
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2113,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 7020,
																	"character": 16
																}
															],
															"signatures": [
																{
																	"id": 2114,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 2102,
									"name": "setOpenResourceHandler",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7004,
											"character": 42
										}
									],
									"signatures": [
										{
											"id": 2103,
											"name": "setOpenResourceHandler",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Specifies the function to be called when the user clicks a resource link in\nthe Developer Tools window. To unset the handler, either call the method with\nno parameters or pass null as the parameter."
											},
											"parameters": [
												{
													"id": 2104,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "A function that is called when the user clicks on a valid resource link in Developer Tools window. Note that if the user clicks an invalid URL or an XHR, this function is not called."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2105,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 7005,
																	"character": 16
																}
															],
															"signatures": [
																{
																	"id": 2106,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2107,
																			"name": "resource",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "A {@link devtools.inspectedWindow.Resource} object for the resource that was clicked.\n"
																			},
																			"type": {
																				"type": "reference",
																				"id": 2013,
																				"name": "devtools.inspectedWindow.Resource"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										2187,
										2115,
										2137,
										2157,
										2126
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										2196,
										2197,
										2198
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										2093,
										2108,
										2102
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 6760,
									"character": 34
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								1999,
								2066,
								2092
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 6475,
							"character": 27
						}
					]
				},
				{
					"id": 2199,
					"name": "dns",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.dns</code> API for dns resolution.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "dns"
							},
							{
								"tag": "alpha",
								"text": ""
							},
							{
								"tag": "chrome-permission",
								"text": "dns\n"
							}
						]
					},
					"children": [
						{
							"id": 2207,
							"name": "ResolveCallbackResolveInfo",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2209,
									"name": "address",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "A string representing the IP address literal. Supplied only if resultCode\nindicates success. Note that we presently return only IPv4 addresses."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7044,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2208,
									"name": "resultCode",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The result code. Zero indicates success."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7038,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2209,
										2208
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7034,
									"character": 47
								}
							]
						},
						{
							"id": 2200,
							"name": "resolve",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7054,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 2201,
									"name": "resolve",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Resolves the given hostname or IP address literal."
									},
									"parameters": [
										{
											"id": 2202,
											"name": "hostname",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The hostname to resolve."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2203,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Called when the resolution operation completes."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2204,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 7056,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 2205,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 2206,
																	"name": "resolveInfo",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 2207,
																		"name": "ResolveCallbackResolveInfo"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								2207
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								2200
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 7033,
							"character": 22
						}
					]
				},
				{
					"id": 2210,
					"name": "documentScan",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.documentScan</code> API to discover and retrieve\nimages\nfrom attached paper document scanners.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "documentScan"
							},
							{
								"tag": "chrome-permission",
								"text": "documentScan"
							},
							{
								"tag": "chrome-platform",
								"text": "chromeos\n"
							}
						]
					},
					"children": [
						{
							"id": 2218,
							"name": "ScanOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2220,
									"name": "maxImages",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The number of scanned images allowed (defaults to 1)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7083,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2219,
									"name": "mimeTypes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The MIME types that are accepted by the caller."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7078,
											"character": 15
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2220,
										2219
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7074,
									"character": 32
								}
							]
						},
						{
							"id": 2221,
							"name": "ScanResults",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2222,
									"name": "dataUrls",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The data image URLs in a form that can be passed as the \"src\" value to an\nimage tag."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7091,
											"character": 14
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 2223,
									"name": "mimeType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The MIME type of <code>dataUrls</code>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7096,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2222,
										2223
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7086,
									"character": 32
								}
							]
						},
						{
							"id": 2211,
							"name": "scan",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7107,
									"character": 24
								}
							],
							"signatures": [
								{
									"id": 2212,
									"name": "scan",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs a document scan.  On success, the PNG data will be sent to the\ncallback."
									},
									"parameters": [
										{
											"id": 2213,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Object containing scan parameters."
											},
											"type": {
												"type": "reference",
												"id": 2218,
												"name": "ScanOptions"
											}
										},
										{
											"id": 2214,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Called with the result and data from the scan."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2215,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 7109,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 2216,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 2217,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 2221,
																		"name": "ScanResults"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								2218,
								2221
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								2211
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 7073,
							"character": 31
						}
					]
				},
				{
					"id": 2224,
					"name": "dom",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.dom</code> API to access special DOM APIs for Extensions",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "dom\n"
							}
						]
					},
					"children": [
						{
							"id": 2225,
							"name": "openOrClosedShadowRoot",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7130,
									"character": 42
								}
							],
							"signatures": [
								{
									"id": 2226,
									"name": "openOrClosedShadowRoot",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the open shadow root or the closed shadow root hosted by the specified\nelement. If the element doesn't attach the shadow root, it will return null.",
										"returns": "See <a href='https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot'>https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot</a>\n"
									},
									"parameters": [
										{
											"id": 2227,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"name": "HTMLElement"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2228,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 7132,
													"character": 6
												}
											],
											"indexSignature": {
												"id": 2229,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 2230,
														"name": "name",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								2225
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 7122,
							"character": 22
						}
					]
				},
				{
					"id": 2231,
					"name": "downloads",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.downloads</code> API to programmatically initiate,\nmonitor, manipulate, and search for downloads.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "downloads"
							},
							{
								"tag": "chrome-permission",
								"text": "downloads\n"
							}
						]
					},
					"children": [
						{
							"id": 2383,
							"name": "BooleanDelta",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2385,
									"name": "current",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7565,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2384,
									"name": "previous",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7563,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2385,
										2384
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7562,
									"character": 33
								}
							]
						},
						{
							"id": 2380,
							"name": "DoubleDelta",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2382,
									"name": "current",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7559,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2381,
									"name": "previous",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7557,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2382,
										2381
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7556,
									"character": 32
								}
							]
						},
						{
							"id": 2386,
							"name": "DownloadDelta",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2396,
									"name": "canResume",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The change in <code>canResume</code>, if any."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7617,
											"character": 15
										}
									],
									"type": {
										"type": "reference",
										"id": 2383,
										"name": "BooleanDelta"
									}
								},
								{
									"id": 2391,
									"name": "danger",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The change in <code>danger</code>, if any."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7592,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 2377,
										"name": "StringDelta"
									}
								},
								{
									"id": 2394,
									"name": "endTime",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The change in <code>endTime</code>, if any."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7607,
											"character": 13
										}
									],
									"type": {
										"type": "reference",
										"id": 2377,
										"name": "StringDelta"
									}
								},
								{
									"id": 2398,
									"name": "error",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The change in <code>error</code>, if any."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7627,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"id": 2377,
										"name": "StringDelta"
									}
								},
								{
									"id": 2401,
									"name": "exists",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The change in <code>exists</code>, if any."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7642,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 2383,
										"name": "BooleanDelta"
									}
								},
								{
									"id": 2400,
									"name": "fileSize",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The change in <code>fileSize</code>, if any."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7637,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"id": 2380,
										"name": "DoubleDelta"
									}
								},
								{
									"id": 2390,
									"name": "filename",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The change in <code>filename</code>, if any."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7587,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"id": 2377,
										"name": "StringDelta"
									}
								},
								{
									"id": 2389,
									"name": "finalUrl",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The change in <code>finalUrl</code>, if any."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7582,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"id": 2377,
										"name": "StringDelta"
									}
								},
								{
									"id": 2387,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The <code>id</code> of the {@link DownloadItem} that changed."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7572,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2392,
									"name": "mime",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The change in <code>mime</code>, if any."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7597,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 2377,
										"name": "StringDelta"
									}
								},
								{
									"id": 2397,
									"name": "paused",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The change in <code>paused</code>, if any."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7622,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 2383,
										"name": "BooleanDelta"
									}
								},
								{
									"id": 2393,
									"name": "startTime",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The change in <code>startTime</code>, if any."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7602,
											"character": 15
										}
									],
									"type": {
										"type": "reference",
										"id": 2377,
										"name": "StringDelta"
									}
								},
								{
									"id": 2395,
									"name": "state",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The change in <code>state</code>, if any."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7612,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"id": 2377,
										"name": "StringDelta"
									}
								},
								{
									"id": 2399,
									"name": "totalBytes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The change in <code>totalBytes</code>, if any."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7632,
											"character": 16
										}
									],
									"type": {
										"type": "reference",
										"id": 2380,
										"name": "DoubleDelta"
									}
								},
								{
									"id": 2388,
									"name": "url",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The change in <code>url</code>, if any."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7577,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"id": 2377,
										"name": "StringDelta"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2396,
										2391,
										2394,
										2398,
										2401,
										2400,
										2390,
										2389,
										2387,
										2392,
										2397,
										2393,
										2395,
										2399,
										2388
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7568,
									"character": 34
								}
							]
						},
						{
							"id": 2327,
							"name": "DownloadItem",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2347,
									"name": "byExtensionId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The identifier for the extension that initiated this download if this\ndownload was initiated by an extension. Does not change once it is set."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7382,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2348,
									"name": "byExtensionName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The localized name of the extension that initiated this download if this\ndownload was initiated by an extension. May change if the extension changes\nits name or if the user changes their locale."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7389,
											"character": 21
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2343,
									"name": "bytesReceived",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Number of bytes received so far from the host, without considering file\ncompression."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7352,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2341,
									"name": "canResume",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "True if the download is in progress and paused, or else if it is interrupted\nand can be resumed starting from where it was interrupted."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7337,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2334,
									"name": "danger",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Indication of whether this download is thought to be safe or known to be\nsuspicious."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7291,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 2325,
										"name": "DangerType"
									}
								},
								{
									"id": 2337,
									"name": "endTime",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The time when the download ended in ISO 8601 format. May be passed directly\nto the Date constructor: <code>chrome.downloads.search({},\nfunction(items){items.forEach(function(item){if (item.endTime)\nconsole.log(new Date(item.endTime))})})</code>"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7312,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2342,
									"name": "error",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Why the download was interrupted. Several kinds of HTTP errors may be grouped\nunder one of the errors beginning with <code>SERVER_</code>. Errors relating\nto the network begin with <code>NETWORK_</code>, errors relating to the\nprocess of writing the file to the file system begin with <code>FILE_</code>,\nand interruptions initiated by the user begin with <code>USER_</code>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7346,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"id": 2316,
										"name": "InterruptReason"
									}
								},
								{
									"id": 2338,
									"name": "estimatedEndTime",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Estimated time when the download will complete in ISO 8601 format. May be\npassed directly to the Date constructor: <code>chrome.downloads.search({},\nfunction(items){items.forEach(function(item){if (item.estimatedEndTime)\nconsole.log(new Date(item.estimatedEndTime))})})</code>"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7320,
											"character": 22
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2346,
									"name": "exists",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Whether the downloaded file still exists. This information may be out of date\nbecause Chrome does not automatically watch for file removal. Call {@link\nsearch}() in order to trigger the check for file existence. When the\nexistence check completes, if the file has been deleted, then an {@link\nonChanged} event will fire. Note that {@link search}() does not wait for the\nexistence check to finish before returning, so results from {@link search}()\nmay not accurately reflect the file system. Also, {@link search}() may be\ncalled as often as necessary, but will not check for file existence any more\nfrequently than once every 10 seconds."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7376,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2345,
									"name": "fileSize",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Number of bytes in the whole file post-decompression, or -1 if unknown."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7363,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2332,
									"name": "filename",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Absolute local path."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7279,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2330,
									"name": "finalUrl",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The absolute URL that this download is being made from, after all redirects."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7269,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2328,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "An identifier that is persistent across browser sessions."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7259,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2333,
									"name": "incognito",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "False if this download is recorded in the history, true if it is not\nrecorded."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7285,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2335,
									"name": "mime",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The file's MIME type."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7296,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2340,
									"name": "paused",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "True if the download has stopped reading data from the host, but kept the\nconnection open."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7331,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2331,
									"name": "referrer",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Absolute URL."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7274,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2336,
									"name": "startTime",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The time when the download began in ISO 8601 format. May be passed directly\nto the Date constructor: <code>chrome.downloads.search({},\nfunction(items){items.forEach(function(item){console.log(new\nDate(item.startTime))})})</code>"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7304,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2339,
									"name": "state",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Indicates whether the download is progressing, interrupted, or complete."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7325,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"id": 2326,
										"name": "State"
									}
								},
								{
									"id": 2344,
									"name": "totalBytes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Number of bytes in the whole file, without considering file compression, or\n-1 if unknown."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7358,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2329,
									"name": "url",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The absolute URL that this download initiated from, before any redirects."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7264,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2347,
										2348,
										2343,
										2341,
										2334,
										2337,
										2342,
										2338,
										2346,
										2345,
										2332,
										2330,
										2328,
										2333,
										2335,
										2340,
										2331,
										2336,
										2339,
										2344,
										2329
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7255,
									"character": 33
								}
							]
						},
						{
							"id": 2317,
							"name": "DownloadOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2324,
									"name": "body",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Post body."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7229,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2320,
									"name": "conflictAction",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The action to take if <code>filename</code> already exists."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7205,
											"character": 20
										}
									],
									"type": {
										"type": "reference",
										"id": 2311,
										"name": "FilenameConflictAction"
									}
								},
								{
									"id": 2319,
									"name": "filename",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "A file path relative to the Downloads directory to contain the downloaded\nfile, possibly containing subdirectories. Absolute paths, empty paths, and\npaths containing back-references \"..\" will cause an error. {@link\nonDeterminingFilename} allows suggesting a filename after the file's MIME\ntype and a tentative filename have been determined."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7200,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2323,
									"name": "headers",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Extra HTTP headers to send with the request if the URL uses the HTTP[s]\nprotocol. Each header is represented as a dictionary containing the keys\n<code>name</code> and either <code>value</code> or <code>binaryValue</code>,\nrestricted to those allowed by XMLHttpRequest."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7224,
											"character": 13
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 2308,
											"name": "HeaderNameValuePair"
										}
									}
								},
								{
									"id": 2322,
									"name": "method",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The HTTP method to use if the URL uses the HTTP[S] protocol."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7216,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 2315,
										"name": "HttpMethod"
									}
								},
								{
									"id": 2321,
									"name": "saveAs",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Use a file-chooser to allow the user to select a filename regardless of\nwhether <code>filename</code> is set or already exists."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7211,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2318,
									"name": "url",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The URL to download."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7191,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2324,
										2320,
										2319,
										2323,
										2322,
										2321,
										2318
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7187,
									"character": 36
								}
							]
						},
						{
							"id": 2349,
							"name": "DownloadQuery",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2373,
									"name": "bytesReceived",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Number of bytes received so far from the host, without considering file\ncompression."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7531,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2366,
									"name": "danger",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Indication of whether this download is thought to be safe or known to be\nsuspicious."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7494,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 2325,
										"name": "DangerType"
									}
								},
								{
									"id": 2369,
									"name": "endTime",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The time when the download ended in ISO 8601 format."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7509,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2354,
									"name": "endedAfter",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Limits results to {@link DownloadItem} that ended after the given ms since\nthe epoch."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7423,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2353,
									"name": "endedBefore",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Limits results to {@link DownloadItem} that ended before the given ms since\nthe epoch."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7417,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2372,
									"name": "error",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Why a download was interrupted."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7525,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"id": 2316,
										"name": "InterruptReason"
									}
								},
								{
									"id": 2376,
									"name": "exists",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Whether the downloaded file exists;"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7547,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2375,
									"name": "fileSize",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Number of bytes in the whole file post-decompression, or -1 if unknown."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7542,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2365,
									"name": "filename",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Absolute local path."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7488,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2357,
									"name": "filenameRegex",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Limits results to {@link DownloadItem} whose <code>filename</code> matches\nthe given regular expression."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7441,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2364,
									"name": "finalUrl",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The absolute URL that this download is being made from, after all redirects."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7483,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2359,
									"name": "finalUrlRegex",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Limits results to {@link DownloadItem} whose <code>finalUrl</code> matches\nthe given regular expression."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7453,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2362,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The <code>id</code> of the {@link DownloadItem} to query."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7473,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2360,
									"name": "limit",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The maximum number of matching {@link DownloadItem} returned. Defaults to\n1000. Set to 0 in order to return all matching {@link DownloadItem}. See\n{@link search} for how to page through results."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7460,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2367,
									"name": "mime",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The file's MIME type."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7499,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2361,
									"name": "orderBy",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Set elements of this array to {@link DownloadItem} properties in order to\nsort search results. For example, setting <code>orderBy=['startTime']</code>\nsorts the {@link DownloadItem} by their start time in ascending order. To\nspecify descending order, prefix with a hyphen: '-startTime'."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7468,
											"character": 13
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 2371,
									"name": "paused",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "True if the download has stopped reading data from the host, but kept the\nconnection open."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7520,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2350,
									"name": "query",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "This array of search terms limits results to {@link DownloadItem} whose\n<code>filename</code> or <code>url</code> or <code>finalUrl</code> contain\nall of the search terms that do not begin with a dash '-' and none of the\nsearch terms that do begin with a dash."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7399,
											"character": 11
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 2368,
									"name": "startTime",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The time when the download began in ISO 8601 format."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7504,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2352,
									"name": "startedAfter",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Limits results to {@link DownloadItem} that started after the given ms since\nthe epoch."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7411,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2351,
									"name": "startedBefore",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Limits results to {@link DownloadItem} that started before the given ms since\nthe epoch."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7405,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2370,
									"name": "state",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Indicates whether the download is progressing, interrupted, or complete."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7514,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"id": 2326,
										"name": "State"
									}
								},
								{
									"id": 2374,
									"name": "totalBytes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Number of bytes in the whole file, without considering file compression, or\n-1 if unknown."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7537,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2355,
									"name": "totalBytesGreater",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Limits results to {@link DownloadItem} whose <code>totalBytes</code> is\ngreater than the given integer."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7429,
											"character": 23
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2356,
									"name": "totalBytesLess",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Limits results to {@link DownloadItem} whose <code>totalBytes</code> is less\nthan the given integer."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7435,
											"character": 20
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2363,
									"name": "url",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The absolute URL that this download initiated from, before any redirects."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7478,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2358,
									"name": "urlRegex",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Limits results to {@link DownloadItem} whose <code>url</code> matches the\ngiven regular expression."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7447,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2373,
										2366,
										2369,
										2354,
										2353,
										2372,
										2376,
										2375,
										2365,
										2357,
										2364,
										2359,
										2362,
										2360,
										2367,
										2361,
										2371,
										2350,
										2368,
										2352,
										2351,
										2370,
										2374,
										2355,
										2356,
										2363,
										2358
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7392,
									"character": 34
								}
							]
						},
						{
							"id": 2312,
							"name": "FilenameSuggestion",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2314,
									"name": "conflictAction",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The action to take if <code>filename</code> already exists."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7180,
											"character": 20
										}
									],
									"type": {
										"type": "reference",
										"id": 2311,
										"name": "FilenameConflictAction"
									}
								},
								{
									"id": 2313,
									"name": "filename",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The {@link DownloadItem}'s new target {@link DownloadItem.filename}, as a\npath relative to the user's default Downloads directory, possibly containing\nsubdirectories. Absolute paths, empty paths, and paths containing\nback-references \"..\" will be ignored. <code>filename</code> is ignored if\nthere are any {@link onDeterminingFilename} listeners registered by any\nextensions."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7175,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2314,
										2313
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7166,
									"character": 39
								}
							]
						},
						{
							"id": 2402,
							"name": "GetFileIconOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2403,
									"name": "size",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The size of the returned icon. The icon will be square with dimensions size *\nsize pixels. The default and largest size for the icon is 32x32 pixels. The\nonly supported sizes are 16 and 32. It is an error to specify any other size."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7651,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2403
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7645,
									"character": 39
								}
							]
						},
						{
							"id": 2308,
							"name": "HeaderNameValuePair",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2309,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Name of the HTTP header."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7149,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2310,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Value of the HTTP header."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7154,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2309,
										2310
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7145,
									"character": 40
								}
							]
						},
						{
							"id": 2377,
							"name": "StringDelta",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2379,
									"name": "current",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7553,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2378,
									"name": "previous",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7551,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2379,
										2378
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7550,
									"character": 32
								}
							]
						},
						{
							"id": 2325,
							"name": "DangerType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "<dl><dt>file</dt>     <dd>The download's filename is suspicious.</dd>\n<dt>url</dt>     <dd>The download's URL is known to be malicious.</dd>\n<dt>content</dt>     <dd>The downloaded file is known to be malicious.</dd>\n<dt>uncommon</dt>     <dd>The download's URL is not commonly downloaded and\ncould be     dangerous.</dd>     <dt>host</dt>     <dd>The download came from\na host known to distribute malicious     binaries and is likely\ndangerous.</dd>     <dt>unwanted</dt>     <dd>The download is potentially\nunwanted or unsafe. E.g. it could make     changes to browser or computer\nsettings.</dd>     <dt>safe</dt>     <dd>The download presents no known\ndanger to the user's computer.</dd>     <dt>accepted</dt>     <dd>The user\nhas accepted the dangerous download.</dd> </dl>"
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7245,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "file"
									},
									{
										"type": "literal",
										"value": "url"
									},
									{
										"type": "literal",
										"value": "content"
									},
									{
										"type": "literal",
										"value": "uncommon"
									},
									{
										"type": "literal",
										"value": "host"
									},
									{
										"type": "literal",
										"value": "unwanted"
									},
									{
										"type": "literal",
										"value": "safe"
									},
									{
										"type": "literal",
										"value": "accepted"
									}
								]
							}
						},
						{
							"id": 2311,
							"name": "FilenameConflictAction",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "<dl><dt>uniquify</dt>     <dd>To avoid duplication, the <code>filename</code>\nis changed to     include a counter before the filename extension.</dd>\n<dt>overwrite</dt>     <dd>The existing file will be overwritten with the new\nfile.</dd>     <dt>prompt</dt>     <dd>The user will be prompted with a file\nchooser dialog.</dd> </dl>"
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7164,
									"character": 38
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "uniquify"
									},
									{
										"type": "literal",
										"value": "overwrite"
									},
									{
										"type": "literal",
										"value": "prompt"
									}
								]
							}
						},
						{
							"id": 2315,
							"name": "HttpMethod",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7183,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "GET"
									},
									{
										"type": "literal",
										"value": "POST"
									}
								]
							}
						},
						{
							"id": 2316,
							"name": "InterruptReason",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7185,
									"character": 31
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "FILE_FAILED"
									},
									{
										"type": "literal",
										"value": "FILE_ACCESS_DENIED"
									},
									{
										"type": "literal",
										"value": "FILE_NO_SPACE"
									},
									{
										"type": "literal",
										"value": "FILE_NAME_TOO_LONG"
									},
									{
										"type": "literal",
										"value": "FILE_TOO_LARGE"
									},
									{
										"type": "literal",
										"value": "FILE_VIRUS_INFECTED"
									},
									{
										"type": "literal",
										"value": "FILE_TRANSIENT_ERROR"
									},
									{
										"type": "literal",
										"value": "FILE_BLOCKED"
									},
									{
										"type": "literal",
										"value": "FILE_SECURITY_CHECK_FAILED"
									},
									{
										"type": "literal",
										"value": "FILE_TOO_SHORT"
									},
									{
										"type": "literal",
										"value": "FILE_HASH_MISMATCH"
									},
									{
										"type": "literal",
										"value": "FILE_SAME_AS_SOURCE"
									},
									{
										"type": "literal",
										"value": "NETWORK_FAILED"
									},
									{
										"type": "literal",
										"value": "NETWORK_TIMEOUT"
									},
									{
										"type": "literal",
										"value": "NETWORK_DISCONNECTED"
									},
									{
										"type": "literal",
										"value": "NETWORK_SERVER_DOWN"
									},
									{
										"type": "literal",
										"value": "NETWORK_INVALID_REQUEST"
									},
									{
										"type": "literal",
										"value": "SERVER_FAILED"
									},
									{
										"type": "literal",
										"value": "SERVER_NO_RANGE"
									},
									{
										"type": "literal",
										"value": "SERVER_BAD_CONTENT"
									},
									{
										"type": "literal",
										"value": "SERVER_UNAUTHORIZED"
									},
									{
										"type": "literal",
										"value": "SERVER_CERT_PROBLEM"
									},
									{
										"type": "literal",
										"value": "SERVER_FORBIDDEN"
									},
									{
										"type": "literal",
										"value": "SERVER_UNREACHABLE"
									},
									{
										"type": "literal",
										"value": "SERVER_CONTENT_LENGTH_MISMATCH"
									},
									{
										"type": "literal",
										"value": "SERVER_CROSS_ORIGIN_REDIRECT"
									},
									{
										"type": "literal",
										"value": "USER_CANCELED"
									},
									{
										"type": "literal",
										"value": "USER_SHUTDOWN"
									},
									{
										"type": "literal",
										"value": "CRASH"
									}
								]
							}
						},
						{
							"id": 2326,
							"name": "State",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "<dl><dt>in_progress</dt>     <dd>The download is currently receiving data\nfrom the server.</dd>     <dt>interrupted</dt>     <dd>An error broke the\nconnection with the file host.</dd>     <dt>complete</dt>     <dd>The\ndownload completed successfully.</dd> </dl>"
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7253,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "in_progress"
									},
									{
										"type": "literal",
										"value": "interrupted"
									},
									{
										"type": "literal",
										"value": "complete"
									}
								]
							}
						},
						{
							"id": 2412,
							"name": "onChanged",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "When any of a {@link DownloadItem}'s properties except\n<code>bytesReceived</code> and <code>estimatedEndTime</code> changes, this\nevent fires with the <code>downloadId</code> and an object containing the\nproperties that changed."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7900,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 2413,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 7900,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 2414,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 2415,
															"name": "downloadDelta",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reference",
																"id": 2386,
																"name": "DownloadDelta"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 2404,
							"name": "onCreated",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "This event fires with the {@link DownloadItem} object when a download begins."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7872,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 2405,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 7872,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 2406,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 2407,
															"name": "downloadItem",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reference",
																"id": 2327,
																"name": "DownloadItem"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 2416,
							"name": "onDeterminingFilename",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "During the filename determination process, extensions will be given the\nopportunity to override the target {@link DownloadItem.filename}. Each\nextension may not register more than one listener for this event. Each\nlistener must call <code>suggest</code> exactly once, either synchronously or\nasynchronously. If the listener calls <code>suggest</code> asynchronously,\nthen it must return <code>true</code>. If the listener neither calls\n<code>suggest</code> synchronously nor returns <code>true</code>, then\n<code>suggest</code> will be called automatically. The {@link DownloadItem}\nwill not complete until all listeners have called <code>suggest</code>.\nListeners may call <code>suggest</code> without any arguments in order to\nallow the download to use <code>downloadItem.filename</code> for its\nfilename, or pass a <code>suggestion</code> object to <code>suggest</code> in\norder to override the target filename. If more than one extension overrides\nthe filename, then the last extension installed whose listener passes a\n<code>suggestion</code> object to <code>suggest</code> wins. In order to\navoid confusion regarding which extension will win, users should not install\nextensions that may conflict. If the download is initiated by {@link\ndownload} and the target filename is known before the MIME type and tentative\nfilename have been determined, pass <code>filename</code> to {@link download}\ninstead."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7931,
									"character": 38
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 2417,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 7931,
													"character": 60
												}
											],
											"signatures": [
												{
													"id": 2418,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 2419,
															"name": "downloadItem",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reference",
																"id": 2327,
																"name": "DownloadItem"
															}
														},
														{
															"id": 2420,
															"name": "suggest",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 2421,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 7937,
																			"character": 16
																		}
																	],
																	"signatures": [
																		{
																			"id": 2422,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 2423,
																					"name": "suggestion",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {
																						"isOptional": true
																					},
																					"type": {
																						"type": "reference",
																						"id": 2312,
																						"name": "FilenameSuggestion"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 2408,
							"name": "onErased",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fires with the <code>downloadId</code> when a download is erased from\nhistory."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7885,
									"character": 25
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 2409,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 7885,
													"character": 47
												}
											],
											"signatures": [
												{
													"id": 2410,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 2411,
															"name": "downloadId",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "The <code>id</code> of the {@link DownloadItem} that was erased.\n"
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 2299,
							"name": "acceptDanger",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7850,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 2300,
									"name": "acceptDanger",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Prompt the user to accept a dangerous download. Can only be called from a\nvisible context (tab, window, or page/browser action popup). Does not\nautomatically accept dangerous downloads. If the download is accepted, then\nan {@link onChanged} event will fire, otherwise nothing will happen. When all\nthe data is fetched into a temporary file and either the download is not\ndangerous or the danger has been accepted, then the temporary file is renamed\nto the target filename, the |state| changes to 'complete', and {@link\nonChanged} fires."
									},
									"parameters": [
										{
											"id": 2301,
											"name": "downloadId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The identifier for the {@link DownloadItem}."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 2302,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called when the danger prompt dialog closes.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2303,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 7852,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 2304,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 2258,
							"name": "cancel",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7730,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 2259,
									"name": "cancel",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Cancel a download. When <code>callback</code> is run, the download is\ncancelled, completed, interrupted or doesn't exist anymore."
									},
									"parameters": [
										{
											"id": 2260,
											"name": "downloadId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The id of the download to cancel."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 2261,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called when the cancel request is completed.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2262,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 7732,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 2263,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 2232,
							"name": "download",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7671,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 2233,
									"name": "download",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Download a URL. If the URL uses the HTTP[S] protocol, then the request will\ninclude all cookies currently set for its hostname. If both\n<code>filename</code> and <code>saveAs</code> are specified, then the Save As\ndialog will be displayed, pre-populated with the specified\n<code>filename</code>. If the download started successfully,\n<code>callback</code> will be called with the new {@link DownloadItem}'s\n<code>downloadId</code>. If there was an error starting the download, then\n<code>callback</code> will be called with <code>downloadId=undefined</code>\nand {@link runtime.lastError} will contain a descriptive string. The error\nstrings are not guaranteed to remain backwards compatible between releases.\nExtensions must not parse it."
									},
									"parameters": [
										{
											"id": 2234,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "What to download and how."
											},
											"type": {
												"type": "reference",
												"id": 2317,
												"name": "DownloadOptions"
											}
										},
										{
											"id": 2235,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called with the id of the new {@link DownloadItem}."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2236,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 7673,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 2237,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 2238,
																	"name": "downloadId",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 2286,
							"name": "erase",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7818,
									"character": 25
								}
							],
							"signatures": [
								{
									"id": 2287,
									"name": "erase",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Erase matching {@link DownloadItem} from history without deleting the\ndownloaded file. An {@link onErased} event will fire for each {@link\nDownloadItem} that matches <code>query</code>, then <code>callback</code>\nwill be called."
									},
									"parameters": [
										{
											"id": 2288,
											"name": "query",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 2349,
												"name": "DownloadQuery"
											}
										},
										{
											"id": 2289,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2290,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 7820,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 2291,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 2292,
																	"name": "erasedIds",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "number"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 2264,
							"name": "getFileIcon",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7751,
									"character": 31
								}
							],
							"signatures": [
								{
									"id": 2265,
									"name": "getFileIcon",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieve an icon for the specified download. For new downloads, file icons\nare available after the {@link onCreated} event has been received. The image\nreturned by this function while a download is in progress may be different\nfrom the image returned after the download is complete. Icon retrieval is\ndone by querying the underlying operating system or toolkit depending on the\nplatform. The icon that is returned will therefore depend on a number of\nfactors including state of the download, platform, registered file types and\nvisual theme. If a file icon cannot be determined, {@link runtime.lastError}\nwill contain an error message."
									},
									"parameters": [
										{
											"id": 2266,
											"name": "downloadId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The identifier for the download."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 2267,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 2402,
												"name": "GetFileIconOptions"
											}
										},
										{
											"id": 2268,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A URL to an image that represents the download."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2269,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 7754,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 2270,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 2271,
																	"name": "iconURL",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								},
								{
									"id": 2272,
									"name": "getFileIcon",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieve an icon for the specified download. For new downloads, file icons\nare available after the {@link onCreated} event has been received. The image\nreturned by this function while a download is in progress may be different\nfrom the image returned after the download is complete. Icon retrieval is\ndone by querying the underlying operating system or toolkit depending on the\nplatform. The icon that is returned will therefore depend on a number of\nfactors including state of the download, platform, registered file types and\nvisual theme. If a file icon cannot be determined, {@link runtime.lastError}\nwill contain an error message."
									},
									"parameters": [
										{
											"id": 2273,
											"name": "downloadId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The identifier for the download."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 2274,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A URL to an image that represents the download."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2275,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 7776,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 2276,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 2277,
																	"name": "iconURL",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 2278,
							"name": "open",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7790,
									"character": 24
								}
							],
							"signatures": [
								{
									"id": 2279,
									"name": "open",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Open the downloaded file now if the {@link DownloadItem} is complete;\notherwise returns an error through {@link runtime.lastError}. Requires the\n<code>\"downloads.open\"</code> permission in addition to the\n<code>\"downloads\"</code> permission. An {@link onChanged} event will fire\nwhen the item is opened for the first time."
									},
									"parameters": [
										{
											"id": 2280,
											"name": "downloadId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The identifier for the downloaded file.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 2246,
							"name": "pause",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7705,
									"character": 25
								}
							],
							"signatures": [
								{
									"id": 2247,
									"name": "pause",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Pause the download. If the request was successful the download is in a paused\nstate. Otherwise {@link runtime.lastError} contains an error message. The\nrequest will fail if the download is not active."
									},
									"parameters": [
										{
											"id": 2248,
											"name": "downloadId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The id of the download to pause."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 2249,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called when the pause request is completed.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2250,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 7707,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 2251,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 2293,
							"name": "removeFile",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7832,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 2294,
									"name": "removeFile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Remove the downloaded file if it exists and the {@link DownloadItem} is\ncomplete; otherwise return an error through {@link runtime.lastError}."
									},
									"parameters": [
										{
											"id": 2295,
											"name": "downloadId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 2296,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2297,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 7834,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 2298,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 2252,
							"name": "resume",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7718,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 2253,
									"name": "resume",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Resume a paused download. If the request was successful the download is in\nprogress and unpaused. Otherwise {@link runtime.lastError} contains an error\nmessage. The request will fail if the download is not active."
									},
									"parameters": [
										{
											"id": 2254,
											"name": "downloadId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The id of the download to resume."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 2255,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called when the resume request is completed.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2256,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 7720,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 2257,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 2239,
							"name": "search",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7690,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 2240,
									"name": "search",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Find {@link DownloadItem}. Set <code>query</code> to the empty object to get\nall {@link DownloadItem}. To get a specific {@link DownloadItem}, set only\nthe <code>id</code> field. To page through a large number of items, set\n<code>orderBy: ['-startTime']</code>, set <code>limit</code> to the number of\nitems per page, and set <code>startedAfter</code> to the\n<code>startTime</code> of the last item from the last page."
									},
									"parameters": [
										{
											"id": 2241,
											"name": "query",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 2349,
												"name": "DownloadQuery"
											}
										},
										{
											"id": 2242,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2243,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 7692,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 2244,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 2245,
																	"name": "results",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 2327,
																			"name": "DownloadItem"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 2305,
							"name": "setShelfEnabled",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7865,
									"character": 35
								}
							],
							"signatures": [
								{
									"id": 2306,
									"name": "setShelfEnabled",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Enable or disable the gray shelf at the bottom of every window associated\nwith the current browser profile. The shelf will be disabled as long as at\nleast one extension has disabled it. Enabling the shelf while at least one\nother extension has disabled it will return an error through {@link\nruntime.lastError}. Requires the <code>\"downloads.shelf\"</code> permission in\naddition to the <code>\"downloads\"</code> permission."
									},
									"parameters": [
										{
											"id": 2307,
											"name": "enabled",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 2281,
							"name": "show",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7799,
									"character": 24
								}
							],
							"signatures": [
								{
									"id": 2282,
									"name": "show",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Show the downloaded file in its folder in a file manager."
									},
									"parameters": [
										{
											"id": 2283,
											"name": "downloadId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The identifier for the downloaded file.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 2284,
							"name": "showDefaultFolder",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7806,
									"character": 37
								}
							],
							"signatures": [
								{
									"id": 2285,
									"name": "showDefaultFolder",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Show the default Downloads folder in a file manager."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								2383,
								2380,
								2386,
								2327,
								2317,
								2349,
								2312,
								2402,
								2308,
								2377
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								2325,
								2311,
								2315,
								2316,
								2326
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								2412,
								2404,
								2416,
								2408
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								2299,
								2258,
								2232,
								2286,
								2264,
								2278,
								2246,
								2293,
								2252,
								2239,
								2305,
								2281,
								2284
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 7144,
							"character": 28
						}
					]
				},
				{
					"id": 2424,
					"name": "enterprise",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 2425,
							"name": "deviceAttributes",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"comment": {
								"shortText": "Use the <code>chrome.enterprise.deviceAttributes</code> API to read device\nattributes.\nNote: This API is only available to extensions force-installed\nby enterprise policy.",
								"tags": [
									{
										"tag": "chrome-namespace",
										"text": "enterprise.deviceAttributes"
									},
									{
										"tag": "chrome-platform",
										"text": "chromeos"
									},
									{
										"tag": "chrome-platform",
										"text": "lacros"
									},
									{
										"tag": "chrome-permission",
										"text": "enterprise.deviceAttributes\n"
									}
								]
							},
							"children": [
								{
									"id": 2444,
									"name": "getDeviceAnnotatedLocation",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8009,
											"character": 46
										}
									],
									"signatures": [
										{
											"id": 2445,
											"name": "getDeviceAnnotatedLocation",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Fetches the administrator-annotated Location. If the current user is not\naffiliated or no Annotated Location has been set by the administrator,\nreturns an empty string."
											},
											"parameters": [
												{
													"id": 2446,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Called with the Annotated Location of the device."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2447,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 8010,
																	"character": 15
																}
															],
															"signatures": [
																{
																	"id": 2448,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2449,
																			"name": "annotatedLocation",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "\n"
																			},
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 2438,
									"name": "getDeviceAssetId",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7995,
											"character": 36
										}
									],
									"signatures": [
										{
											"id": 2439,
											"name": "getDeviceAssetId",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Fetches the administrator-annotated Asset Id. If the current user is not\naffiliated or no Asset Id has been set by the administrator, returns an empty\nstring."
											},
											"parameters": [
												{
													"id": 2440,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Called with the Asset ID of the device."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2441,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 7996,
																	"character": 15
																}
															],
															"signatures": [
																{
																	"id": 2442,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2443,
																			"name": "assetId",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "\n"
																			},
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 2450,
									"name": "getDeviceHostname",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8023,
											"character": 37
										}
									],
									"signatures": [
										{
											"id": 2451,
											"name": "getDeviceHostname",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Fetches the device's hostname as set by DeviceHostnameTemplate policy. If the\ncurrent user is not affiliated or no hostname has been set by the the\nenterprise policy, returns an empty string."
											},
											"parameters": [
												{
													"id": 2452,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Called with hostname of the device."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2453,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 8024,
																	"character": 15
																}
															],
															"signatures": [
																{
																	"id": 2454,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2455,
																			"name": "hostname",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "\n"
																			},
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 2432,
									"name": "getDeviceSerialNumber",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7981,
											"character": 41
										}
									],
									"signatures": [
										{
											"id": 2433,
											"name": "getDeviceSerialNumber",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Fetches the device's serial number. Please note the purpose of this API is to\nadministrate the device (e.g. generating Certificate Sign Requests for\ndevice-wide certificates). This API may not be used for tracking devices\nwithout the consent of the device's administrator. If the current user is not\naffiliated, returns an empty string."
											},
											"parameters": [
												{
													"id": 2434,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Called with the serial number of the device."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2435,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 7982,
																	"character": 15
																}
															],
															"signatures": [
																{
																	"id": 2436,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2437,
																			"name": "serialNumber",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "\n"
																			},
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 2426,
									"name": "getDirectoryDeviceId",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 7965,
											"character": 40
										}
									],
									"signatures": [
										{
											"id": 2427,
											"name": "getDirectoryDeviceId",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Fetches the value of <a\nhref=\"https://developers.google.com/admin-sdk/directory/v1/guides/manage-chrome-devices\">the device identifier of the directory API</a>, that is generated by the server and identifies the cloud record of the device for querying in the cloud directory API. If the current user is not affiliated, returns an empty string."
											},
											"parameters": [
												{
													"id": 2428,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Called with the device identifier of the directory API when received."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2429,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 7966,
																	"character": 15
																}
															],
															"signatures": [
																{
																	"id": 2430,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2431,
																			"name": "deviceId",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "\n"
																			},
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										2444,
										2438,
										2450,
										2432,
										2426
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 7957,
									"character": 46
								}
							]
						},
						{
							"id": 2456,
							"name": "hardwarePlatform",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"comment": {
								"shortText": "Use the <code>chrome.enterprise.hardwarePlatform</code> API to get the\nmanufacturer and model of the hardware platform where the browser runs.\nNote: This API is only available to extensions installed by enterprise\npolicy.",
								"tags": [
									{
										"tag": "chrome-namespace",
										"text": "enterprise.hardwarePlatform"
									},
									{
										"tag": "chrome-permission",
										"text": "enterprise.hardwarePlatform\n"
									}
								]
							},
							"children": [
								{
									"id": 2463,
									"name": "HardwarePlatformInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 2465,
											"name": "manufacturer",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 8045,
													"character": 18
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2464,
											"name": "model",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 8043,
													"character": 11
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												2465,
												2464
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8042,
											"character": 41
										}
									]
								},
								{
									"id": 2457,
									"name": "getHardwarePlatformInfo",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8055,
											"character": 43
										}
									],
									"signatures": [
										{
											"id": 2458,
											"name": "getHardwarePlatformInfo",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Obtains the manufacturer and model for the hardware platform and, if the\nextension is authorized, returns it via |callback|."
											},
											"parameters": [
												{
													"id": 2459,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Called with the hardware platform info."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2460,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 8056,
																	"character": 15
																}
															],
															"signatures": [
																{
																	"id": 2461,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2462,
																			"name": "info",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "\n"
																			},
																			"type": {
																				"type": "reference",
																				"id": 2463,
																				"name": "HardwarePlatformInfo"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										2463
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										2457
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 8041,
									"character": 46
								}
							]
						},
						{
							"id": 2466,
							"name": "networkingAttributes",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"comment": {
								"shortText": "Use the <code>chrome.enterprise.networkingAttributes</code> API to read\ninformation about your current network.\nNote: This API is only available to\nextensions force-installed by enterprise\npolicy.",
								"tags": [
									{
										"tag": "chrome-namespace",
										"text": "enterprise.networkingAttributes"
									},
									{
										"tag": "chrome-permission",
										"text": "enterprise.networkingAttributes"
									},
									{
										"tag": "chrome-platform",
										"text": "chromeos\n"
									}
								]
							},
							"children": [
								{
									"id": 2473,
									"name": "NetworkDetails",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 2475,
											"name": "ipv4",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "The device's local IPv4 address (undefined if not configured)."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 8085,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2476,
											"name": "ipv6",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "The device's local IPv6 address (undefined if not configured)."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 8090,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2474,
											"name": "macAddress",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The device's MAC address."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 8080,
													"character": 16
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												2475,
												2476,
												2474
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8076,
											"character": 35
										}
									]
								},
								{
									"id": 2467,
									"name": "getNetworkDetails",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8101,
											"character": 37
										}
									],
									"signatures": [
										{
											"id": 2468,
											"name": "getNetworkDetails",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Retrieves the network details of the device's default network. If the user is\nnot affiliated or the device is not connected to a network, {@link\nruntime.lastError} will be set with a failure reason."
											},
											"parameters": [
												{
													"id": 2469,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Called with the device's default network's {@link NetworkDetails}."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2470,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 8102,
																	"character": 15
																}
															],
															"signatures": [
																{
																	"id": 2471,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2472,
																			"name": "networkAddresses",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "\n"
																			},
																			"type": {
																				"type": "reference",
																				"id": 2473,
																				"name": "NetworkDetails"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										2473
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										2467
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 8075,
									"character": 50
								}
							]
						},
						{
							"id": 2477,
							"name": "platformKeys",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"comment": {
								"shortText": "Use the <code>chrome.enterprise.platformKeys</code> API to generate\nhardware-backed keys and to install certificates for these keys. The\ncertificates will be managed by the platform and can be used for TLS\nauthentication, network access or by other extension through\n{@link\nplatformKeys chrome.platformKeys}.",
								"tags": [
									{
										"tag": "chrome-namespace",
										"text": "enterprise.platformKeys"
									},
									{
										"tag": "chrome-permission",
										"text": "enterprise.platformKeys"
									},
									{
										"tag": "chrome-platform",
										"text": "chromeos"
									},
									{
										"tag": "chrome-platform",
										"text": "lacros\n"
									}
								]
							},
							"children": [
								{
									"id": 2527,
									"name": "Token",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 2528,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Uniquely identifies this <code>Token</code>. <p>Static IDs are\n<code>\"user\"</code> and <code>\"system\"</code>, referring to the platform's\nuser-specific and the system-wide hardware token, respectively. Any other\ntokens (with other identifiers) might be returned by {@link\nenterprise.platformKeys.getTokens}.</p>"
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 8132,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2529,
											"name": "subtleCrypto",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Implements the WebCrypto's <a\nhref=\"http://www.w3.org/TR/WebCryptoAPI/#subtlecrypto-interface\">SubtleCrypto</a> interface. The cryptographic operations, including key generation, are hardware-backed. <p>Only non-extractable RSASSA-PKCS1-V1_5 keys with <code>modulusLength</code> up to 2048 and ECDSA with <code>namedCurve</code> P-256 can be generated. Each key can be used for signing data at most once.</p> <p>Keys generated on a specific <code>Token</code> cannot be used with any other Tokens, nor can they be used with <code>window.crypto.subtle</code>. Equally, <code>Key</code> objects created with <code>window.crypto.subtle</code> cannot be used with this interface.</p>"
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 8138,
													"character": 18
												}
											],
											"type": {
												"type": "reference",
												"name": "SubtleCrypto"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												2528,
												2529
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8124,
											"character": 26
										}
									]
								},
								{
									"id": 2505,
									"name": "challengeMachineKey",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8229,
											"character": 39
										}
									],
									"signatures": [
										{
											"id": 2506,
											"name": "challengeMachineKey",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Challenges a hardware-backed Enterprise Machine Key and emits the response as\npart of a remote attestation protocol. Only useful on Chrome OS and in\nconjunction with the Verified Access Web API which both issues challenges and\nverifies responses. A successful verification by the Verified Access Web API\nis a strong signal of all of the following: * The current device is a\nlegitimate Chrome OS device. * The current device is managed by the domain\nspecified during   verification. * The current signed-in user is managed by\nthe domain specified during   verification. * The current device state\ncomplies with enterprise device policy. For   example, a policy may specify\nthat the device must not be in developer   mode. * Any device identity\nemitted by the verification is tightly bound to the   hardware of the current\ndevice. This function is highly restricted and will fail if the current\ndevice is not managed, the current user is not managed, or if this operation\nhas not explicitly been enabled for the caller by enterprise device policy.\nThe Enterprise Machine Key does not reside in the <code>\"system\"</code> token\nand is not accessible by any other API."
											},
											"parameters": [
												{
													"id": 2507,
													"name": "challenge",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "A challenge as emitted by the Verified Access Web API."
													},
													"type": {
														"type": "reference",
														"name": "ArrayBuffer"
													}
												},
												{
													"id": 2508,
													"name": "registerKey",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "If set, the current Enterprise Machine Key is registered                with the <code>\"system\"</code> token and relinquishes the                Enterprise Machine Key role. The key can then be                associated with a certificate and used like any other                signing key. This key is 2048-bit RSA. Subsequent calls                to this function will then generate a new Enterprise                Machine Key."
													},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 2509,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Called back with the challenge response."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2510,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 8232,
																	"character": 15
																}
															],
															"signatures": [
																{
																	"id": 2511,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2512,
																			"name": "response",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "The challenge response.\n"
																			},
																			"type": {
																				"type": "reference",
																				"name": "ArrayBuffer"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										},
										{
											"id": 2513,
											"name": "challengeMachineKey",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Challenges a hardware-backed Enterprise Machine Key and emits the response as\npart of a remote attestation protocol. Only useful on Chrome OS and in\nconjunction with the Verified Access Web API which both issues challenges and\nverifies responses. A successful verification by the Verified Access Web API\nis a strong signal of all of the following: * The current device is a\nlegitimate Chrome OS device. * The current device is managed by the domain\nspecified during   verification. * The current signed-in user is managed by\nthe domain specified during   verification. * The current device state\ncomplies with enterprise device policy. For   example, a policy may specify\nthat the device must not be in developer   mode. * Any device identity\nemitted by the verification is tightly bound to the   hardware of the current\ndevice. This function is highly restricted and will fail if the current\ndevice is not managed, the current user is not managed, or if this operation\nhas not explicitly been enabled for the caller by enterprise device policy.\nThe Enterprise Machine Key does not reside in the <code>\"system\"</code> token\nand is not accessible by any other API."
											},
											"parameters": [
												{
													"id": 2514,
													"name": "challenge",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "A challenge as emitted by the Verified Access Web API."
													},
													"type": {
														"type": "reference",
														"name": "ArrayBuffer"
													}
												},
												{
													"id": 2515,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Called back with the challenge response."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2516,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 8261,
																	"character": 15
																}
															],
															"signatures": [
																{
																	"id": 2517,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2518,
																			"name": "response",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "The challenge response.\n"
																			},
																			"type": {
																				"type": "reference",
																				"name": "ArrayBuffer"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 2519,
									"name": "challengeUserKey",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8289,
											"character": 36
										}
									],
									"signatures": [
										{
											"id": 2520,
											"name": "challengeUserKey",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Challenges a hardware-backed Enterprise User Key and emits the response as\npart of a remote attestation protocol. Only useful on Chrome OS and in\nconjunction with the Verified Access Web API which both issues challenges and\nverifies responses. A successful verification by the Verified Access Web API\nis a strong signal of all of the following: * The current device is a\nlegitimate Chrome OS device. * The current device is managed by the domain\nspecified during   verification. * The current signed-in user is managed by\nthe domain specified during   verification. * The current device state\ncomplies with enterprise user policy. For   example, a policy may specify\nthat the device must not be in developer   mode. * The public key emitted by\nthe verification is tightly bound to the   hardware of the current device and\nto the current signed-in user. This function is highly restricted and will\nfail if the current device is not managed, the current user is not managed,\nor if this operation has not explicitly been enabled for the caller by\nenterprise user policy. The Enterprise User Key does not reside in the\n<code>\"user\"</code> token and is not accessible by any other API."
											},
											"parameters": [
												{
													"id": 2521,
													"name": "challenge",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "A challenge as emitted by the Verified Access Web API."
													},
													"type": {
														"type": "reference",
														"name": "ArrayBuffer"
													}
												},
												{
													"id": 2522,
													"name": "registerKey",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "If set, the current Enterprise User Key is registered with                the <code>\"user\"</code> token and relinquishes the                Enterprise User Key role. The key can then be associated                with a certificate and used like any other signing key.                This key is 2048-bit RSA. Subsequent calls to this                function will then generate a new Enterprise User Key."
													},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 2523,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Called back with the challenge response."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2524,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 8292,
																	"character": 15
																}
															],
															"signatures": [
																{
																	"id": 2525,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2526,
																			"name": "response",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "The challenge response.\n"
																			},
																			"type": {
																				"type": "reference",
																				"name": "ArrayBuffer"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 2484,
									"name": "getCertificates",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8167,
											"character": 35
										}
									],
									"signatures": [
										{
											"id": 2485,
											"name": "getCertificates",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Returns the list of all client certificates available from the given token.\nCan be used to check for the existence and expiration of client certificates\nthat are usable for a certain authentication."
											},
											"parameters": [
												{
													"id": 2486,
													"name": "tokenId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The id of a Token returned by <code>getTokens</code>."
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 2487,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Called back with the list of the available certificates."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2488,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 8169,
																	"character": 15
																}
															],
															"signatures": [
																{
																	"id": 2489,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2490,
																			"name": "certificates",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "The list of certificates, each in DER encoding of a X.509     certificate.\n"
																			},
																			"type": {
																				"type": "array",
																				"elementType": {
																					"type": "reference",
																					"name": "ArrayBuffer"
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 2478,
									"name": "getTokens",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8152,
											"character": 29
										}
									],
									"signatures": [
										{
											"id": 2479,
											"name": "getTokens",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Returns the available Tokens. In a regular user's session the list will\nalways contain the user's token with <code>id</code> <code>\"user\"</code>. If\na system-wide TPM token is available, the returned list will also contain the\nsystem-wide token with <code>id</code> <code>\"system\"</code>. The system-wide\ntoken will be the same for all sessions on this device (device in the sense\nof e.g. a Chromebook)."
											},
											"parameters": [
												{
													"id": 2480,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Invoked by <code>getTokens</code> with the list of available Tokens."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2481,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 8153,
																	"character": 15
																}
															],
															"signatures": [
																{
																	"id": 2482,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2483,
																			"name": "tokens",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "The list of available tokens.\n"
																			},
																			"type": {
																				"type": "array",
																				"elementType": {
																					"type": "reference",
																					"id": 2527,
																					"name": "Token"
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 2491,
									"name": "importCertificate",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8184,
											"character": 37
										}
									],
									"signatures": [
										{
											"id": 2492,
											"name": "importCertificate",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Imports <code>certificate</code> to the given token if the certified key is\nalready stored in this token. After a successful certification request, this\nfunction should be used to store the obtained certificate and to make it\navailable to the operating system and browser for authentication."
											},
											"parameters": [
												{
													"id": 2493,
													"name": "tokenId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The id of a Token returned by <code>getTokens</code>."
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 2494,
													"name": "certificate",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The DER encoding of a X.509 certificate."
													},
													"type": {
														"type": "reference",
														"name": "ArrayBuffer"
													}
												},
												{
													"id": 2495,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "Called back when this operation is finished.\n"
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2496,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 8187,
																	"character": 16
																}
															],
															"signatures": [
																{
																	"id": 2497,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 2498,
									"name": "removeCertificate",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8200,
											"character": 37
										}
									],
									"signatures": [
										{
											"id": 2499,
											"name": "removeCertificate",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Removes <code>certificate</code> from the given token if present. Should be\nused to remove obsolete certificates so that they are not considered during\nauthentication and do not clutter the certificate choice. Should be used to\nfree storage in the certificate store."
											},
											"parameters": [
												{
													"id": 2500,
													"name": "tokenId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The id of a Token returned by <code>getTokens</code>."
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 2501,
													"name": "certificate",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The DER encoding of a X.509 certificate."
													},
													"type": {
														"type": "reference",
														"name": "ArrayBuffer"
													}
												},
												{
													"id": 2502,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "Called back when this operation is finished.\n"
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2503,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 8203,
																	"character": 16
																}
															],
															"signatures": [
																{
																	"id": 2504,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										2527
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										2505,
										2519,
										2484,
										2478,
										2491,
										2498
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 8123,
									"character": 42
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								2425,
								2456,
								2466,
								2477
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 7957,
							"character": 29
						}
					]
				},
				{
					"id": 2530,
					"name": "events",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "The <code>chrome.events</code> namespace contains common types used by APIs\ndispatching events to notify you when something interesting happens.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "events\n"
							}
						]
					},
					"children": [
						{
							"id": 2537,
							"name": "Event",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "An object which allows the addition and removal of listeners for a Chrome\nevent."
							},
							"children": [
								{
									"id": 2538,
									"name": "addListener",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2539,
											"name": "addListener",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Registers an event listener <em>callback</em> to an event."
											},
											"parameters": [
												{
													"id": 2540,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Called when an event occurs. The parameters of this function depend on the type of event.\n"
													},
													"type": {
														"type": "reference",
														"name": "T"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 2549,
									"name": "addRules",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2550,
											"name": "addRules",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Registers rules to handle events."
											},
											"parameters": [
												{
													"id": 2551,
													"name": "eventName",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Name of the event this function affects."
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 2552,
													"name": "webViewInstanceId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "If provided, this is an integer that uniquely identfies the <webview> associated with this function call."
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2553,
													"name": "rules",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Rules to be registered. These do not replace previously registered rules."
													},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 2531,
															"name": "Rule"
														}
													}
												},
												{
													"id": 2554,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "Called with registered rules."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2555,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 2556,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2557,
																			"name": "rules",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "Rules that were registered, the optional parameters are filled with values.\n"
																			},
																			"type": {
																				"type": "array",
																				"elementType": {
																					"type": "reference",
																					"id": 2531,
																					"name": "Rule"
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 2558,
									"name": "getRules",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2559,
											"name": "getRules",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Returns currently registered rules."
											},
											"parameters": [
												{
													"id": 2560,
													"name": "eventName",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Name of the event this function affects."
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 2561,
													"name": "webViewInstanceId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "If provided, this is an integer that uniquely identfies the <webview> associated with this function call."
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2562,
													"name": "ruleIdentifiers",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "If an array is passed, only rules with identifiers contained in this array are returned."
													},
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												},
												{
													"id": 2563,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Called with registered rules."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2564,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 2565,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2566,
																			"name": "rules",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "Rules that were registered, the optional parameters are filled with values.\n"
																			},
																			"type": {
																				"type": "array",
																				"elementType": {
																					"type": "reference",
																					"id": 2531,
																					"name": "Rule"
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										},
										{
											"id": 2567,
											"name": "getRules",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Returns currently registered rules."
											},
											"parameters": [
												{
													"id": 2568,
													"name": "eventName",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Name of the event this function affects."
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 2569,
													"name": "webViewInstanceId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "If provided, this is an integer that uniquely identfies the <webview> associated with this function call."
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2570,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Called with registered rules."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2571,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 2572,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2573,
																			"name": "rules",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "Rules that were registered, the optional parameters are filled with values.\n"
																			},
																			"type": {
																				"type": "array",
																				"elementType": {
																					"type": "reference",
																					"id": 2531,
																					"name": "Rule"
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 2544,
									"name": "hasListener",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2545,
											"name": "hasListener",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"returns": "True if <em>callback</em> is registered to the event.\n"
											},
											"parameters": [
												{
													"id": 2546,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Listener whose registration status shall be tested."
													},
													"type": {
														"type": "reference",
														"name": "T"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 2547,
									"name": "hasListeners",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2548,
											"name": "hasListeners",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"returns": "True if any event listeners are registered to the event.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 2541,
									"name": "removeListener",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2542,
											"name": "removeListener",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Deregisters an event listener <em>callback</em> from an event."
											},
											"parameters": [
												{
													"id": 2543,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Listener that shall be unregistered.\n"
													},
													"type": {
														"type": "reference",
														"name": "T"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 2574,
									"name": "removeRules",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2575,
											"name": "removeRules",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Unregisters currently registered rules."
											},
											"parameters": [
												{
													"id": 2576,
													"name": "eventName",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Name of the event this function affects."
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 2577,
													"name": "webViewInstanceId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "If provided, this is an integer that uniquely identfies the <webview> associated with this function call."
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2578,
													"name": "ruleIdentifiers",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "If an array is passed, only rules with identifiers contained in this array are unregistered."
													},
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												},
												{
													"id": 2579,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "Called when rules were unregistered.\n"
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2580,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 2581,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Methods",
									"kind": 2048,
									"children": [
										2538,
										2549,
										2558,
										2544,
										2547,
										2541,
										2574
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 8341,
									"character": 26
								}
							],
							"typeParameter": [
								{
									"id": 2582,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Function"
									}
								}
							]
						},
						{
							"id": 2531,
							"name": "Rule",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Description of a declarative rule for handling events."
							},
							"children": [
								{
									"id": 2535,
									"name": "actions",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "List of actions that are triggered if one of the conditions is fulfilled."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8329,
											"character": 13
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 2534,
									"name": "conditions",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "List of conditions that can trigger the actions."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8324,
											"character": 16
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 2532,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Optional identifier that allows referencing this rule."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8314,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2536,
									"name": "priority",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Optional priority of this rule. Defaults to 100."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8334,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2533,
									"name": "tags",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Tags can be used to annotate rules and perform operations on sets of rules."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8319,
											"character": 10
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2535,
										2534,
										2532,
										2536,
										2533
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 8310,
									"character": 25
								}
							]
						},
						{
							"id": 2583,
							"name": "UrlFilter",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Filters URLs for various criteria. See <a href='events#filtered'>event\nfiltering</a>. All criteria are case sensitive."
							},
							"children": [
								{
									"id": 2584,
									"name": "hostContains",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if the host name of the URL contains a specified string. To test\nwhether a host name component has a prefix 'foo', use hostContains: '.foo'.\nThis matches 'www.foobar.com' and 'foo.com', because an implicit dot is added\nat the beginning of the host name. Similarly, hostContains can be used to\nmatch against component suffix ('foo.') and to exactly match against\ncomponents ('.foo.'). Suffix- and exact-matching for the last components need\nto be done separately using hostSuffix, because no implicit dot is added at\nthe end of the host name."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8456,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2585,
									"name": "hostEquals",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if the host name of the URL is equal to a specified string."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8461,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2586,
									"name": "hostPrefix",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if the host name of the URL starts with a specified string."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8466,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2587,
									"name": "hostSuffix",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if the host name of the URL ends with a specified string."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8471,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2599,
									"name": "originAndPathMatches",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if the URL without query segment and fragment identifier matches a\nspecified regular expression. Port numbers are stripped from the URL if they\nmatch the default port number. The regular expressions use the <a\nhref=\"https://github.com/google/re2/blob/master/doc/syntax.txt\">RE2\nsyntax</a>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8542,
											"character": 26
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2588,
									"name": "pathContains",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if the path segment of the URL contains a specified string."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8476,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2589,
									"name": "pathEquals",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if the path segment of the URL is equal to a specified string."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8481,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2590,
									"name": "pathPrefix",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if the path segment of the URL starts with a specified string."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8486,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2591,
									"name": "pathSuffix",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if the path segment of the URL ends with a specified string."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8491,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2603,
									"name": "ports",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if the port of the URL is contained in any of the specified port\nlists. For example <code>[80, 443, [1000, 1200]]</code> matches all requests\non port 80, 443 and in the range 1000-1200."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8569,
											"character": 11
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "number"
												},
												{
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											]
										}
									}
								},
								{
									"id": 2592,
									"name": "queryContains",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if the query segment of the URL contains a specified string."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8496,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2593,
									"name": "queryEquals",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if the query segment of the URL is equal to a specified string."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8501,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2594,
									"name": "queryPrefix",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if the query segment of the URL starts with a specified string."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8506,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2595,
									"name": "querySuffix",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if the query segment of the URL ends with a specified string."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8511,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2602,
									"name": "schemes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if the scheme of the URL is equal to any of the schemes specified in\nthe array."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8562,
											"character": 13
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 2596,
									"name": "urlContains",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if the URL (without fragment identifier) contains a specified string.\nPort numbers are stripped from the URL if they match the default port number."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8517,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2597,
									"name": "urlEquals",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if the URL (without fragment identifier) is equal to a specified\nstring. Port numbers are stripped from the URL if they match the default port\nnumber."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8524,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2598,
									"name": "urlMatches",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if the URL (without fragment identifier) matches a specified regular\nexpression. Port numbers are stripped from the URL if they match the default\nport number. The regular expressions use the <a\nhref=\"https://github.com/google/re2/blob/master/doc/syntax.txt\">RE2\nsyntax</a>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8533,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2600,
									"name": "urlPrefix",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if the URL (without fragment identifier) starts with a specified\nstring. Port numbers are stripped from the URL if they match the default port\nnumber."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8549,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2601,
									"name": "urlSuffix",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Matches if the URL (without fragment identifier) ends with a specified\nstring. Port numbers are stripped from the URL if they match the default port\nnumber."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8556,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2584,
										2585,
										2586,
										2587,
										2599,
										2588,
										2589,
										2590,
										2591,
										2603,
										2592,
										2593,
										2594,
										2595,
										2602,
										2596,
										2597,
										2598,
										2600,
										2601
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 8445,
									"character": 30
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								2537,
								2531,
								2583
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 8306,
							"character": 25
						}
					]
				},
				{
					"id": 2626,
					"name": "extension",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "The <code>chrome.extension</code> API has utilities that can be used by any\nextension page. It includes support for exchanging messages between an\nextension and its content scripts or between extensions, as described in\ndetail in <a href='messaging'>Message Passing</a>.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "extension\n"
							}
						]
					},
					"children": [
						{
							"id": 2671,
							"name": "ViewType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The type of extension view."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 8733,
									"character": 24
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "tab"
									},
									{
										"type": "literal",
										"value": "popup"
									}
								]
							}
						},
						{
							"id": 2675,
							"name": "inIncognitoContext",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isLet": true
							},
							"comment": {
								"shortText": "True for content scripts running inside incognito tabs, and for extension\npages running inside an incognito process. The latter only applies to\nextensions with 'split' incognito_behavior."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 8754,
									"character": 33
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 2672,
							"name": "lastError",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isLet": true
							},
							"comment": {
								"shortText": "Set for the lifetime of a callback if an ansychronous extension api has\nresulted in an error. If no error has occured lastError will be\n<var>undefined</var>.",
								"tags": [
									{
										"tag": "deprecated",
										"text": "Please use {@link runtime.lastError}.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 8742,
									"character": 24
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 2673,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 2674,
													"name": "message",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"shortText": "Description of the error that has taken place."
													},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 8746,
															"character": 13
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														2674
													]
												}
											],
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 8742,
													"character": 25
												}
											]
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 2676,
							"name": "onRequest",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a request is sent from either an extension process or a content\nscript.",
								"tags": [
									{
										"tag": "deprecated",
										"text": "Please use {@link runtime.onMessage}.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 8896,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 2677,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 8896,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 2678,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 2679,
															"name": "request",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "The request sent by the calling script."
															},
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 2680,
															"name": "sender",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reference",
																"id": 4891,
																"name": "runtime.MessageSender"
															}
														},
														{
															"id": 2681,
															"name": "sendResponse",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 2682,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 8904,
																			"character": 21
																		}
																	],
																	"signatures": [
																		{
																			"id": 2683,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 2684,
							"name": "onRequestExternal",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a request is sent from another extension.",
								"tags": [
									{
										"tag": "deprecated",
										"text": "Please use {@link runtime.onMessageExternal}.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 8913,
									"character": 34
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 2685,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 8913,
													"character": 56
												}
											],
											"signatures": [
												{
													"id": 2686,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 2687,
															"name": "request",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "The request sent by the calling script."
															},
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 2688,
															"name": "sender",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reference",
																"id": 4891,
																"name": "runtime.MessageSender"
															}
														},
														{
															"id": 2689,
															"name": "sendResponse",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 2690,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 8921,
																			"character": 21
																		}
																	],
																	"signatures": [
																		{
																			"id": 2691,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 2651,
							"name": "getBackgroundPage",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 8838,
									"character": 37
								}
							],
							"signatures": [
								{
									"id": 2652,
									"name": "getBackgroundPage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the JavaScript 'window' object for the background page running inside\nthe current extension. Returns null if the extension has no background page."
									},
									"type": {
										"type": "reference",
										"name": "Window"
									}
								}
							]
						},
						{
							"id": 2653,
							"name": "getExtensionTabs",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 8849,
									"character": 36
								}
							],
							"signatures": [
								{
									"id": 2654,
									"name": "getExtensionTabs",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns an array of the JavaScript 'window' objects for each of the tabs\nrunning inside the current extension. If <code>windowId</code> is specified,\nreturns only the 'window' objects of tabs attached to the specified window.",
										"returns": "Array of global window objects",
										"tags": [
											{
												"tag": "deprecated",
												"text": "Please use {@link extension.getViews} <code>{type: \"tab\"}</code>.\n"
											}
										]
									},
									"parameters": [
										{
											"id": 2655,
											"name": "windowId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Window"
										}
									}
								}
							]
						},
						{
							"id": 2641,
							"name": "getURL",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 8802,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 2642,
									"name": "getURL",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Converts a relative path within an extension install directory to a\nfully-qualified URL.",
										"returns": "The fully-qualified URL to the resource.",
										"tags": [
											{
												"tag": "deprecated",
												"text": "Please use {@link runtime.getURL}.\n"
											}
										]
									},
									"parameters": [
										{
											"id": 2643,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A path to a resource within an extension expressed relative to its install directory."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							]
						},
						{
							"id": 2644,
							"name": "getViews",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 8813,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 2645,
									"name": "getViews",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns an array of the JavaScript 'window' objects for each of the pages\nrunning inside the current extension.",
										"returns": "Array of global objects\n"
									},
									"parameters": [
										{
											"id": 2646,
											"name": "fetchProperties",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2647,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 2650,
															"name": "tabId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Find a view according to a tab id. If this field is omitted, returns all\nviews."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 8830,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 2648,
															"name": "type",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The type of view to get. If omitted, returns all views (including background\npages and tabs). Valid values: 'tab', 'notification', 'popup'."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 8819,
																	"character": 12
																}
															],
															"type": {
																"type": "reference",
																"id": 2671,
																"name": "ViewType"
															}
														},
														{
															"id": 2649,
															"name": "windowId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The window to restrict the search to. If omitted, returns all views."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 8824,
																	"character": 16
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																2650,
																2648,
																2649
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 8814,
															"character": 23
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Window"
										}
									}
								}
							]
						},
						{
							"id": 2662,
							"name": "isAllowedFileSchemeAccess",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 8873,
									"character": 45
								}
							],
							"signatures": [
								{
									"id": 2663,
									"name": "isAllowedFileSchemeAccess",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieves the state of the extension's access to the 'file://' scheme (as\ndetermined by the user-controlled 'Allow access to File URLs' checkbox."
									},
									"parameters": [
										{
											"id": 2664,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2665,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 8874,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 2666,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 2667,
																	"name": "isAllowedAccess",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "True if the extension can access the 'file://' scheme, false otherwise.\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "boolean"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 2656,
							"name": "isAllowedIncognitoAccess",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 8860,
									"character": 44
								}
							],
							"signatures": [
								{
									"id": 2657,
									"name": "isAllowedIncognitoAccess",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieves the state of the extension's access to Incognito-mode (as\ndetermined by the user-controlled 'Allowed in Incognito' checkbox."
									},
									"parameters": [
										{
											"id": 2658,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2659,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 8861,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 2660,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 2661,
																	"name": "isAllowedAccess",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "True if the extension has access to Incognito mode, false otherwise.\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "boolean"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 2627,
							"name": "sendRequest",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 8768,
									"character": 31
								}
							],
							"signatures": [
								{
									"id": 2628,
									"name": "sendRequest",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sends a single request to other listeners within the extension. Similar to\n{@link runtime.connect}, but only sends a single request with an optional\nresponse. The {@link extension.onRequest} event is fired in each page of the\nextension.",
										"tags": [
											{
												"tag": "deprecated",
												"text": "Please use {@link runtime.sendMessage}.\n"
											}
										]
									},
									"parameters": [
										{
											"id": 2629,
											"name": "extensionId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The extension ID of the extension you want to connect to. If omitted, default is your own extension."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2630,
											"name": "request",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 2631,
											"name": "responseCallback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2632,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 8771,
															"character": 24
														}
													],
													"signatures": [
														{
															"id": 2633,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 2634,
																	"name": "response",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "The JSON response object sent by the handler of the request. If an error occurs while connecting to the extension, the callback will be called with no arguments and {@link runtime.lastError} will be set to the error message."
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								},
								{
									"id": 2635,
									"name": "sendRequest",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sends a single request to other listeners within the extension. Similar to\n{@link runtime.connect}, but only sends a single request with an optional\nresponse. The {@link extension.onRequest} event is fired in each page of the\nextension.",
										"tags": [
											{
												"tag": "deprecated",
												"text": "Please use {@link runtime.sendMessage}.\n"
											}
										]
									},
									"parameters": [
										{
											"id": 2636,
											"name": "request",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 2637,
											"name": "responseCallback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2638,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 8789,
															"character": 24
														}
													],
													"signatures": [
														{
															"id": 2639,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 2640,
																	"name": "response",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "The JSON response object sent by the handler of the request. If an error occurs while connecting to the extension, the callback will be called with no arguments and {@link runtime.lastError} will be set to the error message."
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 2668,
							"name": "setUpdateUrlData",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 8886,
									"character": 36
								}
							],
							"signatures": [
								{
									"id": 2669,
									"name": "setUpdateUrlData",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the value of the ap CGI parameter used in the extension's update URL.\nThis value is ignored for extensions that are hosted in the Chrome Extension\nGallery."
									},
									"parameters": [
										{
											"id": 2670,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								2671
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								2675,
								2672,
								2676,
								2684
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								2651,
								2653,
								2641,
								2644,
								2662,
								2656,
								2627,
								2668
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 8729,
							"character": 28
						}
					]
				},
				{
					"id": 2604,
					"name": "extensionTypes",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "The <code>chrome.extensionTypes</code> API contains type declarations for\nChrome extensions.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "extensionTypes\n"
							}
						]
					},
					"children": [
						{
							"id": 2619,
							"name": "DeleteInjectionDetails",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Details of the CSS to remove. Either the code or the file property must be\nset, but both may not be set at the same time."
							},
							"children": [
								{
									"id": 2622,
									"name": "allFrames",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "If allFrames is <code>true</code>, implies that the CSS should be removed\nfrom all frames of current page. By default, it's <code>false</code> and is\nonly removed from the top frame. If <code>true</code> and\n<code>frameId</code> is set, then the code is removed from the selected frame\nand all of its child frames."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8695,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2620,
									"name": "code",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "CSS code to remove."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8681,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2625,
									"name": "cssOrigin",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The <a\nhref=\"https://www.w3.org/TR/css3-cascade/#cascading-origins\">origin</a> of\nthe CSS to remove. Defaults to <code>\"author\"</code>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8715,
											"character": 15
										}
									],
									"type": {
										"type": "reference",
										"id": 2610,
										"name": "CSSOrigin"
									}
								},
								{
									"id": 2621,
									"name": "file",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "CSS file to remove."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8686,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2623,
									"name": "frameId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The <a href='webNavigation#frame_ids'>frame</a> from where the CSS should be\nremoved. Defaults to 0 (the top-level frame)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8701,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2624,
									"name": "matchAboutBlank",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "If matchAboutBlank is true, then the code is also removed from about:blank\nand about:srcdoc frames if your extension has access to its parent document.\nBy default it is <code>false</code>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8708,
											"character": 21
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2622,
										2620,
										2625,
										2621,
										2623,
										2624
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 8677,
									"character": 43
								}
							]
						},
						{
							"id": 2606,
							"name": "ImageDetails",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Details about the format and quality of an image."
							},
							"children": [
								{
									"id": 2607,
									"name": "format",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The format of the resulting image.  Default is <code>\"jpeg\"</code>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8594,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 2605,
										"name": "ImageFormat"
									}
								},
								{
									"id": 2608,
									"name": "quality",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "When format is <code>\"jpeg\"</code>, controls the quality of the resulting\nimage.  This value is ignored for PNG images.  As quality is decreased, the\nresulting image will have more visual artifacts, and the number of bytes\nneeded to store it will decrease."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8602,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2607,
										2608
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 8590,
									"character": 33
								}
							]
						},
						{
							"id": 2611,
							"name": "InjectDetails",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Details of the script or CSS to inject. Either the code or the file property\nmust be set, but both may not be set at the same time."
							},
							"children": [
								{
									"id": 2614,
									"name": "allFrames",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "If allFrames is <code>true</code>, implies that the JavaScript or CSS should\nbe injected into all frames of current page. By default, it's\n<code>false</code> and is only injected into the top frame. If\n<code>true</code> and <code>frameId</code> is set, then the code is inserted\nin the selected frame and all of its child frames."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8642,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2612,
									"name": "code",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "JavaScript or CSS code to inject.<br><br><b>Warning:</b><br>Be careful using\nthe <code>code</code> parameter. Incorrect use of it may open your extension\nto <a href=\"https://en.wikipedia.org/wiki/Cross-site_scripting\">cross site\nscripting</a> attacks."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8628,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2618,
									"name": "cssOrigin",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The <a\nhref=\"https://www.w3.org/TR/css3-cascade/#cascading-origins\">origin</a> of\nthe CSS to inject. This may only be specified for CSS, not JavaScript.\nDefaults to <code>\"author\"</code>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8670,
											"character": 15
										}
									],
									"type": {
										"type": "reference",
										"id": 2610,
										"name": "CSSOrigin"
									}
								},
								{
									"id": 2613,
									"name": "file",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "JavaScript or CSS file to inject."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8633,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2615,
									"name": "frameId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The <a href='webNavigation#frame_ids'>frame</a> where the script or CSS\nshould be injected. Defaults to 0 (the top-level frame)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8648,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2616,
									"name": "matchAboutBlank",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "If matchAboutBlank is true, then the code is also injected in about:blank and\nabout:srcdoc frames if your extension has access to its parent document. Code\ncannot be inserted in top-level about:-frames. By default it is\n<code>false</code>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8656,
											"character": 21
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2617,
									"name": "runAt",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The soonest that the JavaScript or CSS will be injected into the tab.\nDefaults to \"document_idle\"."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8662,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"id": 1373,
										"name": "RunAt"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2614,
										2612,
										2618,
										2613,
										2615,
										2616,
										2617
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 8621,
									"character": 34
								}
							]
						},
						{
							"id": 2610,
							"name": "CSSOrigin",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The <a\nhref=\"https://www.w3.org/TR/css3-cascade/#cascading-origins\">origin</a> of\ninjected CSS."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 8615,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "author"
									},
									{
										"type": "literal",
										"value": "user"
									}
								]
							}
						},
						{
							"id": 2605,
							"name": "ImageFormat",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The format of an image."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 8585,
									"character": 27
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "jpeg"
									},
									{
										"type": "literal",
										"value": "png"
									}
								]
							}
						},
						{
							"id": 2609,
							"name": "RunAt",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The soonest that the JavaScript or CSS will be injected into the tab."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 8608,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "document_start"
									},
									{
										"type": "literal",
										"value": "document_end"
									},
									{
										"type": "literal",
										"value": "document_idle"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								2619,
								2606,
								2611
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								2610,
								2605,
								2609
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 8581,
							"character": 33
						}
					]
				},
				{
					"id": 2692,
					"name": "extensionsManifestTypes",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Schemas for structured manifest entries",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "extensionsManifestTypes\n"
							}
						]
					},
					"children": [
						{
							"id": 2698,
							"name": "ContentCapabilities",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "The <code>content_capabilities</code> manifest entry allows an extension to\ngrant certain additional capabilities to web contents whose locations match a\ngiven set of URL patterns."
							},
							"children": [
								{
									"id": 2699,
									"name": "matches",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The set of URL patterns to match against. If any of the given patterns match\na URL, its contents will be granted the specified capabilities."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8973,
											"character": 13
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 2700,
									"name": "permissions",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The set of capabilities to grant matched contents. This is currently limited\nto <code>clipboardRead</code>, <code>clipboardWrite</code>, and\n<code>unlimitedStorage</code>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8980,
											"character": 17
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2699,
										2700
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 8968,
									"character": 40
								}
							]
						},
						{
							"id": 2701,
							"name": "ExternallyConnectable",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2704,
									"name": "accepts_tls_channel_id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "If <code>true</code>, messages sent via {@link runtime.connect} or {@link\nruntime.sendMessage} will set {@link runtime.MessageSender.tlsChannelId} if\nthose methods request it to be. If <code>false</code>, {@link\nruntime.MessageSender.tlsChannelId} will never be set under any circumstance."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9010,
											"character": 28
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2702,
									"name": "ids",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "<p>The IDs of extensions or apps that are allowed to connect. If left empty\nor unspecified, no extensions or apps can connect.</p><p>The wildcard\n<code>\"*\"</code> will allow all extensions and apps to connect.</p>"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 8989,
											"character": 9
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 2703,
									"name": "matches",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "<p>The URL patterns for <em>web pages</em> that are allowed to connect.\n<em>This does not affect content scripts.</em> If left empty or unspecified,\nno web pages can connect.</p><p>Patterns cannot include wildcard domains nor\nsubdomains of <a href=\"http://publicsuffix.org/list/\">(effective) top level\ndomains</a>; <code>*://google.com/*</code> and\n<code>http://*.chromium.org/*</code> are valid, while\n<code>&lt;all_urls&gt;</code>, <code>http://&#x2a;/*</code>,\n<code>*://*.com/*</code>, and even <code>http://*.appspot.com/*</code> are\nnot.</p>"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9002,
											"character": 13
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2704,
										2702,
										2703
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 8983,
									"character": 42
								}
							]
						},
						{
							"id": 2705,
							"name": "OptionsUI",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "The <code>options_ui</code> manifest property declares how the options page\nshould be displayed."
							},
							"children": [
								{
									"id": 2707,
									"name": "chrome_style",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "If <code>true</code>, a Chrome user agent stylesheet will be applied to your\noptions page. The default value is <code>false</code>. We do not recommend\nyou enable it as it no longer results in a consistent UI with Chrome. This\noption will be removed in Manifest V3."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9029,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2708,
									"name": "open_in_tab",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "<p>If <code>true</code>, your extension's options page will be opened in a\nnew tab rather than embedded in <em>chrome://extensions</em>. The default is\n<code>false</code>, and we recommend that you don't change\nit.</p><p><strong>This is only useful to delay the inevitable deprecation of\nthe old options UI!</strong> It will be removed soon, so try not to use it.\nIt will break.</p>"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9039,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2706,
									"name": "page",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The path to your options page, relative to your extension's root."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9021,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2707,
										2708,
										2706
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9017,
									"character": 30
								}
							]
						},
						{
							"id": 2727,
							"name": "UsbPrinters",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "The <code>usb_printers</code> manifest property lists the USB printers\nsupported by an app implementing the {@link printerProvider} API."
							},
							"children": [
								{
									"id": 2728,
									"name": "filters",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "A list of {@link usb.DeviceFilter USB device filters} matching supported\ndevices. A device only needs to match one of the provided filters. A\n<code>vendorId</code> is required and only one of <code>productId</code> or\n<code>interfaceClass</code> may be provided."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9138,
											"character": 13
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reflection",
											"declaration": {
												"id": 2729,
												"name": "__type",
												"kind": 65536,
												"kindString": "Type literal",
												"flags": {},
												"children": [
													{
														"id": 2732,
														"name": "interfaceClass",
														"kind": 1024,
														"kindString": "Property",
														"flags": {
															"isOptional": true
														},
														"comment": {
															"shortText": "USB interface class implemented by any interface of a matching device."
														},
														"sources": [
															{
																"fileName": "npm/index.d.ts",
																"line": 9152,
																"character": 22
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "number"
														}
													},
													{
														"id": 2734,
														"name": "interfaceProtocol",
														"kind": 1024,
														"kindString": "Property",
														"flags": {
															"isOptional": true
														},
														"comment": {
															"shortText": "USB interface protocol implemented by the interface matching {@link\ninterfaceClass} and {@link interfaceSubclass}."
														},
														"sources": [
															{
																"fileName": "npm/index.d.ts",
																"line": 9164,
																"character": 25
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "number"
														}
													},
													{
														"id": 2733,
														"name": "interfaceSubclass",
														"kind": 1024,
														"kindString": "Property",
														"flags": {
															"isOptional": true
														},
														"comment": {
															"shortText": "USB interface sub-class implemented by the interface matching {@link\ninterfaceClass}."
														},
														"sources": [
															{
																"fileName": "npm/index.d.ts",
																"line": 9158,
																"character": 25
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "number"
														}
													},
													{
														"id": 2731,
														"name": "productId",
														"kind": 1024,
														"kindString": "Property",
														"flags": {
															"isOptional": true
														},
														"comment": {
															"shortText": "USB product ID of matching devices"
														},
														"sources": [
															{
																"fileName": "npm/index.d.ts",
																"line": 9147,
																"character": 17
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "number"
														}
													},
													{
														"id": 2730,
														"name": "vendorId",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"comment": {
															"shortText": "USB vendor ID of matching devices"
														},
														"sources": [
															{
																"fileName": "npm/index.d.ts",
																"line": 9142,
																"character": 16
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "number"
														}
													}
												],
												"groups": [
													{
														"title": "Properties",
														"kind": 1024,
														"children": [
															2732,
															2734,
															2733,
															2731,
															2730
														]
													}
												]
											}
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2728
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9131,
									"character": 32
								}
							]
						},
						{
							"id": 2722,
							"name": "bluetooth",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "The <code>bluetooth</code> manifest property give permission to an app to use\nthe {@link bluetooth} API. A list of UUIDs can be optionally specified to\nenable communication with devices."
							},
							"children": [
								{
									"id": 2725,
									"name": "low_energy",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "If <code>true</code>, gives permission to an app to use the {@link\nbluetoothLowEnergy} API"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9118,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2726,
									"name": "peripheral",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "If <code>true</code>, gives permission to an app to use the advertisement\nfunctions in the {@link bluetoothLowEnergy} API"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9124,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2724,
									"name": "socket",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "If <code>true</code>, gives permission to an app to use the {@link\nbluetoothSocket} API"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9112,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2723,
									"name": "uuids",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The <code>uuids</code> manifest property declares the list of protocols,\nprofiles and services that an app can communicate using."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9106,
											"character": 11
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2725,
										2726,
										2724,
										2723
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9101,
									"character": 30
								}
							]
						},
						{
							"id": 2710,
							"name": "sockets",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "The <code>sockets</code> manifest property declares which sockets operations\nan app can issue."
							},
							"children": [
								{
									"id": 2716,
									"name": "tcp",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The <code>tcp</code> manifest property declares which sockets.tcp operations\nan app can issue."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9077,
											"character": 9
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2717,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 2718,
													"name": "connect",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "<p>The host:port pattern for <code>connect</code> operations.</p>"
													},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 9081,
															"character": 15
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														2718
													]
												}
											]
										}
									}
								},
								{
									"id": 2719,
									"name": "tcpServer",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The <code>tcpServer</code> manifest property declares which sockets.tcpServer\noperations an app can issue."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9088,
											"character": 15
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2720,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 2721,
													"name": "listen",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "<p>The host:port pattern for <code>listen</code> operations.</p>"
													},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 9092,
															"character": 14
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														2721
													]
												}
											]
										}
									}
								},
								{
									"id": 2711,
									"name": "udp",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The <code>udp</code> manifest property declares which sockets.udp operations\nan app can issue."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9056,
											"character": 9
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2712,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 2713,
													"name": "bind",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "<p>The host:port pattern for <code>bind</code> operations.</p>"
													},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 9060,
															"character": 12
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														]
													}
												},
												{
													"id": 2715,
													"name": "multicastMembership",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "<p>The host:port pattern for <code>joinGroup</code> operations.</p>"
													},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 9070,
															"character": 27
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														]
													}
												},
												{
													"id": 2714,
													"name": "send",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "<p>The host:port pattern for <code>send</code> operations.</p>"
													},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 9065,
															"character": 12
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														2713,
														2715,
														2714
													]
												}
											]
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2716,
										2719,
										2711
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9051,
									"character": 28
								}
							]
						},
						{
							"id": 2735,
							"name": "KioskSecondaryApps",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The <code>kiosk_secondary_apps</code> manifest property lists the secondary\nkiosk apps to be deployed by the primary kiosk app."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9172,
									"character": 34
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reflection",
									"declaration": {
										"id": 2736,
										"name": "__type",
										"kind": 65536,
										"kindString": "Type literal",
										"flags": {},
										"children": [
											{
												"id": 2738,
												"name": "enabled_on_launch",
												"kind": 1024,
												"kindString": "Property",
												"flags": {
													"isOptional": true
												},
												"comment": {
													"shortText": "Whether the secondary app should be enabled when kiosk app is launched. If\ntrue, the app will be enabled before the kiosk app launch; if false the app\nwill be disabled before the kiosk app launch; if not set, the app's enabled\nstate will not be changed during the kiosk app launch. The ${ref:management}\nAPI can be used to later change the secondary app state."
												},
												"sources": [
													{
														"fileName": "npm/index.d.ts",
														"line": 9185,
														"character": 23
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "boolean"
												}
											},
											{
												"id": 2737,
												"name": "id",
												"kind": 1024,
												"kindString": "Property",
												"flags": {},
												"comment": {
													"shortText": "ID of secondary kiosk app"
												},
												"sources": [
													{
														"fileName": "npm/index.d.ts",
														"line": 9176,
														"character": 8
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"groups": [
											{
												"title": "Properties",
												"kind": 1024,
												"children": [
													2738,
													2737
												]
											}
										],
										"sources": [
											{
												"fileName": "npm/index.d.ts",
												"line": 9172,
												"character": 36
											}
										]
									}
								}
							}
						},
						{
							"id": 2709,
							"name": "SocketHostPatterns",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "<p>A single string or a list of strings representing host:port patterns.</p>"
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9045,
									"character": 34
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						},
						{
							"id": 2693,
							"name": "automation",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "This API provides programmatic access to the user interface elements of\nChrome. This includes everything in the web view, and optionally Chrome's\nfull user interface."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 8939,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 2694,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 2695,
													"name": "desktop",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Whether to request permission to the whole ChromeOS desktop. If granted, this\ngives the extension access to every aspect of the desktop, and every site and\napp. If this permission is requested, all other permissions are implicitly\nincluded and do not need to be requested separately."
													},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 8946,
															"character": 13
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 2697,
													"name": "interact",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Whether the extension is allowed interactive access (true) or read-only\naccess (false; default) to the automation tree."
													},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 8960,
															"character": 14
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 2696,
													"name": "matches",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "A list of URL patterns for which this extension may request an automation\ntree. If not specified, automation permission will be granted for the sites\nfor which the extension has a <a\nhref='https://developer.chrome.com/extensions/declare_permissions#host-permissions'>host permission</a> or <a href='https://developer.chrome.com/extensions/declare_permissions#activeTab'>activeTab permission</a>)."
													},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 8954,
															"character": 13
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														2695,
														2697,
														2696
													]
												}
											],
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 8939,
													"character": 38
												}
											]
										}
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								2698,
								2701,
								2705,
								2727,
								2722,
								2710
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								2735,
								2709,
								2693
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 8933,
							"character": 42
						}
					]
				},
				{
					"id": 2739,
					"name": "fileBrowserHandler",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.fileBrowserHandler</code> API to extend the Chrome OS\nfile browser. For example, you can use this API to enable users to upload\nfiles to your website.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "fileBrowserHandler"
							},
							{
								"tag": "chrome-platform",
								"text": "chromeos"
							},
							{
								"tag": "chrome-permission",
								"text": "fileBrowserHandler\n"
							}
						]
					},
					"children": [
						{
							"id": 2756,
							"name": "FileHandlerExecuteEventDetails",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Event details payload for fileBrowserHandler.onExecute event."
							},
							"children": [
								{
									"id": 2757,
									"name": "entries",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Array of Entry instances representing files that are targets of this action\n(selected in ChromeOS file browser)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9209,
											"character": 13
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 2758,
									"name": "tab_id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The ID of the tab that raised this event. Tab IDs are unique within a browser\nsession."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9215,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2757,
										2758
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9204,
									"character": 51
								}
							]
						},
						{
							"id": 2759,
							"name": "onExecute",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when file system action is executed from ChromeOS file browser."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9263,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 2760,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 9263,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 2761,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 2762,
															"name": "id",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "File browser action id as specified in the listener component's manifest."
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 2763,
															"name": "details",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "File handler execute event details.\n"
															},
															"type": {
																"type": "reference",
																"id": 2756,
																"name": "FileHandlerExecuteEventDetails"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 2740,
							"name": "selectFile",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9230,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 2741,
									"name": "selectFile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Prompts user to select file path under which file should be saved. When the\nfile is selected, file access permission required to use the file (read,\nwrite and create) are granted to the caller. The file will not actually get\ncreated during the function call, so function caller must ensure its\nexistence before using it. The function has to be invoked with a user\ngesture."
									},
									"parameters": [
										{
											"id": 2742,
											"name": "selectionParams",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Parameters that will be used while selecting the file."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2743,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 2745,
															"name": "allowedFileExtensions",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "List of file extensions that the selected file can have. The list is also\nused to specify what files to be shown in the select file dialog. Files with\nthe listed extensions are only shown in the dialog. Extensions should not\ninclude the leading '.'. Example: ['jpg', 'png']"
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 9243,
																	"character": 29
																}
															],
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														},
														{
															"id": 2744,
															"name": "suggestedName",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "Suggested name for the file."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 9235,
																	"character": 21
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																2745,
																2744
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 9231,
															"character": 22
														}
													]
												}
											}
										},
										{
											"id": 2746,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function called upon completion."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2747,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 9245,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 2748,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 2749,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "Result of the method.\n"
																	},
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 2750,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 2752,
																					"name": "entry",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {
																						"isOptional": true
																					},
																					"comment": {
																						"shortText": "Selected file entry. It will be null if a file hasn't been selected."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 9255,
																							"character": 15
																						}
																					],
																					"type": {
																						"type": "reflection",
																						"declaration": {
																							"id": 2753,
																							"name": "__type",
																							"kind": 65536,
																							"kindString": "Type literal",
																							"flags": {},
																							"sources": [
																								{
																									"fileName": "npm/index.d.ts",
																									"line": 9255,
																									"character": 17
																								}
																							],
																							"indexSignature": {
																								"id": 2754,
																								"name": "__index",
																								"kind": 8192,
																								"kindString": "Index signature",
																								"flags": {},
																								"parameters": [
																									{
																										"id": 2755,
																										"name": "name",
																										"kind": 32768,
																										"flags": {},
																										"type": {
																											"type": "intrinsic",
																											"name": "string"
																										}
																									}
																								],
																								"type": {
																									"type": "intrinsic",
																									"name": "any"
																								}
																							}
																						}
																					}
																				},
																				{
																					"id": 2751,
																					"name": "success",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"comment": {
																						"shortText": "Whether the file has been selected."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 9250,
																							"character": 17
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "boolean"
																					}
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						2752,
																						2751
																					]
																				}
																			],
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 9246,
																					"character": 15
																				}
																			]
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								2756
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								2759
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								2740
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 9200,
							"character": 37
						}
					]
				},
				{
					"id": 2764,
					"name": "fileSystemProvider",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.fileSystemProvider</code> API to create file systems,\nthat can be accessible from the file manager on Chrome OS.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "fileSystemProvider"
							},
							{
								"tag": "chrome-platform",
								"text": "chromeos"
							},
							{
								"tag": "chrome-permission",
								"text": "fileSystemProvider\n"
							}
						]
					},
					"children": [
						{
							"id": 2909,
							"name": "AbortRequestedOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2910,
									"name": "fileSystemId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The identifier of the file system related to this operation."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9815,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2912,
									"name": "operationRequestId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "An ID of the request to be aborted."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9825,
											"character": 24
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2911,
									"name": "requestId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The unique identifier of this request."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9820,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2910,
										2912,
										2911
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9811,
									"character": 42
								}
							]
						},
						{
							"id": 2923,
							"name": "Action",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2924,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The identifier of the action. Any string or {@link CommonActionId} for common\nactions."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9878,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2925,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The title of the action. It may be ignored for common actions."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9883,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2924,
										2925
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9873,
									"character": 27
								}
							]
						},
						{
							"id": 2913,
							"name": "AddWatcherRequestedOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2916,
									"name": "entryPath",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The path of the entry to be observed."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9842,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2914,
									"name": "fileSystemId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The identifier of the file system related to this operation."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9832,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2917,
									"name": "recursive",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Whether observing should include all child entries recursively. It can be\ntrue for directories only."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9848,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2915,
									"name": "requestId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The unique identifier of this request."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9837,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2916,
										2914,
										2917,
										2915
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9828,
									"character": 47
								}
							]
						},
						{
							"id": 2931,
							"name": "Change",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2933,
									"name": "changeType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The type of the change which happened to the entry."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9917,
											"character": 16
										}
									],
									"type": {
										"type": "reference",
										"id": 2798,
										"name": "ChangeType"
									}
								},
								{
									"id": 2932,
									"name": "entryPath",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The path of the changed entry."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9912,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2933,
										2932
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9908,
									"character": 27
								}
							]
						},
						{
							"id": 2864,
							"name": "CloseFileRequestedOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2865,
									"name": "fileSystemId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The identifier of the file system related to this operation."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9617,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2867,
									"name": "openRequestId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "A request ID used to open the file."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9627,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2866,
									"name": "requestId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The unique identifier of this request."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9622,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2865,
										2867,
										2866
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9613,
									"character": 46
								}
							]
						},
						{
							"id": 2941,
							"name": "ConfigureRequestedOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2942,
									"name": "fileSystemId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The identifier of the file system to be configured."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9962,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2943,
									"name": "requestId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The unique identifier of this request."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9967,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2942,
										2943
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9958,
									"character": 46
								}
							]
						},
						{
							"id": 2888,
							"name": "CopyEntryRequestedOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2889,
									"name": "fileSystemId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The identifier of the file system related to this operation."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9722,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2890,
									"name": "requestId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The unique identifier of this request."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9727,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2891,
									"name": "sourcePath",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The source path of the entry to be copied."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9732,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2892,
									"name": "targetPath",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The destination path for the copy operation."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9737,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2889,
										2890,
										2891,
										2892
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9718,
									"character": 46
								}
							]
						},
						{
							"id": 2874,
							"name": "CreateDirectoryRequestedOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2877,
									"name": "directoryPath",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The path of the directory to be created."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9671,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2875,
									"name": "fileSystemId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The identifier of the file system related to this operation."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9661,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2878,
									"name": "recursive",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Whether the operation is recursive (for directories only)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9676,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2876,
									"name": "requestId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The unique identifier of this request."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9666,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2877,
										2875,
										2878,
										2876
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9657,
									"character": 52
								}
							]
						},
						{
							"id": 2884,
							"name": "CreateFileRequestedOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2887,
									"name": "filePath",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The path of the file to be created."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9715,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2885,
									"name": "fileSystemId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The identifier of the file system related to this operation."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9705,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2886,
									"name": "requestId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The unique identifier of this request."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9710,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2887,
										2885,
										2886
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9701,
									"character": 47
								}
							]
						},
						{
							"id": 2879,
							"name": "DeleteEntryRequestedOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2882,
									"name": "entryPath",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The path of the entry to be deleted."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9693,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2880,
									"name": "fileSystemId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The identifier of the file system related to this operation."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9683,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2883,
									"name": "recursive",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Whether the operation is recursive (for directories only)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9698,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2881,
									"name": "requestId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The unique identifier of this request."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9688,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2882,
										2880,
										2883,
										2881
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9679,
									"character": 48
								}
							]
						},
						{
							"id": 2800,
							"name": "EntryMetadata",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2801,
									"name": "isDirectory",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "True if it is a directory. Must be provided if requested in\n<code>options</code>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9317,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2805,
									"name": "mimeType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Mime type for the entry. Always optional, but should be provided if requested\nin <code>options</code>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9340,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2804,
									"name": "modificationTime",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The last modified time of this entry. Must be provided if requested in\n<code>options</code>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9334,
											"character": 22
										}
									],
									"type": {
										"type": "reference",
										"name": "Date"
									}
								},
								{
									"id": 2802,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Name of this entry (not full path name). Must not contain '/'. For root it\nmust be empty. Must be provided if requested in <code>options</code>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9323,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2803,
									"name": "size",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "File size in bytes. Must be provided if requested in <code>options</code>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9328,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2806,
									"name": "thumbnail",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Thumbnail image as a data URI in either PNG, JPEG or WEBP format, at most 32\nKB in size. Optional, but can be provided only when explicitly requested by\nthe {@link onGetMetadataRequested} event."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9347,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2801,
										2805,
										2804,
										2802,
										2803,
										2806
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9312,
									"character": 34
								}
							]
						},
						{
							"id": 2926,
							"name": "ExecuteActionRequestedOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2930,
									"name": "actionId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The identifier of the action to be executed."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9905,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2929,
									"name": "entryPaths",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The set of paths of the entries to be used for the action."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9900,
											"character": 16
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 2927,
									"name": "fileSystemId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The identifier of the file system related to this operation."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9890,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2928,
									"name": "requestId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The unique identifier of this request."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9895,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2930,
										2929,
										2927,
										2928
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9886,
									"character": 50
								}
							]
						},
						{
							"id": 2815,
							"name": "FileSystemInfo",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2817,
									"name": "displayName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "A human-readable name for the file system."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9394,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2816,
									"name": "fileSystemId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The identifier of the file system."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9389,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2820,
									"name": "openedFiles",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "List of currently opened files."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9411,
											"character": 17
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 2811,
											"name": "OpenedFile"
										}
									}
								},
								{
									"id": 2819,
									"name": "openedFilesLimit",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The maximum number of files that can be opened at once. If 0, then not\nlimited."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9406,
											"character": 22
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2821,
									"name": "supportsNotifyTag",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Whether the file system supports the <code>tag</code> field for observing\ndirectories."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9417,
											"character": 23
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2822,
									"name": "watchers",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "List of watchers."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9422,
											"character": 14
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 2807,
											"name": "Watcher"
										}
									}
								},
								{
									"id": 2818,
									"name": "writable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Whether the file system supports operations which may change contents of the\nfile system (such as creating, deleting or writing to files)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9400,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2817,
										2816,
										2820,
										2819,
										2821,
										2822,
										2818
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9385,
									"character": 35
								}
							]
						},
						{
							"id": 2845,
							"name": "GetActionsRequestedOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2848,
									"name": "entryPaths",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "List of paths of entries for the list of actions."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9541,
											"character": 16
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 2846,
									"name": "fileSystemId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The identifier of the file system related to this operation."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9531,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2847,
									"name": "requestId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The unique identifier of this request."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9536,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2848,
										2846,
										2847
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9527,
									"character": 47
								}
							]
						},
						{
							"id": 2835,
							"name": "GetMetadataRequestedOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2838,
									"name": "entryPath",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The path of the entry to fetch metadata about."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9494,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2836,
									"name": "fileSystemId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The identifier of the file system related to this operation."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9484,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2839,
									"name": "isDirectory",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Set to <code>true</code> if <code>is_directory</code> value is requested."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9499,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2843,
									"name": "mimeType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Set to <code>true</code> if <code>mimeType</code> value is requested."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9519,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2842,
									"name": "modificationTime",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Set to <code>true</code> if <code>modificationTime</code> value is requested."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9514,
											"character": 22
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2840,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Set to <code>true</code> if <code>name</code> value is requested."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9504,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2837,
									"name": "requestId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The unique identifier of this request."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9489,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2841,
									"name": "size",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Set to <code>true</code> if <code>size</code> value is requested."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9509,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2844,
									"name": "thumbnail",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Set to <code>true</code> if the thumbnail is requested."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9524,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2838,
										2836,
										2839,
										2843,
										2842,
										2840,
										2837,
										2841,
										2844
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9480,
									"character": 48
								}
							]
						},
						{
							"id": 2823,
							"name": "MountOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2825,
									"name": "displayName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "A human-readable name for the file system."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9434,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2824,
									"name": "fileSystemId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The string indentifier of the file system. Must be unique per each extension."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9429,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2827,
									"name": "openedFilesLimit",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The maximum number of files that can be opened at once. If not specified, or\n0, then not limited."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9446,
											"character": 22
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2829,
									"name": "persistent",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Whether the framework should resume the file system at the next sign-in\nsession. True by default."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9458,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2828,
									"name": "supportsNotifyTag",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Whether the file system supports the <code>tag</code> field for observed\ndirectories."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9452,
											"character": 23
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2826,
									"name": "writable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Whether the file system supports operations which may change contents of the\nfile system (such as creating, deleting or writing to files)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9440,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2825,
										2824,
										2827,
										2829,
										2828,
										2826
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9425,
									"character": 33
								}
							]
						},
						{
							"id": 2893,
							"name": "MoveEntryRequestedOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2894,
									"name": "fileSystemId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The identifier of the file system related to this operation."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9744,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2895,
									"name": "requestId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The unique identifier of this request."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9749,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2896,
									"name": "sourcePath",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The source path of the entry to be moved into a new place."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9754,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2897,
									"name": "targetPath",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The destination path for the copy operation."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9759,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2894,
										2895,
										2896,
										2897
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9740,
									"character": 46
								}
							]
						},
						{
							"id": 2934,
							"name": "NotifyOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2938,
									"name": "changeType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The type of the change which happened to the observed entry. If it is\nDELETED, then the observed entry will be automatically removed from the list\nof observed entries."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9941,
											"character": 16
										}
									],
									"type": {
										"type": "reference",
										"id": 2798,
										"name": "ChangeType"
									}
								},
								{
									"id": 2939,
									"name": "changes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "List of changes to entries within the observed directory (including the entry\nitself)"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9947,
											"character": 13
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 2931,
											"name": "Change"
										}
									}
								},
								{
									"id": 2935,
									"name": "fileSystemId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The identifier of the file system related to this change."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9924,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2936,
									"name": "observedPath",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The path of the observed entry."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9929,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2937,
									"name": "recursive",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Mode of the observed entry."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9934,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2940,
									"name": "tag",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Tag for the notification. Required if the file system was mounted with the\n<code>supportsNotifyTag</code> option. Note, that this flag is necessary to\nprovide notifications about changes which changed even when the system was\nshutdown."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9955,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2938,
										2939,
										2935,
										2936,
										2937,
										2940
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9920,
									"character": 34
								}
							]
						},
						{
							"id": 2859,
							"name": "OpenFileRequestedOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2862,
									"name": "filePath",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The path of the file to be opened."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9605,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2860,
									"name": "fileSystemId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The identifier of the file system related to this operation."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9595,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2863,
									"name": "mode",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Whether the file will be used for reading or writing."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9610,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 2797,
										"name": "OpenFileMode"
									}
								},
								{
									"id": 2861,
									"name": "requestId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "A request ID which will be used by consecutive read/write and close requests."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9600,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2862,
										2860,
										2863,
										2861
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9591,
									"character": 45
								}
							]
						},
						{
							"id": 2811,
							"name": "OpenedFile",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2813,
									"name": "filePath",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The path of the opened file."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9377,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2814,
									"name": "mode",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Whether the file was opened for reading or writing."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9382,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 2797,
										"name": "OpenFileMode"
									}
								},
								{
									"id": 2812,
									"name": "openRequestId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "A request ID to be be used by consecutive read/write and close requests."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9372,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2813,
										2814,
										2812
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9368,
									"character": 31
								}
							]
						},
						{
							"id": 2849,
							"name": "ReadDirectoryRequestedOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2852,
									"name": "directoryPath",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The path of the directory which contents are requested."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9558,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2850,
									"name": "fileSystemId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The identifier of the file system related to this operation."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9548,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2853,
									"name": "isDirectory",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Set to <code>true</code> if <code>is_directory</code> value is requested."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9563,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2857,
									"name": "mimeType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Set to <code>true</code> if <code>mimeType</code> value is requested."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9583,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2856,
									"name": "modificationTime",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Set to <code>true</code> if <code>modificationTime</code> value is requested."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9578,
											"character": 22
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2854,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Set to <code>true</code> if <code>name</code> value is requested."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9568,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2851,
									"name": "requestId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The unique identifier of this request."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9553,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2855,
									"name": "size",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Set to <code>true</code> if <code>size</code> value is requested."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9573,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2858,
									"name": "thumbnail",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Set to <code>true</code> if the thumbnail is requested."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9588,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2852,
										2850,
										2853,
										2857,
										2856,
										2854,
										2851,
										2855,
										2858
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9544,
									"character": 50
								}
							]
						},
						{
							"id": 2868,
							"name": "ReadFileRequestedOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2869,
									"name": "fileSystemId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The identifier of the file system related to this operation."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9634,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2873,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Number of bytes to be returned."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9654,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2872,
									"name": "offset",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Position in the file (in bytes) to start reading from."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9649,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2871,
									"name": "openRequestId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "A request ID used to open the file."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9644,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2870,
									"name": "requestId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The unique identifier of this request."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9639,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2869,
										2873,
										2872,
										2871,
										2870
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9630,
									"character": 45
								}
							]
						},
						{
							"id": 2918,
							"name": "RemoveWatcherRequestedOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2921,
									"name": "entryPath",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The path of the watched entry."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9865,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2919,
									"name": "fileSystemId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The identifier of the file system related to this operation."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9855,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2922,
									"name": "recursive",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Mode of the watcher."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9870,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2920,
									"name": "requestId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The unique identifier of this request."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9860,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2921,
										2919,
										2922,
										2920
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9851,
									"character": 50
								}
							]
						},
						{
							"id": 2898,
							"name": "TruncateRequestedOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2901,
									"name": "filePath",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The path of the file to be truncated."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9776,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2899,
									"name": "fileSystemId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The identifier of the file system related to this operation."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9766,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2902,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Number of bytes to be retained after the operation completes."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9781,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2900,
									"name": "requestId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The unique identifier of this request."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9771,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2901,
										2899,
										2902,
										2900
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9762,
									"character": 45
								}
							]
						},
						{
							"id": 2830,
							"name": "UnmountOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2831,
									"name": "fileSystemId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The identifier of the file system to be unmounted."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9465,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2831
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9461,
									"character": 35
								}
							]
						},
						{
							"id": 2832,
							"name": "UnmountRequestedOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2833,
									"name": "fileSystemId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The identifier of the file system to be unmounted."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9472,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2834,
									"name": "requestId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The unique identifier of this request."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9477,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2833,
										2834
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9468,
									"character": 44
								}
							]
						},
						{
							"id": 2807,
							"name": "Watcher",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2808,
									"name": "entryPath",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The path of the entry being observed."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9354,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2810,
									"name": "lastTag",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Tag used by the last notification for the watcher."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9365,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2809,
									"name": "recursive",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Whether watching should include all child entries recursively. It can be true\nfor directories only."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9360,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2808,
										2810,
										2809
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9350,
									"character": 28
								}
							]
						},
						{
							"id": 2903,
							"name": "WriteFileRequestedOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2908,
									"name": "data",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Buffer of bytes to be written to the file."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9808,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "ArrayBuffer"
									}
								},
								{
									"id": 2904,
									"name": "fileSystemId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The identifier of the file system related to this operation."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9788,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2907,
									"name": "offset",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Position in the file (in bytes) to start writing the bytes from."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9803,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2906,
									"name": "openRequestId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "A request ID used to open the file."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9798,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2905,
									"name": "requestId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The unique identifier of this request."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 9793,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2908,
										2904,
										2907,
										2906,
										2905
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9784,
									"character": 46
								}
							]
						},
						{
							"id": 2798,
							"name": "ChangeType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "Type of a change detected on the observed directory."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9301,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "CHANGED"
									},
									{
										"type": "literal",
										"value": "DELETED"
									}
								]
							}
						},
						{
							"id": 2799,
							"name": "CommonActionId",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "List of common actions. <code>\"SHARE\"</code> is for sharing files with\nothers. <code>\"SAVE_FOR_OFFLINE\"</code> for pinning (saving for offline\naccess). <code>\"OFFLINE_NOT_NECESSARY\"</code> for notifying that the file\ndoesn't need to be stored for offline access anymore. Used by {@link\nonGetActionsRequested} and {@link onExecuteActionRequested}."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9310,
									"character": 30
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "SAVE_FOR_OFFLINE"
									},
									{
										"type": "literal",
										"value": "OFFLINE_NOT_NECESSARY"
									},
									{
										"type": "literal",
										"value": "SHARE"
									}
								]
							}
						},
						{
							"id": 2797,
							"name": "OpenFileMode",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "Mode of opening a file. Used by {@link onOpenFileRequested}."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9296,
									"character": 28
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "READ"
									},
									{
										"type": "literal",
										"value": "WRITE"
									}
								]
							}
						},
						{
							"id": 2796,
							"name": "ProviderError",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "Error codes used by providing extensions in response to requests as well as\nin case of errors when calling methods of the API. For success,\n<code>\"OK\"</code> must be used."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9291,
									"character": 29
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "OK"
									},
									{
										"type": "literal",
										"value": "FAILED"
									},
									{
										"type": "literal",
										"value": "IN_USE"
									},
									{
										"type": "literal",
										"value": "EXISTS"
									},
									{
										"type": "literal",
										"value": "NOT_FOUND"
									},
									{
										"type": "literal",
										"value": "ACCESS_DENIED"
									},
									{
										"type": "literal",
										"value": "TOO_MANY_OPENED"
									},
									{
										"type": "literal",
										"value": "NO_MEMORY"
									},
									{
										"type": "literal",
										"value": "NO_SPACE"
									},
									{
										"type": "literal",
										"value": "NOT_A_DIRECTORY"
									},
									{
										"type": "literal",
										"value": "INVALID_OPERATION"
									},
									{
										"type": "literal",
										"value": "SECURITY"
									},
									{
										"type": "literal",
										"value": "ABORT"
									},
									{
										"type": "literal",
										"value": "NOT_A_FILE"
									},
									{
										"type": "literal",
										"value": "NOT_EMPTY"
									},
									{
										"type": "literal",
										"value": "INVALID_URL"
									},
									{
										"type": "literal",
										"value": "IO"
									}
								]
							}
						},
						{
							"id": 3104,
							"name": "onAbortRequested",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Raised when aborting an operation with <code>operationRequestId</code> is\nrequested. The operation executed with <code>operationRequestId</code> must\nbe immediately stopped and <code>successCallback</code> of this abort request\nexecuted. If aborting fails, then <code>errorCallback</code> must be called.\nNote, that callbacks of the aborted operation must not be called, as they\nwill be ignored. Despite calling <code>errorCallback</code>, the request may\nbe forcibly aborted."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10356,
									"character": 33
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 3105,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 10356,
													"character": 55
												}
											],
											"signatures": [
												{
													"id": 3106,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 3107,
															"name": "options",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "reference",
																"id": 2909,
																"name": "AbortRequestedOptions"
															}
														},
														{
															"id": 3108,
															"name": "successCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Callback to be called by the providing extension in case of a success.\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3109,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10363,
																			"character": 24
																		}
																	],
																	"signatures": [
																		{
																			"id": 3110,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														},
														{
															"id": 3111,
															"name": "errorCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3112,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10364,
																			"character": 22
																		}
																	],
																	"signatures": [
																		{
																			"id": 3113,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 3114,
																					"name": "error",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"id": 2796,
																						"name": "ProviderError"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 3136,
							"name": "onAddWatcherRequested",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Raised when setting a new directory watcher is requested. If an error occurs,\nthen <code>errorCallback</code> must be called."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10414,
									"character": 38
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 3137,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 10414,
													"character": 60
												}
											],
											"signatures": [
												{
													"id": 3138,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 3139,
															"name": "options",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "reference",
																"id": 2913,
																"name": "AddWatcherRequestedOptions"
															}
														},
														{
															"id": 3140,
															"name": "successCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Callback to be called by the providing extension in case of a success.\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3141,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10421,
																			"character": 24
																		}
																	],
																	"signatures": [
																		{
																			"id": 3142,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														},
														{
															"id": 3143,
															"name": "errorCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3144,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10422,
																			"character": 22
																		}
																	],
																	"signatures": [
																		{
																			"id": 3145,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 3146,
																					"name": "error",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"id": 2796,
																						"name": "ProviderError"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 3003,
							"name": "onCloseFileRequested",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Raised when opening a file previously opened with <code>openRequestId</code>\nis requested to be closed."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10178,
									"character": 37
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 3004,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 10178,
													"character": 59
												}
											],
											"signatures": [
												{
													"id": 3005,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 3006,
															"name": "options",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "reference",
																"id": 2864,
																"name": "CloseFileRequestedOptions"
															}
														},
														{
															"id": 3007,
															"name": "successCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Callback to be called by the providing extension in case of a success.\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3008,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10185,
																			"character": 24
																		}
																	],
																	"signatures": [
																		{
																			"id": 3009,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														},
														{
															"id": 3010,
															"name": "errorCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3011,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10186,
																			"character": 22
																		}
																	],
																	"signatures": [
																		{
																			"id": 3012,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 3013,
																					"name": "error",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"id": 2796,
																						"name": "ProviderError"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 3115,
							"name": "onConfigureRequested",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Raised when showing a configuration dialog for <code>fileSystemId</code> is\nrequested. If it's handled, the\n<code>file_system_provider.configurable</code> manfiest option must be set to\ntrue."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10376,
									"character": 37
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 3116,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 10376,
													"character": 59
												}
											],
											"signatures": [
												{
													"id": 3117,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 3118,
															"name": "options",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "reference",
																"id": 2941,
																"name": "ConfigureRequestedOptions"
															}
														},
														{
															"id": 3119,
															"name": "successCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Callback to be called by the providing extension in case of a success.\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3120,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10383,
																			"character": 24
																		}
																	],
																	"signatures": [
																		{
																			"id": 3121,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														},
														{
															"id": 3122,
															"name": "errorCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3123,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10384,
																			"character": 22
																		}
																	],
																	"signatures": [
																		{
																			"id": 3124,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 3125,
																					"name": "error",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"id": 2796,
																						"name": "ProviderError"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 3060,
							"name": "onCopyEntryRequested",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Raised when copying an entry (recursively if a directory) is requested. If an\nerror occurs, then <code>errorCallback</code> must be called."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10279,
									"character": 37
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 3061,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 10279,
													"character": 59
												}
											],
											"signatures": [
												{
													"id": 3062,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 3063,
															"name": "options",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "reference",
																"id": 2888,
																"name": "CopyEntryRequestedOptions"
															}
														},
														{
															"id": 3064,
															"name": "successCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Callback to be called by the providing extension in case of a success.\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3065,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10286,
																			"character": 24
																		}
																	],
																	"signatures": [
																		{
																			"id": 3066,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														},
														{
															"id": 3067,
															"name": "errorCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3068,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10287,
																			"character": 22
																		}
																	],
																	"signatures": [
																		{
																			"id": 3069,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 3070,
																					"name": "error",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"id": 2796,
																						"name": "ProviderError"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 3027,
							"name": "onCreateDirectoryRequested",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Raised when creating a directory is requested. The operation must fail with\nthe EXISTS error if the target directory already exists. If\n<code>recursive</code> is true, then all of the missing directories on the\ndirectory path must be created."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10223,
									"character": 43
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 3028,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 10223,
													"character": 65
												}
											],
											"signatures": [
												{
													"id": 3029,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 3030,
															"name": "options",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "reference",
																"id": 2874,
																"name": "CreateDirectoryRequestedOptions"
															}
														},
														{
															"id": 3031,
															"name": "successCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Callback to be called by the providing extension in case of a success.\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3032,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10230,
																			"character": 24
																		}
																	],
																	"signatures": [
																		{
																			"id": 3033,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														},
														{
															"id": 3034,
															"name": "errorCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3035,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10231,
																			"character": 22
																		}
																	],
																	"signatures": [
																		{
																			"id": 3036,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 3037,
																					"name": "error",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"id": 2796,
																						"name": "ProviderError"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 3049,
							"name": "onCreateFileRequested",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Raised when creating a file is requested. If the file already exists, then\n<code>errorCallback</code> must be called with the <code>\"EXISTS\"</code>\nerror code."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10261,
									"character": 38
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 3050,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 10261,
													"character": 60
												}
											],
											"signatures": [
												{
													"id": 3051,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 3052,
															"name": "options",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "reference",
																"id": 2884,
																"name": "CreateFileRequestedOptions"
															}
														},
														{
															"id": 3053,
															"name": "successCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Callback to be called by the providing extension in case of a success.\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3054,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10268,
																			"character": 24
																		}
																	],
																	"signatures": [
																		{
																			"id": 3055,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														},
														{
															"id": 3056,
															"name": "errorCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3057,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10269,
																			"character": 22
																		}
																	],
																	"signatures": [
																		{
																			"id": 3058,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 3059,
																					"name": "error",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"id": 2796,
																						"name": "ProviderError"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 3038,
							"name": "onDeleteEntryRequested",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Raised when deleting an entry is requested. If <code>recursive</code> is\ntrue, and the entry is a directory, then all of the entries inside must be\nrecursively deleted as well."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10242,
									"character": 39
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 3039,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 10242,
													"character": 61
												}
											],
											"signatures": [
												{
													"id": 3040,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 3041,
															"name": "options",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "reference",
																"id": 2879,
																"name": "DeleteEntryRequestedOptions"
															}
														},
														{
															"id": 3042,
															"name": "successCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Callback to be called by the providing extension in case of a success.\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3043,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10249,
																			"character": 24
																		}
																	],
																	"signatures": [
																		{
																			"id": 3044,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														},
														{
															"id": 3045,
															"name": "errorCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3046,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10250,
																			"character": 22
																		}
																	],
																	"signatures": [
																		{
																			"id": 3047,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 3048,
																					"name": "error",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"id": 2796,
																						"name": "ProviderError"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 3158,
							"name": "onExecuteActionRequested",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Raised when executing an action for a set of files or directories is\\\nrequested. After the action is completed, <code>successCallback</code> must\nbe called. On error, <code>errorCallback</code> must be called."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10451,
									"character": 41
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 3159,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 10451,
													"character": 63
												}
											],
											"signatures": [
												{
													"id": 3160,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 3161,
															"name": "options",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "reference",
																"id": 2926,
																"name": "ExecuteActionRequestedOptions"
															}
														},
														{
															"id": 3162,
															"name": "successCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Callback to be called by the providing extension in case of a success.\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3163,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10458,
																			"character": 24
																		}
																	],
																	"signatures": [
																		{
																			"id": 3164,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														},
														{
															"id": 3165,
															"name": "errorCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3166,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10459,
																			"character": 22
																		}
																	],
																	"signatures": [
																		{
																			"id": 3167,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 3168,
																					"name": "error",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"id": 2796,
																						"name": "ProviderError"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 2967,
							"name": "onGetActionsRequested",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Raised when a list of actions for a set of files or directories at\n<code>entryPaths</code> is requested. All of the returned actions must be\napplicable to each entry. If there are no such actions, an empty array should\nbe returned. The actions must be returned with the\n<code>successCallback</code> call. In case of an error,\n<code>errorCallback</code> must be called."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10113,
									"character": 38
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 2968,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 10113,
													"character": 60
												}
											],
											"signatures": [
												{
													"id": 2969,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 2970,
															"name": "options",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "reference",
																"id": 2845,
																"name": "GetActionsRequestedOptions"
															}
														},
														{
															"id": 2971,
															"name": "successCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Success callback for the {@link onGetActionsRequested} event."
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 2972,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10121,
																			"character": 24
																		}
																	],
																	"signatures": [
																		{
																			"id": 2973,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 2974,
																					"name": "actions",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"comment": {
																						"text": "\n"
																					},
																					"type": {
																						"type": "array",
																						"elementType": {
																							"type": "reference",
																							"id": 2923,
																							"name": "Action"
																						}
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														},
														{
															"id": 2975,
															"name": "errorCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 2976,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10124,
																			"character": 22
																		}
																	],
																	"signatures": [
																		{
																			"id": 2977,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 2978,
																					"name": "error",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"id": 2796,
																						"name": "ProviderError"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 2955,
							"name": "onGetMetadataRequested",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Raised when metadata of a file or a directory at <code>entryPath</code> is\nrequested. The metadata must be returned with the\n<code>successCallback</code> call. In case of an error,\n<code>errorCallback</code> must be called."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10088,
									"character": 39
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 2956,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 10088,
													"character": 61
												}
											],
											"signatures": [
												{
													"id": 2957,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 2958,
															"name": "options",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "reference",
																"id": 2835,
																"name": "GetMetadataRequestedOptions"
															}
														},
														{
															"id": 2959,
															"name": "successCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Success callback for the {@link onGetMetadataRequested} event."
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 2960,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10096,
																			"character": 24
																		}
																	],
																	"signatures": [
																		{
																			"id": 2961,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 2962,
																					"name": "metadata",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"comment": {
																						"text": "\n"
																					},
																					"type": {
																						"type": "reference",
																						"id": 2800,
																						"name": "EntryMetadata"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														},
														{
															"id": 2963,
															"name": "errorCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 2964,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10099,
																			"character": 22
																		}
																	],
																	"signatures": [
																		{
																			"id": 2965,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 2966,
																					"name": "error",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"id": 2796,
																						"name": "ProviderError"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 3126,
							"name": "onMountRequested",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Raised when showing a dialog for mounting a new file system is requested. If\nthe extension/app is a file handler, then this event shouldn't be handled.\nInstead <code>app.runtime.onLaunched</code> should be handled in order to\nmount new file systems when a file is opened. For multiple mounts, the\n<code>file_system_provider.multiple_mounts</code> manifest option must be set\nto true."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10398,
									"character": 33
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 3127,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 10398,
													"character": 55
												}
											],
											"signatures": [
												{
													"id": 3128,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 3129,
															"name": "successCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Callback to be called by the providing extension in case of a success.\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3130,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10403,
																			"character": 24
																		}
																	],
																	"signatures": [
																		{
																			"id": 3131,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														},
														{
															"id": 3132,
															"name": "errorCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3133,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10404,
																			"character": 22
																		}
																	],
																	"signatures": [
																		{
																			"id": 3134,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 3135,
																					"name": "error",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"id": 2796,
																						"name": "ProviderError"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 3071,
							"name": "onMoveEntryRequested",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Raised when moving an entry (recursively if a directory) is requested. If an\nerror occurs, then <code>errorCallback</code> must be called."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10297,
									"character": 37
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 3072,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 10297,
													"character": 59
												}
											],
											"signatures": [
												{
													"id": 3073,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 3074,
															"name": "options",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "reference",
																"id": 2893,
																"name": "MoveEntryRequestedOptions"
															}
														},
														{
															"id": 3075,
															"name": "successCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Callback to be called by the providing extension in case of a success.\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3076,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10304,
																			"character": 24
																		}
																	],
																	"signatures": [
																		{
																			"id": 3077,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														},
														{
															"id": 3078,
															"name": "errorCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3079,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10305,
																			"character": 22
																		}
																	],
																	"signatures": [
																		{
																			"id": 3080,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 3081,
																					"name": "error",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"id": 2796,
																						"name": "ProviderError"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 2992,
							"name": "onOpenFileRequested",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Raised when opening a file at <code>filePath</code> is requested. If the file\ndoes not exist, then the operation must fail. Maximum number of files opened\nat once can be specified with <code>MountOptions</code>."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10160,
									"character": 36
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 2993,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 10160,
													"character": 58
												}
											],
											"signatures": [
												{
													"id": 2994,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 2995,
															"name": "options",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "reference",
																"id": 2859,
																"name": "OpenFileRequestedOptions"
															}
														},
														{
															"id": 2996,
															"name": "successCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Callback to be called by the providing extension in case of a success.\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 2997,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10167,
																			"character": 24
																		}
																	],
																	"signatures": [
																		{
																			"id": 2998,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														},
														{
															"id": 2999,
															"name": "errorCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3000,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10168,
																			"character": 22
																		}
																	],
																	"signatures": [
																		{
																			"id": 3001,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 3002,
																					"name": "error",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"id": 2796,
																						"name": "ProviderError"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 2979,
							"name": "onReadDirectoryRequested",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Raised when contents of a directory at <code>directoryPath</code> are\nrequested. The results must be returned in chunks by calling the\n<code>successCallback</code> several times. In case of an error,\n<code>errorCallback</code> must be called."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10136,
									"character": 41
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 2980,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 10136,
													"character": 63
												}
											],
											"signatures": [
												{
													"id": 2981,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 2982,
															"name": "options",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "reference",
																"id": 2849,
																"name": "ReadDirectoryRequestedOptions"
															}
														},
														{
															"id": 2983,
															"name": "successCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Success callback for the {@link onReadDirectoryRequested} event. If more entries will be returned, then <code>hasMore</code> must be true, and it has to be called again with additional entries. If no more entries are available, then <code>hasMore</code> must be set to false."
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 2984,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10145,
																			"character": 24
																		}
																	],
																	"signatures": [
																		{
																			"id": 2985,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 2986,
																					"name": "entries",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"comment": {},
																					"type": {
																						"type": "array",
																						"elementType": {
																							"type": "reference",
																							"id": 2800,
																							"name": "EntryMetadata"
																						}
																					}
																				},
																				{
																					"id": 2987,
																					"name": "hasMore",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"comment": {
																						"text": "\n"
																					},
																					"type": {
																						"type": "intrinsic",
																						"name": "boolean"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														},
														{
															"id": 2988,
															"name": "errorCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 2989,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10149,
																			"character": 22
																		}
																	],
																	"signatures": [
																		{
																			"id": 2990,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 2991,
																					"name": "error",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"id": 2796,
																						"name": "ProviderError"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 3014,
							"name": "onReadFileRequested",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Raised when reading contents of a file opened previously with\n<code>openRequestId</code> is requested. The results must be returned in\nchunks by calling <code>successCallback</code> several times. In case of an\nerror, <code>errorCallback</code> must be called."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10198,
									"character": 36
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 3015,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 10198,
													"character": 58
												}
											],
											"signatures": [
												{
													"id": 3016,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 3017,
															"name": "options",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "reference",
																"id": 2868,
																"name": "ReadFileRequestedOptions"
															}
														},
														{
															"id": 3018,
															"name": "successCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Success callback for the {@link onReadFileRequested} event. If more data will be returned, then <code>hasMore</code> must be true, and it has to be called again with additional entries. If no more data is available, then <code>hasMore</code> must be set to false."
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3019,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10207,
																			"character": 24
																		}
																	],
																	"signatures": [
																		{
																			"id": 3020,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 3021,
																					"name": "data",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"comment": {},
																					"type": {
																						"type": "reference",
																						"name": "ArrayBuffer"
																					}
																				},
																				{
																					"id": 3022,
																					"name": "hasMore",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"comment": {
																						"text": "\n"
																					},
																					"type": {
																						"type": "intrinsic",
																						"name": "boolean"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														},
														{
															"id": 3023,
															"name": "errorCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3024,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10211,
																			"character": 22
																		}
																	],
																	"signatures": [
																		{
																			"id": 3025,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 3026,
																					"name": "error",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"id": 2796,
																						"name": "ProviderError"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 3147,
							"name": "onRemoveWatcherRequested",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Raised when the watcher should be removed. If an error occurs, then\n<code>errorCallback</code> must be called."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10432,
									"character": 41
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 3148,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 10432,
													"character": 63
												}
											],
											"signatures": [
												{
													"id": 3149,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 3150,
															"name": "options",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "reference",
																"id": 2918,
																"name": "RemoveWatcherRequestedOptions"
															}
														},
														{
															"id": 3151,
															"name": "successCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Callback to be called by the providing extension in case of a success.\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3152,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10439,
																			"character": 24
																		}
																	],
																	"signatures": [
																		{
																			"id": 3153,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														},
														{
															"id": 3154,
															"name": "errorCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3155,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10440,
																			"character": 22
																		}
																	],
																	"signatures": [
																		{
																			"id": 3156,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 3157,
																					"name": "error",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"id": 2796,
																						"name": "ProviderError"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 3082,
							"name": "onTruncateRequested",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Raised when truncating a file to a desired length is requested. If an error\noccurs, then <code>errorCallback</code> must be called."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10315,
									"character": 36
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 3083,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 10315,
													"character": 58
												}
											],
											"signatures": [
												{
													"id": 3084,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 3085,
															"name": "options",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "reference",
																"id": 2898,
																"name": "TruncateRequestedOptions"
															}
														},
														{
															"id": 3086,
															"name": "successCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Callback to be called by the providing extension in case of a success.\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3087,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10322,
																			"character": 24
																		}
																	],
																	"signatures": [
																		{
																			"id": 3088,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														},
														{
															"id": 3089,
															"name": "errorCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3090,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10323,
																			"character": 22
																		}
																	],
																	"signatures": [
																		{
																			"id": 3091,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 3092,
																					"name": "error",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"id": 2796,
																						"name": "ProviderError"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 2944,
							"name": "onUnmountRequested",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Raised when unmounting for the file system with the <code>fileSystemId</code>\nidentifier is requested. In the response, the {@link unmount} API method must\nbe called together with <code>successCallback</code>. If unmounting is not\npossible (eg. due to a pending operation), then <code>errorCallback</code>\nmust be called."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10068,
									"character": 35
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 2945,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 10068,
													"character": 57
												}
											],
											"signatures": [
												{
													"id": 2946,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 2947,
															"name": "options",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "reference",
																"id": 2832,
																"name": "UnmountRequestedOptions"
															}
														},
														{
															"id": 2948,
															"name": "successCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Callback to be called by the providing extension in case of a success.\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 2949,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10075,
																			"character": 24
																		}
																	],
																	"signatures": [
																		{
																			"id": 2950,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														},
														{
															"id": 2951,
															"name": "errorCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 2952,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10076,
																			"character": 22
																		}
																	],
																	"signatures": [
																		{
																			"id": 2953,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 2954,
																					"name": "error",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"id": 2796,
																						"name": "ProviderError"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 3093,
							"name": "onWriteFileRequested",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Raised when writing contents to a file opened previously with\n<code>openRequestId</code> is requested."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10333,
									"character": 37
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 3094,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 10333,
													"character": 59
												}
											],
											"signatures": [
												{
													"id": 3095,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 3096,
															"name": "options",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "reference",
																"id": 2903,
																"name": "WriteFileRequestedOptions"
															}
														},
														{
															"id": 3097,
															"name": "successCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Callback to be called by the providing extension in case of a success.\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3098,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10340,
																			"character": 24
																		}
																	],
																	"signatures": [
																		{
																			"id": 3099,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														},
														{
															"id": 3100,
															"name": "errorCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3101,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10341,
																			"character": 22
																		}
																	],
																	"signatures": [
																		{
																			"id": 3102,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 3103,
																					"name": "error",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"id": 2796,
																						"name": "ProviderError"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 2783,
							"name": "get",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10024,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 2784,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns information about a file system with the passed\n<code>fileSystemId</code>."
									},
									"parameters": [
										{
											"id": 2785,
											"name": "fileSystemId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2786,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Callback to receive the result of {@link get} function."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2787,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 10026,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 2788,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 2789,
																	"name": "fileSystem",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 2815,
																		"name": "FileSystemInfo"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 2777,
							"name": "getAll",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10010,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 2778,
									"name": "getAll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns all file systems mounted by the extension."
									},
									"parameters": [
										{
											"id": 2779,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Callback to receive the result of {@link getAll} function."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2780,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 10011,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 2781,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 2782,
																	"name": "fileSystems",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 2815,
																			"name": "FileSystemInfo"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 2765,
							"name": "mount",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9984,
									"character": 25
								}
							],
							"signatures": [
								{
									"id": 2766,
									"name": "mount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "<p>Mounts a file system with the given <code>fileSystemId</code> and\n<code>displayName</code>. <code>displayName</code> will be shown in the left\npanel of the Files app. <code>displayName</code> can contain any characters\nincluding '/', but cannot be an empty string. <code>displayName</code> must\nbe descriptive but doesn't have to be unique. The <code>fileSystemId</code>\nmust not be an empty string.</p><p>Depending on the type of the file system\nbeing mounted, the <code>source</code> option must be set\nappropriately.</p><p>In case of an error, {@link runtime.lastError} will be\nset with a corresponding error code.</p>"
									},
									"parameters": [
										{
											"id": 2767,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 2823,
												"name": "MountOptions"
											}
										},
										{
											"id": 2768,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "A generic result callback to indicate success or failure.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2769,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 9986,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 2770,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 2790,
							"name": "notify",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10056,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 2791,
									"name": "notify",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "<p>Notifies about changes in the watched directory at\n<code>observedPath</code> in <code>recursive</code> mode. If the file system\nis mounted with <code>supportsNofityTag</code>, then <code>tag</code> must be\nprovided, and all changes since the last notification always reported, even\nif the system was shutdown. The last tag can be obtained with {@link\ngetAll}.</p><p>To use, the <code>file_system_provider.notify</code> manifest\noption must be set to true.</p><p>Value of <code>tag</code> can be any string\nwhich is unique per call, so it's possible to identify the last registered\nnotification. Eg. if the providing extension starts after a reboot, and the\nlast registered notification's tag is equal to \"123\", then it should call\n{@link notify} for all changes which happened since the change tagged as\n\"123\". It cannot be an empty string.</p><p>Not all providers are able to\nprovide a tag, but if the file system has a changelog, then the tag can be\neg. a change number, or a revision number.</p><p>Note that if a parent\ndirectory is removed, then all descendant entries are also removed, and if\nthey are watched, then the API must be notified about the fact. Also, if a\ndirectory is renamed, then all descendant entries are in fact removed, as\nthere is no entry under their original paths anymore.</p><p>In case of an\nerror, {@link runtime.lastError} will be set will a corresponding error\ncode.</p>"
									},
									"parameters": [
										{
											"id": 2792,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 2934,
												"name": "NotifyOptions"
											}
										},
										{
											"id": 2793,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "A generic result callback to indicate success or failure.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2794,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 10058,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 2795,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 2771,
							"name": "unmount",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 9999,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 2772,
									"name": "unmount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "<p>Unmounts a file system with the given <code>fileSystemId</code>. It must\nbe called after {@link onUnmountRequested} is invoked. Also, the providing\nextension can decide to perform unmounting if not requested (eg. in case of\nlost connection, or a file error).</p><p>In case of an error, {@link\nruntime.lastError} will be set with a corresponding error code.</p>"
									},
									"parameters": [
										{
											"id": 2773,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 2830,
												"name": "UnmountOptions"
											}
										},
										{
											"id": 2774,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "A generic result callback to indicate success or failure.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2775,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 10001,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 2776,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								2909,
								2923,
								2913,
								2931,
								2864,
								2941,
								2888,
								2874,
								2884,
								2879,
								2800,
								2926,
								2815,
								2845,
								2835,
								2823,
								2893,
								2934,
								2859,
								2811,
								2849,
								2868,
								2918,
								2898,
								2830,
								2832,
								2807,
								2903
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								2798,
								2799,
								2797,
								2796
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								3104,
								3136,
								3003,
								3115,
								3060,
								3027,
								3049,
								3038,
								3158,
								2967,
								2955,
								3126,
								3071,
								2992,
								2979,
								3014,
								3147,
								3082,
								2944,
								3093
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								2783,
								2777,
								2765,
								2790,
								2771
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 9285,
							"character": 37
						}
					]
				},
				{
					"id": 3169,
					"name": "fontSettings",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.fontSettings</code> API to manage Chrome's font\nsettings.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "fontSettings"
							},
							{
								"tag": "chrome-permission",
								"text": "fontSettings\n"
							}
						]
					},
					"children": [
						{
							"id": 3280,
							"name": "FontName",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Represents a font name."
							},
							"children": [
								{
									"id": 3282,
									"name": "displayName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The display name of the font."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 10488,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 3281,
									"name": "fontId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The font ID."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 10483,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										3282,
										3281
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10479,
									"character": 29
								}
							]
						},
						{
							"id": 3284,
							"name": "GenericFamily",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "A CSS generic font family."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10500,
									"character": 29
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "standard"
									},
									{
										"type": "literal",
										"value": "sansserif"
									},
									{
										"type": "literal",
										"value": "serif"
									},
									{
										"type": "literal",
										"value": "fixed"
									},
									{
										"type": "literal",
										"value": "cursive"
									},
									{
										"type": "literal",
										"value": "fantasy"
									}
								]
							}
						},
						{
							"id": 3285,
							"name": "LevelOfControl",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "One of<br><var>not_controllable</var>: cannot be controlled by any\nextension<br><var>controlled_by_other_extensions</var>: controlled by\nextensions with higher\nprecedence<br><var>controllable_by_this_extension</var>: can be controlled by\nthis extension<br><var>controlled_by_this_extension</var>: controlled by this\nextension"
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10510,
									"character": 30
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "not_controllable"
									},
									{
										"type": "literal",
										"value": "controlled_by_other_extensions"
									},
									{
										"type": "literal",
										"value": "controllable_by_this_extension"
									},
									{
										"type": "literal",
										"value": "controlled_by_this_extension"
									}
								]
							}
						},
						{
							"id": 3283,
							"name": "ScriptCode",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "An ISO 15924 script code. The default, or global, script is represented by\nscript code \"Zyyy\"."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10495,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "Afak"
									},
									{
										"type": "literal",
										"value": "Arab"
									},
									{
										"type": "literal",
										"value": "Armi"
									},
									{
										"type": "literal",
										"value": "Armn"
									},
									{
										"type": "literal",
										"value": "Avst"
									},
									{
										"type": "literal",
										"value": "Bali"
									},
									{
										"type": "literal",
										"value": "Bamu"
									},
									{
										"type": "literal",
										"value": "Bass"
									},
									{
										"type": "literal",
										"value": "Batk"
									},
									{
										"type": "literal",
										"value": "Beng"
									},
									{
										"type": "literal",
										"value": "Blis"
									},
									{
										"type": "literal",
										"value": "Bopo"
									},
									{
										"type": "literal",
										"value": "Brah"
									},
									{
										"type": "literal",
										"value": "Brai"
									},
									{
										"type": "literal",
										"value": "Bugi"
									},
									{
										"type": "literal",
										"value": "Buhd"
									},
									{
										"type": "literal",
										"value": "Cakm"
									},
									{
										"type": "literal",
										"value": "Cans"
									},
									{
										"type": "literal",
										"value": "Cari"
									},
									{
										"type": "literal",
										"value": "Cham"
									},
									{
										"type": "literal",
										"value": "Cher"
									},
									{
										"type": "literal",
										"value": "Cirt"
									},
									{
										"type": "literal",
										"value": "Copt"
									},
									{
										"type": "literal",
										"value": "Cprt"
									},
									{
										"type": "literal",
										"value": "Cyrl"
									},
									{
										"type": "literal",
										"value": "Cyrs"
									},
									{
										"type": "literal",
										"value": "Deva"
									},
									{
										"type": "literal",
										"value": "Dsrt"
									},
									{
										"type": "literal",
										"value": "Dupl"
									},
									{
										"type": "literal",
										"value": "Egyd"
									},
									{
										"type": "literal",
										"value": "Egyh"
									},
									{
										"type": "literal",
										"value": "Egyp"
									},
									{
										"type": "literal",
										"value": "Elba"
									},
									{
										"type": "literal",
										"value": "Ethi"
									},
									{
										"type": "literal",
										"value": "Geor"
									},
									{
										"type": "literal",
										"value": "Geok"
									},
									{
										"type": "literal",
										"value": "Glag"
									},
									{
										"type": "literal",
										"value": "Goth"
									},
									{
										"type": "literal",
										"value": "Gran"
									},
									{
										"type": "literal",
										"value": "Grek"
									},
									{
										"type": "literal",
										"value": "Gujr"
									},
									{
										"type": "literal",
										"value": "Guru"
									},
									{
										"type": "literal",
										"value": "Hang"
									},
									{
										"type": "literal",
										"value": "Hani"
									},
									{
										"type": "literal",
										"value": "Hano"
									},
									{
										"type": "literal",
										"value": "Hans"
									},
									{
										"type": "literal",
										"value": "Hant"
									},
									{
										"type": "literal",
										"value": "Hebr"
									},
									{
										"type": "literal",
										"value": "Hluw"
									},
									{
										"type": "literal",
										"value": "Hmng"
									},
									{
										"type": "literal",
										"value": "Hung"
									},
									{
										"type": "literal",
										"value": "Inds"
									},
									{
										"type": "literal",
										"value": "Ital"
									},
									{
										"type": "literal",
										"value": "Java"
									},
									{
										"type": "literal",
										"value": "Jpan"
									},
									{
										"type": "literal",
										"value": "Jurc"
									},
									{
										"type": "literal",
										"value": "Kali"
									},
									{
										"type": "literal",
										"value": "Khar"
									},
									{
										"type": "literal",
										"value": "Khmr"
									},
									{
										"type": "literal",
										"value": "Khoj"
									},
									{
										"type": "literal",
										"value": "Knda"
									},
									{
										"type": "literal",
										"value": "Kpel"
									},
									{
										"type": "literal",
										"value": "Kthi"
									},
									{
										"type": "literal",
										"value": "Lana"
									},
									{
										"type": "literal",
										"value": "Laoo"
									},
									{
										"type": "literal",
										"value": "Latf"
									},
									{
										"type": "literal",
										"value": "Latg"
									},
									{
										"type": "literal",
										"value": "Latn"
									},
									{
										"type": "literal",
										"value": "Lepc"
									},
									{
										"type": "literal",
										"value": "Limb"
									},
									{
										"type": "literal",
										"value": "Lina"
									},
									{
										"type": "literal",
										"value": "Linb"
									},
									{
										"type": "literal",
										"value": "Lisu"
									},
									{
										"type": "literal",
										"value": "Loma"
									},
									{
										"type": "literal",
										"value": "Lyci"
									},
									{
										"type": "literal",
										"value": "Lydi"
									},
									{
										"type": "literal",
										"value": "Mand"
									},
									{
										"type": "literal",
										"value": "Mani"
									},
									{
										"type": "literal",
										"value": "Maya"
									},
									{
										"type": "literal",
										"value": "Mend"
									},
									{
										"type": "literal",
										"value": "Merc"
									},
									{
										"type": "literal",
										"value": "Mero"
									},
									{
										"type": "literal",
										"value": "Mlym"
									},
									{
										"type": "literal",
										"value": "Moon"
									},
									{
										"type": "literal",
										"value": "Mong"
									},
									{
										"type": "literal",
										"value": "Mroo"
									},
									{
										"type": "literal",
										"value": "Mtei"
									},
									{
										"type": "literal",
										"value": "Mymr"
									},
									{
										"type": "literal",
										"value": "Narb"
									},
									{
										"type": "literal",
										"value": "Nbat"
									},
									{
										"type": "literal",
										"value": "Nkgb"
									},
									{
										"type": "literal",
										"value": "Nkoo"
									},
									{
										"type": "literal",
										"value": "Nshu"
									},
									{
										"type": "literal",
										"value": "Ogam"
									},
									{
										"type": "literal",
										"value": "Olck"
									},
									{
										"type": "literal",
										"value": "Orkh"
									},
									{
										"type": "literal",
										"value": "Orya"
									},
									{
										"type": "literal",
										"value": "Osma"
									},
									{
										"type": "literal",
										"value": "Palm"
									},
									{
										"type": "literal",
										"value": "Perm"
									},
									{
										"type": "literal",
										"value": "Phag"
									},
									{
										"type": "literal",
										"value": "Phli"
									},
									{
										"type": "literal",
										"value": "Phlp"
									},
									{
										"type": "literal",
										"value": "Phlv"
									},
									{
										"type": "literal",
										"value": "Phnx"
									},
									{
										"type": "literal",
										"value": "Plrd"
									},
									{
										"type": "literal",
										"value": "Prti"
									},
									{
										"type": "literal",
										"value": "Rjng"
									},
									{
										"type": "literal",
										"value": "Roro"
									},
									{
										"type": "literal",
										"value": "Runr"
									},
									{
										"type": "literal",
										"value": "Samr"
									},
									{
										"type": "literal",
										"value": "Sara"
									},
									{
										"type": "literal",
										"value": "Sarb"
									},
									{
										"type": "literal",
										"value": "Saur"
									},
									{
										"type": "literal",
										"value": "Sgnw"
									},
									{
										"type": "literal",
										"value": "Shaw"
									},
									{
										"type": "literal",
										"value": "Shrd"
									},
									{
										"type": "literal",
										"value": "Sind"
									},
									{
										"type": "literal",
										"value": "Sinh"
									},
									{
										"type": "literal",
										"value": "Sora"
									},
									{
										"type": "literal",
										"value": "Sund"
									},
									{
										"type": "literal",
										"value": "Sylo"
									},
									{
										"type": "literal",
										"value": "Syrc"
									},
									{
										"type": "literal",
										"value": "Syre"
									},
									{
										"type": "literal",
										"value": "Syrj"
									},
									{
										"type": "literal",
										"value": "Syrn"
									},
									{
										"type": "literal",
										"value": "Tagb"
									},
									{
										"type": "literal",
										"value": "Takr"
									},
									{
										"type": "literal",
										"value": "Tale"
									},
									{
										"type": "literal",
										"value": "Talu"
									},
									{
										"type": "literal",
										"value": "Taml"
									},
									{
										"type": "literal",
										"value": "Tang"
									},
									{
										"type": "literal",
										"value": "Tavt"
									},
									{
										"type": "literal",
										"value": "Telu"
									},
									{
										"type": "literal",
										"value": "Teng"
									},
									{
										"type": "literal",
										"value": "Tfng"
									},
									{
										"type": "literal",
										"value": "Tglg"
									},
									{
										"type": "literal",
										"value": "Thaa"
									},
									{
										"type": "literal",
										"value": "Thai"
									},
									{
										"type": "literal",
										"value": "Tibt"
									},
									{
										"type": "literal",
										"value": "Tirh"
									},
									{
										"type": "literal",
										"value": "Ugar"
									},
									{
										"type": "literal",
										"value": "Vaii"
									},
									{
										"type": "literal",
										"value": "Visp"
									},
									{
										"type": "literal",
										"value": "Wara"
									},
									{
										"type": "literal",
										"value": "Wole"
									},
									{
										"type": "literal",
										"value": "Xpeo"
									},
									{
										"type": "literal",
										"value": "Xsux"
									},
									{
										"type": "literal",
										"value": "Yiii"
									},
									{
										"type": "literal",
										"value": "Zmth"
									},
									{
										"type": "literal",
										"value": "Zsym"
									},
									{
										"type": "literal",
										"value": "Zyyy"
									}
								]
							}
						},
						{
							"id": 3302,
							"name": "onDefaultFixedFontSizeChanged",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when the default fixed font size setting changes."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10823,
									"character": 46
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 3303,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 10823,
													"character": 68
												}
											],
											"signatures": [
												{
													"id": 3304,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 3305,
															"name": "details",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3306,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 3308,
																			"name": "levelOfControl",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The level of control this extension has over the setting."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 10837,
																					"character": 24
																				}
																			],
																			"type": {
																				"type": "reference",
																				"id": 3285,
																				"name": "LevelOfControl"
																			}
																		},
																		{
																			"id": 3307,
																			"name": "pixelSize",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The font size in pixels."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 10832,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				3308,
																				3307
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10828,
																			"character": 16
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 3295,
							"name": "onDefaultFontSizeChanged",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when the default font size setting changes."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10801,
									"character": 41
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 3296,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 10801,
													"character": 63
												}
											],
											"signatures": [
												{
													"id": 3297,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 3298,
															"name": "details",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3299,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 3301,
																			"name": "levelOfControl",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The level of control this extension has over the setting."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 10815,
																					"character": 24
																				}
																			],
																			"type": {
																				"type": "reference",
																				"id": 3285,
																				"name": "LevelOfControl"
																			}
																		},
																		{
																			"id": 3300,
																			"name": "pixelSize",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The font size in pixels."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 10810,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				3301,
																				3300
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10806,
																			"character": 16
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 3286,
							"name": "onFontChanged",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a font setting changes."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10769,
									"character": 30
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 3287,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 10769,
													"character": 52
												}
											],
											"signatures": [
												{
													"id": 3288,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 3289,
															"name": "details",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3290,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 3291,
																			"name": "fontId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The font ID. See the description in <code>getFont</code>."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 10778,
																					"character": 16
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 3293,
																			"name": "genericFamily",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The generic font family for which the font setting has changed."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 10788,
																					"character": 23
																				}
																			],
																			"type": {
																				"type": "reference",
																				"id": 3284,
																				"name": "GenericFamily"
																			}
																		},
																		{
																			"id": 3294,
																			"name": "levelOfControl",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The level of control this extension has over the setting."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 10793,
																					"character": 24
																				}
																			],
																			"type": {
																				"type": "reference",
																				"id": 3285,
																				"name": "LevelOfControl"
																			}
																		},
																		{
																			"id": 3292,
																			"name": "script",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The script code for which the font setting has changed."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 10783,
																					"character": 16
																				}
																			],
																			"type": {
																				"type": "reference",
																				"id": 3283,
																				"name": "ScriptCode"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				3291,
																				3293,
																				3294,
																				3292
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10774,
																			"character": 16
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 3309,
							"name": "onMinimumFontSizeChanged",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when the minimum font size setting changes."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10845,
									"character": 41
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 3310,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 10845,
													"character": 63
												}
											],
											"signatures": [
												{
													"id": 3311,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 3312,
															"name": "details",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3313,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 3315,
																			"name": "levelOfControl",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The level of control this extension has over the setting."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 10859,
																					"character": 24
																				}
																			],
																			"type": {
																				"type": "reference",
																				"id": 3285,
																				"name": "LevelOfControl"
																			}
																		},
																		{
																			"id": 3314,
																			"name": "pixelSize",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The font size in pixels."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 10854,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				3315,
																				3314
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10850,
																			"character": 16
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 3232,
							"name": "clearDefaultFixedFontSize",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10670,
									"character": 45
								}
							],
							"signatures": [
								{
									"id": 3233,
									"name": "clearDefaultFixedFontSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clears the default fixed font size set by this extension, if any."
									},
									"parameters": [
										{
											"id": 3234,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "This parameter is currently unused."
											},
											"type": {
												"type": "intrinsic",
												"name": "object"
											}
										},
										{
											"id": 3235,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3236,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 10672,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 3237,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3208,
							"name": "clearDefaultFontSize",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10619,
									"character": 40
								}
							],
							"signatures": [
								{
									"id": 3209,
									"name": "clearDefaultFontSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clears the default font size set by this extension, if any."
									},
									"parameters": [
										{
											"id": 3210,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "This parameter is currently unused."
											},
											"type": {
												"type": "intrinsic",
												"name": "object"
											}
										},
										{
											"id": 3211,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3212,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 10621,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 3213,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3170,
							"name": "clearFont",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10518,
									"character": 29
								}
							],
							"signatures": [
								{
									"id": 3171,
									"name": "clearFont",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clears the font set by this extension, if any."
									},
									"parameters": [
										{
											"id": 3172,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3173,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 3175,
															"name": "genericFamily",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "The generic font family for which the font should be cleared."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 10529,
																	"character": 21
																}
															],
															"type": {
																"type": "reference",
																"id": 3284,
																"name": "GenericFamily"
															}
														},
														{
															"id": 3174,
															"name": "script",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The script for which the font should be cleared. If omitted, the global\nscript font setting is cleared."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 10524,
																	"character": 14
																}
															],
															"type": {
																"type": "reference",
																"id": 3283,
																"name": "ScriptCode"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																3175,
																3174
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 10519,
															"character": 14
														}
													]
												}
											}
										},
										{
											"id": 3176,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3177,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 10531,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 3178,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3256,
							"name": "clearMinimumFontSize",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10721,
									"character": 40
								}
							],
							"signatures": [
								{
									"id": 3257,
									"name": "clearMinimumFontSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clears the minimum font size set by this extension, if any."
									},
									"parameters": [
										{
											"id": 3258,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "This parameter is currently unused."
											},
											"type": {
												"type": "intrinsic",
												"name": "object"
											}
										},
										{
											"id": 3259,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3260,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 10723,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 3261,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3238,
							"name": "getDefaultFixedFontSize",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10682,
									"character": 43
								}
							],
							"signatures": [
								{
									"id": 3239,
									"name": "getDefaultFixedFontSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the default size for fixed width fonts."
									},
									"parameters": [
										{
											"id": 3240,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "This parameter is currently unused."
											},
											"type": {
												"type": "intrinsic",
												"name": "object"
											}
										},
										{
											"id": 3241,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3242,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 10684,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 3243,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 3244,
																	"name": "details",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 3245,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 3247,
																					"name": "levelOfControl",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"comment": {
																						"shortText": "The level of control this extension has over the setting."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 10694,
																							"character": 24
																						}
																					],
																					"type": {
																						"type": "reference",
																						"id": 3285,
																						"name": "LevelOfControl"
																					}
																				},
																				{
																					"id": 3246,
																					"name": "pixelSize",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"comment": {
																						"shortText": "The font size in pixels."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 10689,
																							"character": 19
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "number"
																					}
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						3247,
																						3246
																					]
																				}
																			],
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 10685,
																					"character": 16
																				}
																			]
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3214,
							"name": "getDefaultFontSize",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10631,
									"character": 38
								}
							],
							"signatures": [
								{
									"id": 3215,
									"name": "getDefaultFontSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the default font size."
									},
									"parameters": [
										{
											"id": 3216,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "This parameter is currently unused."
											},
											"type": {
												"type": "intrinsic",
												"name": "object"
											}
										},
										{
											"id": 3217,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3218,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 10633,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 3219,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 3220,
																	"name": "details",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 3221,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 3223,
																					"name": "levelOfControl",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"comment": {
																						"shortText": "The level of control this extension has over the setting."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 10643,
																							"character": 24
																						}
																					],
																					"type": {
																						"type": "reference",
																						"id": 3285,
																						"name": "LevelOfControl"
																					}
																				},
																				{
																					"id": 3222,
																					"name": "pixelSize",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"comment": {
																						"shortText": "The font size in pixels."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 10638,
																							"character": 19
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "number"
																					}
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						3223,
																						3222
																					]
																				}
																			],
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 10634,
																					"character": 16
																				}
																			]
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3179,
							"name": "getFont",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10541,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 3180,
									"name": "getFont",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the font for a given script and generic font family."
									},
									"parameters": [
										{
											"id": 3181,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3182,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 3184,
															"name": "genericFamily",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "The generic font family for which the font should be retrieved."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 10552,
																	"character": 21
																}
															],
															"type": {
																"type": "reference",
																"id": 3284,
																"name": "GenericFamily"
															}
														},
														{
															"id": 3183,
															"name": "script",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The script for which the font should be retrieved. If omitted, the font\nsetting for the global script (script code \"Zyyy\") is retrieved."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 10547,
																	"character": 14
																}
															],
															"type": {
																"type": "reference",
																"id": 3283,
																"name": "ScriptCode"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																3184,
																3183
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 10542,
															"character": 14
														}
													]
												}
											}
										},
										{
											"id": 3185,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3186,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 10554,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 3187,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 3188,
																	"name": "details",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 3189,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 3190,
																					"name": "fontId",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"comment": {
																						"shortText": "The font ID. Rather than the literal font ID preference value, this may be\nthe ID of the font that the system resolves the preference value to. So,\n<var>fontId</var> can differ from the font passed to <code>setFont</code>,\nif, for example, the font is not available on the system. The empty string\nsignifies fallback to the global script font setting."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 10563,
																							"character": 16
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "string"
																					}
																				},
																				{
																					"id": 3191,
																					"name": "levelOfControl",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"comment": {
																						"shortText": "The level of control this extension has over the setting."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 10568,
																							"character": 24
																						}
																					],
																					"type": {
																						"type": "reference",
																						"id": 3285,
																						"name": "LevelOfControl"
																					}
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						3190,
																						3191
																					]
																				}
																			],
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 10555,
																					"character": 16
																				}
																			]
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3202,
							"name": "getFontList",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10607,
									"character": 31
								}
							],
							"signatures": [
								{
									"id": 3203,
									"name": "getFontList",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a list of fonts on the system."
									},
									"parameters": [
										{
											"id": 3204,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3205,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 10608,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 3206,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 3207,
																	"name": "results",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 3280,
																			"name": "FontName"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3262,
							"name": "getMinimumFontSize",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10733,
									"character": 38
								}
							],
							"signatures": [
								{
									"id": 3263,
									"name": "getMinimumFontSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the minimum font size."
									},
									"parameters": [
										{
											"id": 3264,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "This parameter is currently unused."
											},
											"type": {
												"type": "intrinsic",
												"name": "object"
											}
										},
										{
											"id": 3265,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3266,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 10735,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 3267,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 3268,
																	"name": "details",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 3269,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 3271,
																					"name": "levelOfControl",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"comment": {
																						"shortText": "The level of control this extension has over the setting."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 10745,
																							"character": 24
																						}
																					],
																					"type": {
																						"type": "reference",
																						"id": 3285,
																						"name": "LevelOfControl"
																					}
																				},
																				{
																					"id": 3270,
																					"name": "pixelSize",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"comment": {
																						"shortText": "The font size in pixels."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 10740,
																							"character": 19
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "number"
																					}
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						3271,
																						3270
																					]
																				}
																			],
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 10736,
																					"character": 16
																				}
																			]
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3248,
							"name": "setDefaultFixedFontSize",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10705,
									"character": 43
								}
							],
							"signatures": [
								{
									"id": 3249,
									"name": "setDefaultFixedFontSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the default size for fixed width fonts."
									},
									"parameters": [
										{
											"id": 3250,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3251,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 3252,
															"name": "pixelSize",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "The font size in pixels."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 10710,
																	"character": 17
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																3252
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 10706,
															"character": 14
														}
													]
												}
											}
										},
										{
											"id": 3253,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3254,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 10712,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 3255,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3224,
							"name": "setDefaultFontSize",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10654,
									"character": 38
								}
							],
							"signatures": [
								{
									"id": 3225,
									"name": "setDefaultFontSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the default font size."
									},
									"parameters": [
										{
											"id": 3226,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3227,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 3228,
															"name": "pixelSize",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "The font size in pixels."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 10659,
																	"character": 17
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																3228
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 10655,
															"character": 14
														}
													]
												}
											}
										},
										{
											"id": 3229,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3230,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 10661,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 3231,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3192,
							"name": "setFont",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10579,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 3193,
									"name": "setFont",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the font for a given script and generic font family."
									},
									"parameters": [
										{
											"id": 3194,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3195,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 3198,
															"name": "fontId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "The font ID. The empty string means to fallback to the global script font\nsetting."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 10596,
																	"character": 14
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 3197,
															"name": "genericFamily",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "The generic font family for which the font should be set."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 10590,
																	"character": 21
																}
															],
															"type": {
																"type": "reference",
																"id": 3284,
																"name": "GenericFamily"
															}
														},
														{
															"id": 3196,
															"name": "script",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The script code which the font should be set. If omitted, the font setting\nfor the global script (script code \"Zyyy\") is set."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 10585,
																	"character": 14
																}
															],
															"type": {
																"type": "reference",
																"id": 3283,
																"name": "ScriptCode"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																3198,
																3197,
																3196
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 10580,
															"character": 14
														}
													]
												}
											}
										},
										{
											"id": 3199,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3200,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 10598,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 3201,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3272,
							"name": "setMinimumFontSize",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10756,
									"character": 38
								}
							],
							"signatures": [
								{
									"id": 3273,
									"name": "setMinimumFontSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the minimum font size."
									},
									"parameters": [
										{
											"id": 3274,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3275,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 3276,
															"name": "pixelSize",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "The font size in pixels."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 10761,
																	"character": 17
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																3276
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 10757,
															"character": 14
														}
													]
												}
											}
										},
										{
											"id": 3277,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3278,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 10763,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 3279,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								3280
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								3284,
								3285,
								3283
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								3302,
								3295,
								3286,
								3309
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								3232,
								3208,
								3170,
								3256,
								3238,
								3214,
								3179,
								3202,
								3262,
								3248,
								3224,
								3192,
								3272
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 10475,
							"character": 31
						}
					]
				},
				{
					"id": 3316,
					"name": "gcm",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use <code>chrome.gcm</code> to enable apps and extensions to send and receive\nmessages through the <a\nhref='http://developer.android.com/google/gcm/'>Google Cloud Messaging\nService</a>.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "gcm"
							},
							{
								"tag": "chrome-permission",
								"text": "gcm\n"
							}
						]
					},
					"children": [
						{
							"id": 3344,
							"name": "MAX_MESSAGE_SIZE",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "The maximum size (in bytes) of all key/value pairs in a message."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10880,
									"character": 33
								}
							],
							"type": {
								"type": "literal",
								"value": 4096
							}
						},
						{
							"id": 3345,
							"name": "onMessage",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a message is received through GCM."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10955,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 3346,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 10955,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 3347,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 3348,
															"name": "message",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "A message received from another party via GCM.\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3349,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 3355,
																			"name": "collapseKey",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The collapse key of a message. See <a\nhref='cloudMessaging#collapsible_messages'>Collapsible Messages</a> section\nof Cloud Messaging documentation for details."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 10976,
																					"character": 21
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 3350,
																			"name": "data",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The message data."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 10964,
																					"character": 14
																				}
																			],
																			"type": {
																				"type": "reflection",
																				"declaration": {
																					"id": 3351,
																					"name": "__type",
																					"kind": 65536,
																					"kindString": "Type literal",
																					"flags": {},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 10964,
																							"character": 15
																						}
																					],
																					"indexSignature": {
																						"id": 3352,
																						"name": "__index",
																						"kind": 8192,
																						"kindString": "Index signature",
																						"flags": {},
																						"parameters": [
																							{
																								"id": 3353,
																								"name": "name",
																								"kind": 32768,
																								"flags": {},
																								"type": {
																									"type": "intrinsic",
																									"name": "string"
																								}
																							}
																						],
																						"type": {
																							"type": "intrinsic",
																							"name": "string"
																						}
																					}
																				}
																			}
																		},
																		{
																			"id": 3354,
																			"name": "from",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The sender who issued the message."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 10969,
																					"character": 14
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				3355,
																				3350,
																				3354
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10960,
																			"character": 16
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 3356,
							"name": "onMessagesDeleted",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a GCM server had to delete messages sent by an app server to the\napplication. See <a href='cloudMessaging#messages_deleted_event'>Messages\ndeleted event</a> section of Cloud Messaging documentation for details on\nhandling this event."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10987,
									"character": 34
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 3357,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 10987,
													"character": 56
												}
											],
											"signatures": [
												{
													"id": 3358,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 3359,
							"name": "onSendError",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when it was not possible to send a message to the GCM server."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10994,
									"character": 28
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 3360,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 10994,
													"character": 50
												}
											],
											"signatures": [
												{
													"id": 3361,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 3362,
															"name": "error",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "An error that occured while trying to send the message either in Chrome or on the GCM server. Application can retry sending the message with a reasonable backoff and possibly longer time-to-live.\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3363,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 3366,
																			"name": "details",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "Additional details related to the error, when available."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 11014,
																					"character": 17
																				}
																			],
																			"type": {
																				"type": "reflection",
																				"declaration": {
																					"id": 3367,
																					"name": "__type",
																					"kind": 65536,
																					"kindString": "Type literal",
																					"flags": {},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 11014,
																							"character": 18
																						}
																					],
																					"indexSignature": {
																						"id": 3368,
																						"name": "__index",
																						"kind": 8192,
																						"kindString": "Index signature",
																						"flags": {},
																						"parameters": [
																							{
																								"id": 3369,
																								"name": "name",
																								"kind": 32768,
																								"flags": {},
																								"type": {
																									"type": "intrinsic",
																									"name": "string"
																								}
																							}
																						],
																						"type": {
																							"type": "intrinsic",
																							"name": "string"
																						}
																					}
																				}
																			}
																		},
																		{
																			"id": 3364,
																			"name": "errorMessage",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The error message describing the problem."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 11003,
																					"character": 22
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 3365,
																			"name": "messageId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The ID of the message with this error, if error is related to a specific\nmessage."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 11009,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				3366,
																				3364,
																				3365
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10999,
																			"character": 14
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 3317,
							"name": "register",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10892,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 3318,
									"name": "register",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Registers the application with GCM. The registration ID will be returned by\nthe <code>callback</code>. If <code>register</code> is called again with the\nsame list of <code>senderIds</code>, the same registration ID will be\nreturned."
									},
									"parameters": [
										{
											"id": 3319,
											"name": "senderIds",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A list of server IDs that are allowed to send messages to the application. It should contain at least one and no more than 100 sender IDs."
											},
											"type": {
												"type": "intersection",
												"types": [
													{
														"type": "tuple",
														"elements": [
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 3320,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function called when registration completes. It should check {@link runtime.lastError} for error when <code>registrationId</code> is empty."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3321,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 10894,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 3322,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 3323,
																	"name": "registrationId",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "A registration ID assigned to the application by the GCM.\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3329,
							"name": "send",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10915,
									"character": 24
								}
							],
							"signatures": [
								{
									"id": 3330,
									"name": "send",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sends a message according to its contents."
									},
									"parameters": [
										{
											"id": 3331,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A message to send to the other party via GCM."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3332,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 3336,
															"name": "data",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "Message data to send to the server. Case-insensitive <code>goog.</code> and\n<code>google</code>, as well as case-sensitive <code>collapse_key</code> are\ndisallowed as key prefixes. Sum of all key/value pairs should not exceed\n{@link gcm.MAX_MESSAGE_SIZE}."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 10945,
																	"character": 12
																}
															],
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3337,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 10945,
																			"character": 13
																		}
																	],
																	"indexSignature": {
																		"id": 3338,
																		"name": "__index",
																		"kind": 8192,
																		"kindString": "Index signature",
																		"flags": {},
																		"parameters": [
																			{
																				"id": 3339,
																				"name": "name",
																				"kind": 32768,
																				"flags": {},
																				"type": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			}
																		],
																		"type": {
																			"type": "intrinsic",
																			"name": "string"
																		}
																	}
																}
															}
														},
														{
															"id": 3333,
															"name": "destinationId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "The ID of the server to send the message to as assigned by <a\nhref='https://code.google.com/apis/console'>Google API Console</a>."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 10921,
																	"character": 21
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 3334,
															"name": "messageId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "The ID of the message. It must be unique for each message in scope of the\napplications. See the <a href='cloudMessaging#send_messages'>Cloud Messaging\ndocumentation</a> for advice for picking and handling an ID."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 10928,
																	"character": 17
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 3335,
															"name": "timeToLive",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Time-to-live of the message in seconds. If it is not possible to send the\nmessage within that time, an onSendError event will be raised. A time-to-live\nof 0 indicates that the message should be sent immediately or fail if it's\nnot possible. The maximum and a default value of time-to-live is 86400\nseconds (1 day)."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 10937,
																	"character": 18
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																3336,
																3333,
																3334,
																3335
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 10916,
															"character": 14
														}
													]
												}
											}
										},
										{
											"id": 3340,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A function called after the message is successfully queued for sending. {@link runtime.lastError} should be checked, to ensure a message was sent without problems."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3341,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 10947,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 3342,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 3343,
																	"name": "messageId",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "The ID of the message that the callback was issued for.\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3324,
							"name": "unregister",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 10904,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 3325,
									"name": "unregister",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Unregisters the application from GCM."
									},
									"parameters": [
										{
											"id": 3326,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A function called after the unregistration completes. Unregistration was successful if {@link runtime.lastError} is not set.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3327,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 10905,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 3328,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								3344,
								3345,
								3356,
								3359
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								3317,
								3329,
								3324
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 10876,
							"character": 22
						}
					]
				},
				{
					"id": 3370,
					"name": "history",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.history</code> API to interact with the browser's record\nof visited pages. You can add, remove, and query for URLs in the browser's\nhistory. To override the history page with your own version, see <a\nhref='override'>Override Pages</a>.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "history"
							},
							{
								"tag": "chrome-permission",
								"text": "history\n"
							}
						]
					},
					"children": [
						{
							"id": 3417,
							"name": "HistoryItem",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "An object encapsulating one result of a history query."
							},
							"children": [
								{
									"id": 3418,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The unique identifier for the item."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11045,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 3421,
									"name": "lastVisitTime",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "When this page was last loaded, represented in milliseconds since the epoch."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11060,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 3420,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The title of the page when it was last loaded."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11055,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 3423,
									"name": "typedCount",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The number of times the user has navigated to this page by typing in the\naddress."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11071,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 3419,
									"name": "url",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The URL navigated to by a user."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11050,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 3422,
									"name": "visitCount",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The number of times the user has navigated to this page."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11065,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										3418,
										3421,
										3420,
										3423,
										3419,
										3422
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11041,
									"character": 32
								}
							]
						},
						{
							"id": 3430,
							"name": "UrlDetails",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 3431,
									"name": "url",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The URL for the operation. It must be in the format as returned from a call\nto history.search."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11110,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										3431
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11105,
									"character": 31
								}
							]
						},
						{
							"id": 3424,
							"name": "VisitItem",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "An object encapsulating one visit to a URL."
							},
							"children": [
								{
									"id": 3425,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The unique identifier for the item."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11081,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 3428,
									"name": "referringVisitId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The visit ID of the referrer."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11096,
											"character": 22
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 3429,
									"name": "transition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The <a href='#transition_types'>transition type</a> for this visit from its\nreferrer."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11102,
											"character": 16
										}
									],
									"type": {
										"type": "reference",
										"id": 3416,
										"name": "TransitionType"
									}
								},
								{
									"id": 3426,
									"name": "visitId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The unique identifier for this visit."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11086,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 3427,
									"name": "visitTime",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "When this visit occurred, represented in milliseconds since the epoch."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11091,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										3425,
										3428,
										3429,
										3426,
										3427
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11077,
									"character": 30
								}
							]
						},
						{
							"id": 3416,
							"name": "TransitionType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The <a href='#transition_types'>transition type</a> for this visit from its\nreferrer."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11036,
									"character": 30
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "link"
									},
									{
										"type": "literal",
										"value": "typed"
									},
									{
										"type": "literal",
										"value": "auto_bookmark"
									},
									{
										"type": "literal",
										"value": "auto_subframe"
									},
									{
										"type": "literal",
										"value": "manual_subframe"
									},
									{
										"type": "literal",
										"value": "generated"
									},
									{
										"type": "literal",
										"value": "auto_toplevel"
									},
									{
										"type": "literal",
										"value": "form_submit"
									},
									{
										"type": "literal",
										"value": "reload"
									},
									{
										"type": "literal",
										"value": "keyword"
									},
									{
										"type": "literal",
										"value": "keyword_generated"
									}
								]
							}
						},
						{
							"id": 3436,
							"name": "onVisitRemoved",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when one or more URLs are removed from the history service.  When all\nvisits have been removed the URL is purged from history."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11236,
									"character": 31
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 3437,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 11236,
													"character": 53
												}
											],
											"signatures": [
												{
													"id": 3438,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 3439,
															"name": "removed",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3440,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 3441,
																			"name": "allHistory",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "True if all history was removed.  If true, then urls will be empty."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 11245,
																					"character": 20
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "boolean"
																			}
																		},
																		{
																			"id": 3442,
																			"name": "urls",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 11246,
																					"character": 14
																				}
																			],
																			"type": {
																				"type": "array",
																				"elementType": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				3441,
																				3442
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 11241,
																			"character": 16
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 3432,
							"name": "onVisited",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a URL is visited, providing the HistoryItem data for that URL.\nThis event fires before the page has loaded."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11223,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 3433,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 11223,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 3434,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 3435,
															"name": "result",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reference",
																"id": 3417,
																"name": "HistoryItem"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 3390,
							"name": "addUrl",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11170,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 3391,
									"name": "addUrl",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds a URL to the history at the current time with a <a\nhref='#transition_types'>transition type</a> of \"link\"."
									},
									"parameters": [
										{
											"id": 3392,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 3430,
												"name": "UrlDetails"
											}
										},
										{
											"id": 3393,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3394,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 11172,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 3395,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3411,
							"name": "deleteAll",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11215,
									"character": 29
								}
							],
							"signatures": [
								{
									"id": 3412,
									"name": "deleteAll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deletes all items from the history."
									},
									"parameters": [
										{
											"id": 3413,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3414,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 11216,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 3415,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3402,
							"name": "deleteRange",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11193,
									"character": 31
								}
							],
							"signatures": [
								{
									"id": 3403,
									"name": "deleteRange",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Removes all items within the specified date range from the history.  Pages\nwill not be removed from the history unless all visits fall within the range."
									},
									"parameters": [
										{
											"id": 3404,
											"name": "range",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3405,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 3407,
															"name": "endTime",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "Items added to history before this date, represented in milliseconds since\nthe epoch."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 11205,
																	"character": 15
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 3406,
															"name": "startTime",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "Items added to history after this date, represented in milliseconds since the\nepoch."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 11199,
																	"character": 17
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																3407,
																3406
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 11194,
															"character": 12
														}
													]
												}
											}
										},
										{
											"id": 3408,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3409,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 11207,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 3410,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3396,
							"name": "deleteUrl",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11181,
									"character": 29
								}
							],
							"signatures": [
								{
									"id": 3397,
									"name": "deleteUrl",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Removes all occurrences of the given URL from the history."
									},
									"parameters": [
										{
											"id": 3398,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 3430,
												"name": "UrlDetails"
											}
										},
										{
											"id": 3399,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3400,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 11183,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 3401,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3383,
							"name": "getVisits",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11156,
									"character": 29
								}
							],
							"signatures": [
								{
									"id": 3384,
									"name": "getVisits",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieves information about visits to a URL."
									},
									"parameters": [
										{
											"id": 3385,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 3430,
												"name": "UrlDetails"
											}
										},
										{
											"id": 3386,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3387,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 11158,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 3388,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 3389,
																	"name": "results",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 3424,
																			"name": "VisitItem"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3371,
							"name": "search",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11120,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 3372,
									"name": "search",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Searches the history for the last visit time of each page matching the query."
									},
									"parameters": [
										{
											"id": 3373,
											"name": "query",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3374,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 3377,
															"name": "endTime",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Limit results to those visited before this date, represented in milliseconds\nsince the epoch."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 11137,
																	"character": 15
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 3378,
															"name": "maxResults",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The maximum number of results to retrieve.  Defaults to 100."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 11142,
																	"character": 18
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 3376,
															"name": "startTime",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Limit results to those visited after this date, represented in milliseconds\nsince the epoch. If not specified, this defaults to 24 hours in the past."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 11131,
																	"character": 17
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 3375,
															"name": "text",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "A free-text query to the history service.  Leave empty to retrieve all pages."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 11125,
																	"character": 12
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																3377,
																3378,
																3376,
																3375
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 11121,
															"character": 12
														}
													]
												}
											}
										},
										{
											"id": 3379,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3380,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 11144,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 3381,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 3382,
																	"name": "results",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 3417,
																			"name": "HistoryItem"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								3417,
								3430,
								3424
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								3416
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								3436,
								3432
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								3390,
								3411,
								3402,
								3396,
								3383,
								3371
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 11031,
							"character": 26
						}
					]
				},
				{
					"id": 3443,
					"name": "i18n",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.i18n</code> infrastructure to implement\ninternationalization across your whole app or extension.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "i18n\n"
							}
						]
					},
					"children": [
						{
							"id": 3472,
							"name": "LanguageCode",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "An ISO language code such as <code>en</code> or <code>fr</code>. For a\ncomplete list of languages supported by this method, see <a\nhref='http://src.chromium.org/viewvc/chrome/trunk/src/third_party/cld/languages/internal/languages.cc'>kLanguageInfoTable</a>. For an unknown language, <code>und</code> will be returned, which means that [percentage] of the text is unknown to CLD"
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11266,
									"character": 28
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3459,
							"name": "detectLanguage",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11322,
									"character": 34
								}
							],
							"signatures": [
								{
									"id": 3460,
									"name": "detectLanguage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Detects the language of the provided text using CLD."
									},
									"parameters": [
										{
											"id": 3461,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "User input string to be translated."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3462,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3463,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 11324,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 3464,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 3465,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "LanguageDetectionResult object that holds detected langugae reliability and array of DetectedLanguage\n"
																	},
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 3466,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 3467,
																					"name": "isReliable",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"comment": {
																						"shortText": "CLD detected language reliability"
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 11329,
																							"character": 20
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "boolean"
																					}
																				},
																				{
																					"id": 3468,
																					"name": "languages",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"comment": {
																						"shortText": "array of detectedLanguage"
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 11334,
																							"character": 19
																						}
																					],
																					"type": {
																						"type": "array",
																						"elementType": {
																							"type": "reflection",
																							"declaration": {
																								"id": 3469,
																								"name": "__type",
																								"kind": 65536,
																								"kindString": "Type literal",
																								"flags": {},
																								"children": [
																									{
																										"id": 3470,
																										"name": "language",
																										"kind": 1024,
																										"kindString": "Property",
																										"flags": {},
																										"sources": [
																											{
																												"fileName": "npm/index.d.ts",
																												"line": 11335,
																												"character": 20
																											}
																										],
																										"type": {
																											"type": "reference",
																											"id": 3472,
																											"name": "LanguageCode"
																										}
																									},
																									{
																										"id": 3471,
																										"name": "percentage",
																										"kind": 1024,
																										"kindString": "Property",
																										"flags": {},
																										"comment": {
																											"shortText": "The percentage of the detected language"
																										},
																										"sources": [
																											{
																												"fileName": "npm/index.d.ts",
																												"line": 11340,
																												"character": 22
																											}
																										],
																										"type": {
																											"type": "intrinsic",
																											"name": "number"
																										}
																									}
																								],
																								"groups": [
																									{
																										"title": "Properties",
																										"kind": 1024,
																										"children": [
																											3470,
																											3471
																										]
																									}
																								],
																								"sources": [
																									{
																										"fileName": "npm/index.d.ts",
																										"line": 11334,
																										"character": 20
																									}
																								]
																							}
																						}
																					}
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						3467,
																						3468
																					]
																				}
																			],
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 11325,
																					"character": 15
																				}
																			]
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3444,
							"name": "getAcceptLanguages",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11275,
									"character": 38
								}
							],
							"signatures": [
								{
									"id": 3445,
									"name": "getAcceptLanguages",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the accept-languages of the browser. This is different from the locale\nused by the browser; to get the locale, use {@link i18n.getUILanguage}."
									},
									"parameters": [
										{
											"id": 3446,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3447,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 11276,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 3448,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 3449,
																	"name": "languages",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "Array of LanguageCode\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 3472,
																			"name": "LanguageCode"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3450,
							"name": "getMessage",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11293,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 3451,
									"name": "getMessage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the localized string for the specified message. If the message is\nmissing, this method returns an empty string (''). If the format of the\n<code>getMessage()</code> call is wrong &mdash; for example,\n<em>messageName</em> is not a string or the <em>substitutions</em> array has\nmore than 9 elements &mdash; this method returns <code>undefined</code>.",
										"returns": "Message localized for current locale.\n"
									},
									"parameters": [
										{
											"id": 3452,
											"name": "messageName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the message, as specified in the <a href='i18n-messages'><code>messages.json</code></a> file."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3453,
											"name": "substitutions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Up to 9 substitution strings, if the message requires any."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 3454,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3455,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 3456,
															"name": "escapeLt",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Escape <code>&lt;</code> in translation to <code>&amp;lt;</code>. This\napplies only to the message itself, not to the placeholders. Developers might\nwant to use this if the translation is used in an HTML context. Closure\nTemplates used with Closure Compiler generate this automatically."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 11303,
																	"character": 16
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																3456
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 11296,
															"character": 15
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							]
						},
						{
							"id": 3457,
							"name": "getUILanguage",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11313,
									"character": 33
								}
							],
							"signatures": [
								{
									"id": 3458,
									"name": "getUILanguage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the browser UI language of the browser. This is different from {@link\ni18n.getAcceptLanguages} which returns the preferred user languages.",
										"returns": "The browser UI language code such as en-US or fr-FR.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								3472
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								3459,
								3444,
								3450,
								3457
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 11260,
							"character": 23
						}
					]
				},
				{
					"id": 3473,
					"name": "identity",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.identity</code> API to get OAuth2 access tokens.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "identity"
							},
							{
								"tag": "chrome-permission",
								"text": "identity\n"
							}
						]
					},
					"children": [
						{
							"id": 3521,
							"name": "AccountInfo",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 3522,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "A unique identifier for the account. This ID will not change for the lifetime\nof the account."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11361,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										3522
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11356,
									"character": 32
								}
							]
						},
						{
							"id": 3534,
							"name": "InvalidTokenDetails",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 3535,
									"name": "token",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The specific token that should be removed from the cache."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11427,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										3535
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11423,
									"character": 40
								}
							]
						},
						{
							"id": 3524,
							"name": "ProfileDetails",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 3525,
									"name": "accountStatus",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "A status of the primary account signed into a profile whose\n<code>ProfileUserInfo</code> should be returned. Defaults to\n<code>SYNC</code> account status."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11372,
											"character": 19
										}
									],
									"type": {
										"type": "reference",
										"id": 3523,
										"name": "AccountStatus"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										3525
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11366,
									"character": 35
								}
							]
						},
						{
							"id": 3526,
							"name": "ProfileUserInfo",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 3527,
									"name": "email",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "An email address for the user account signed into the current profile. Empty\nif the user is not signed in or the <code>identity.email</code> manifest\npermission is not specified."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11381,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 3528,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "A unique identifier for the account. This ID will not change for the lifetime\nof the account. Empty if the user is not signed in or (in M41+) the\n<code>identity.email</code> manifest permission is not specified."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11388,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										3527,
										3528
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11375,
									"character": 36
								}
							]
						},
						{
							"id": 3529,
							"name": "TokenDetails",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 3531,
									"name": "account",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The account ID whose token should be returned. If not specified, the function\nwill use an account from the Chrome profile: the Sync account if there is\none, or otherwise the first Google web account."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11406,
											"character": 13
										}
									],
									"type": {
										"type": "reference",
										"id": 3521,
										"name": "AccountInfo"
									}
								},
								{
									"id": 3533,
									"name": "enableGranularPermissions",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The <code>enableGranularPermissions</code> flag allows extensions to opt-in\nearly to the granular permissions consent screen, in which requested\npermissions are granted or denied individually."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11420,
											"character": 31
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 3530,
									"name": "interactive",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Fetching a token may require the user to sign-in to Chrome, or approve the\napplication's requested scopes. If the interactive flag is <code>true</code>,\n<code>getAuthToken</code> will prompt the user as necessary. When the flag is\n<code>false</code> or omitted, <code>getAuthToken</code> will return failure\nany time a prompt would be required."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11399,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 3532,
									"name": "scopes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "<p>A list of OAuth2 scopes to request.</p><p>When the <code>scopes</code>\nfield is present, it overrides the list of scopes specified in\nmanifest.json.</p>"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11413,
											"character": 12
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										3531,
										3533,
										3530,
										3532
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11391,
									"character": 33
								}
							]
						},
						{
							"id": 3536,
							"name": "WebAuthFlowDetails",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 3538,
									"name": "interactive",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "<p>Whether to launch auth flow in interactive mode.</p><p>Since some auth\nflows may immediately redirect to a result URL,\n<code>launchWebAuthFlow</code> hides its web view until the first navigation\neither redirects to the final URL, or finishes loading a page meant to be\ndisplayed.</p><p>If the interactive flag is <code>true</code>, the window\nwill be displayed when a page load completes. If the flag is\n<code>false</code> or omitted, <code>launchWebAuthFlow</code> will return\nwith an error if the initial navigation does not complete the flow.</p>"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11446,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 3537,
									"name": "url",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The URL that initiates the auth flow."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11434,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										3538,
										3537
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11430,
									"character": 39
								}
							]
						},
						{
							"id": 3523,
							"name": "AccountStatus",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11364,
									"character": 29
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "SYNC"
									},
									{
										"type": "literal",
										"value": "ANY"
									}
								]
							}
						},
						{
							"id": 3539,
							"name": "onSignInChanged",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when signin state changes for an account on the user's profile."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11586,
									"character": 32
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 3540,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 11586,
													"character": 54
												}
											],
											"signatures": [
												{
													"id": 3541,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 3542,
															"name": "account",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "reference",
																"id": 3521,
																"name": "AccountInfo"
															}
														},
														{
															"id": 3543,
															"name": "signedIn",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 3506,
							"name": "clearAllCachedAuthTokens",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11544,
									"character": 44
								}
							],
							"signatures": [
								{
									"id": 3507,
									"name": "clearAllCachedAuthTokens",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Resets the state of the Identity API: <ul>   <li>Removes all OAuth2 access\ntokens from the token cache</li>   <li>Removes user's account\npreferences</li>   <li>De-authorizes the user from all auth flows</li> </ul>"
									},
									"parameters": [
										{
											"id": 3508,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Called when the state has been cleared.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3509,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 11545,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 3510,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3474,
							"name": "getAccounts",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11457,
									"character": 31
								}
							],
							"signatures": [
								{
									"id": 3475,
									"name": "getAccounts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "<p>Retrieves a list of AccountInfo objects describing the accounts present on\nthe profile.</p><p><code>getAccounts</code> is only supported on dev\nchannel.</p>"
									},
									"parameters": [
										{
											"id": 3476,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3477,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 11458,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 3478,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 3479,
																	"name": "accounts",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 3521,
																			"name": "AccountInfo"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3480,
							"name": "getAuthToken",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11481,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 3481,
									"name": "getAuthToken",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "<p>Gets an OAuth2 access token using the client ID and scopes specified in\nthe <a href=\"app_identity.html#update_manifest\"><code>oauth2</code> section\nof manifest.json</a>.</p><p>The Identity API caches access tokens in memory,\nso it's ok to call <code>getAuthToken</code> non-interactively any time a\ntoken is required. The token cache automatically handles\nexpiration.</p><p>For a good user experience it is important interactive\ntoken requests are initiated by UI in your app explaining what the\nauthorization is for. Failing to do this will cause your users to get\nauthorization requests, or Chrome sign in screens if they are not signed in,\nwith with no context. In particular, do not use <code>getAuthToken</code>\ninteractively when your app is first launched.</p>"
									},
									"parameters": [
										{
											"id": 3482,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Token options."
											},
											"type": {
												"type": "reference",
												"id": 3529,
												"name": "TokenDetails"
											}
										},
										{
											"id": 3483,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called with an OAuth2 access token as specified by the manifest, or undefined if there was an error. The <code>grantedScopes</code> parameter is populated since Chrome 87. When available, this parameter contains the list of granted scopes corresponding with the returned token."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3484,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 11483,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 3485,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 3486,
																	"name": "token",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																},
																{
																	"id": 3487,
																	"name": "grantedScopes",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "string"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3488,
							"name": "getProfileUserInfo",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11500,
									"character": 38
								}
							],
							"signatures": [
								{
									"id": 3489,
									"name": "getProfileUserInfo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "<p>Retrieves email address and obfuscated gaia id of the user signed into a\nprofile.</p><p>Requires the <code>identity.email</code> manifest permission.\nOtherwise, returns an empty result.</p><p>This API is different from\nidentity.getAccounts in two ways. The information returned is available\noffline, and it only applies to the primary account for the profile.</p>"
									},
									"parameters": [
										{
											"id": 3490,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Profile options."
											},
											"type": {
												"type": "reference",
												"id": 3524,
												"name": "ProfileDetails"
											}
										},
										{
											"id": 3491,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Called with the <code>ProfileUserInfo</code> of the primary Chrome account, of an empty <code>ProfileUserInfo</code> if the account with given <code>details</code> doesn't exist."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3492,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 11502,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 3493,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 3494,
																	"name": "userInfo",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 3526,
																		"name": "ProfileUserInfo"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								},
								{
									"id": 3495,
									"name": "getProfileUserInfo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "<p>Retrieves email address and obfuscated gaia id of the user signed into a\nprofile.</p><p>Requires the <code>identity.email</code> manifest permission.\nOtherwise, returns an empty result.</p><p>This API is different from\nidentity.getAccounts in two ways. The information returned is available\noffline, and it only applies to the primary account for the profile.</p>"
									},
									"parameters": [
										{
											"id": 3496,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Called with the <code>ProfileUserInfo</code> of the primary Chrome account, of an empty <code>ProfileUserInfo</code> if the account with given <code>details</code> doesn't exist."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3497,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 11518,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 3498,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 3499,
																	"name": "userInfo",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 3526,
																		"name": "ProfileUserInfo"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3518,
							"name": "getRedirectURL",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11579,
									"character": 34
								}
							],
							"signatures": [
								{
									"id": 3519,
									"name": "getRedirectURL",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "<p>Generates a redirect URL to be used in |launchWebAuthFlow|.</p><p>The\ngenerated URLs match the pattern\n<code>https://&lt;app-id&gt;.chromiumapp.org/*</code>.</p>"
									},
									"parameters": [
										{
											"id": 3520,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The path appended to the end of the generated URL.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							]
						},
						{
							"id": 3511,
							"name": "launchWebAuthFlow",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11565,
									"character": 37
								}
							],
							"signatures": [
								{
									"id": 3512,
									"name": "launchWebAuthFlow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "<p>Starts an auth flow at the specified URL.</p><p>This method enables auth\nflows with non-Google identity providers by launching a web view and\nnavigating it to the first URL in the provider's auth flow. When the provider\nredirects to a URL matching the pattern\n<code>https://&lt;app-id&gt;.chromiumapp.org/*</code>, the window will close,\nand the final redirect URL will be passed to the <var>callback</var>\nfunction.</p><p>For a good user experience it is important interactive auth\nflows are initiated by UI in your app explaining what the authorization is\nfor. Failing to do this will cause your users to get authorization requests\nwith no context. In particular, do not launch an interactive auth flow when\nyour app is first launched.</p>"
									},
									"parameters": [
										{
											"id": 3513,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "WebAuth flow options."
											},
											"type": {
												"type": "reference",
												"id": 3536,
												"name": "WebAuthFlowDetails"
											}
										},
										{
											"id": 3514,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Called with the URL redirected back to your application."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3515,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 11567,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 3516,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 3517,
																	"name": "responseUrl",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3500,
							"name": "removeCachedAuthToken",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11532,
									"character": 41
								}
							],
							"signatures": [
								{
									"id": 3501,
									"name": "removeCachedAuthToken",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "<p>Removes an OAuth2 access token from the Identity API's token\ncache.</p><p>If an access token is discovered to be invalid, it should be\npassed to removeCachedAuthToken to remove it from the cache. The app may then\nretrieve a fresh token with <code>getAuthToken</code>.</p>"
									},
									"parameters": [
										{
											"id": 3502,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Token information."
											},
											"type": {
												"type": "reference",
												"id": 3534,
												"name": "InvalidTokenDetails"
											}
										},
										{
											"id": 3503,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called when the token has been removed from the cache.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3504,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 11534,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 3505,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								3521,
								3534,
								3524,
								3526,
								3529,
								3536
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								3523
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								3539
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								3506,
								3474,
								3480,
								3488,
								3518,
								3511,
								3500
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 11355,
							"character": 27
						}
					]
				},
				{
					"id": 3544,
					"name": "idle",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.idle</code> API to detect when the machine's idle state\nchanges.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "idle"
							},
							{
								"tag": "chrome-permission",
								"text": "idle\n"
							}
						]
					},
					"children": [
						{
							"id": 3561,
							"name": "IdleState",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11608,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "active"
									},
									{
										"type": "literal",
										"value": "idle"
									},
									{
										"type": "literal",
										"value": "locked"
									}
								]
							}
						},
						{
							"id": 3562,
							"name": "onStateChanged",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when the system changes to an active, idle or locked state. The event\nfires with \"locked\" if the screen is locked or the screensaver activates,\n\"idle\" if the system is unlocked and the user has not generated any input for\na specified number of seconds, and \"active\" when the user generates input on\nan idle system."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11656,
									"character": 31
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 3563,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 11656,
													"character": 53
												}
											],
											"signatures": [
												{
													"id": 3564,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 3565,
															"name": "newState",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reference",
																"id": 3561,
																"name": "IdleState"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 3555,
							"name": "getAutoLockDelay",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11643,
									"character": 36
								}
							],
							"signatures": [
								{
									"id": 3556,
									"name": "getAutoLockDelay",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the time, in seconds, it takes until the screen is locked automatically\nwhile idle. Returns a zero duration if the screen is never locked\nautomatically. Currently supported on Chrome OS only."
									},
									"parameters": [
										{
											"id": 3557,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3558,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 11644,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 3559,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 3560,
																	"name": "delay",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "Time, in seconds, until the screen is locked automatically while idle. This is zero if the screen never locks automatically.\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3545,
							"name": "queryState",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11618,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 3546,
									"name": "queryState",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns \"locked\" if the system is locked, \"idle\" if the user has not\ngenerated any input for a specified number of seconds, or \"active\" otherwise."
									},
									"parameters": [
										{
											"id": 3547,
											"name": "detectionIntervalInSeconds",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The system is considered idle if detectionIntervalInSeconds seconds have elapsed since the last user input detected."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 3548,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3549,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 11620,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 3550,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 3551,
																	"name": "newState",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 3561,
																		"name": "IdleState"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3552,
							"name": "setDetectionInterval",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11631,
									"character": 40
								}
							],
							"signatures": [
								{
									"id": 3553,
									"name": "setDetectionInterval",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the interval, in seconds, used to determine when the system is in an\nidle state for onStateChanged events. The default interval is 60 seconds."
									},
									"parameters": [
										{
											"id": 3554,
											"name": "intervalInSeconds",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Threshold, in seconds, used to determine when the system is in an idle state.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								3561
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								3562
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								3555,
								3545,
								3552
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 11607,
							"character": 23
						}
					]
				},
				{
					"id": 3566,
					"name": "incognito",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Dummy namepsace for the incognito manifest key.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "incognito\n"
							}
						]
					},
					"children": [
						{
							"id": 3567,
							"name": "IncognitoMode",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11674,
									"character": 29
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "split"
									},
									{
										"type": "literal",
										"value": "spanning"
									},
									{
										"type": "literal",
										"value": "not_allowed"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								3567
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 11673,
							"character": 28
						}
					]
				},
				{
					"id": 3568,
					"name": "input",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 3569,
							"name": "ime",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"comment": {
								"shortText": "Use the <code>chrome.input.ime</code> API to implement a custom IME for\nChrome OS. This allows your extension to handle keystrokes, set the\ncomposition, and manage the candidate window.",
								"tags": [
									{
										"tag": "chrome-namespace",
										"text": "input.ime"
									},
									{
										"tag": "chrome-platform",
										"text": "chromeos"
									},
									{
										"tag": "chrome-platform",
										"text": "win"
									},
									{
										"tag": "chrome-platform",
										"text": "linux"
									},
									{
										"tag": "chrome-permission",
										"text": "input\n"
									}
								]
							},
							"children": [
								{
									"id": 3753,
									"name": "AssistiveWindowProperties",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Properties of the assistive window."
									},
									"children": [
										{
											"id": 3756,
											"name": "announceString",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Strings for ChromeVox to announce."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 11892,
													"character": 20
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3754,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 11882,
													"character": 10
												}
											],
											"type": {
												"type": "literal",
												"value": "undo"
											}
										},
										{
											"id": 3755,
											"name": "visible",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Sets true to show AssistiveWindow, sets false to hide."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 11887,
													"character": 13
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												3756,
												3754,
												3755
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11881,
											"character": 46
										}
									]
								},
								{
									"id": 3732,
									"name": "InputContext",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Describes an input Context"
									},
									"children": [
										{
											"id": 3737,
											"name": "autoCapitalize",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The auto-capitalize type of the text field."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 11795,
													"character": 20
												}
											],
											"type": {
												"type": "reference",
												"id": 3731,
												"name": "AutoCapitalizeType"
											}
										},
										{
											"id": 3736,
											"name": "autoComplete",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Whether the text field wants auto-complete."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 11790,
													"character": 18
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 3735,
											"name": "autoCorrect",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Whether the text field wants auto-correct."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 11785,
													"character": 17
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 3733,
											"name": "contextID",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "This is used to specify targets of text field operations.  This ID becomes\ninvalid as soon as onBlur is called."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 11775,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 3739,
											"name": "shouldDoLearning",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Whether text entered into the text field should be used to improve typing\nsuggestions for the user."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 11806,
													"character": 22
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 3738,
											"name": "spellCheck",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Whether the text field wants spell-check."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 11800,
													"character": 16
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 3734,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Type of value this text field edits, (Text, Number, URL, etc)"
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 11780,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"id": 3730,
												"name": "InputContextType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												3737,
												3736,
												3735,
												3733,
												3739,
												3738,
												3734
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11770,
											"character": 33
										}
									]
								},
								{
									"id": 3718,
									"name": "KeyboardEvent",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "See http://www.w3.org/TR/DOM-Level-3-Events/#events-KeyboardEvent"
									},
									"children": [
										{
											"id": 3725,
											"name": "altKey",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Whether or not the ALT key is pressed."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 11734,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 3726,
											"name": "altgrKey",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Whether or not the ALTGR key is pressed."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 11739,
													"character": 14
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 3729,
											"name": "capsLock",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Whether or not the CAPS_LOCK is enabled."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 11754,
													"character": 14
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 3723,
											"name": "code",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Value of the physical key being pressed. The value is not affected by current\nkeyboard layout or modifier state."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 11722,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3727,
											"name": "ctrlKey",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Whether or not the CTRL key is pressed."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 11744,
													"character": 13
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 3721,
											"name": "extensionId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "The extension ID of the sender of this keyevent."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 11711,
													"character": 17
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3722,
											"name": "key",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Value of the key being pressed"
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 11716,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3724,
											"name": "keyCode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "The deprecated HTML keyCode, which is system- and implementation-dependent\nnumerical code signifying the unmodified identifier associated with the key\npressed."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 11729,
													"character": 13
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 3720,
											"name": "requestId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "(Deprecated) The ID of the request. Use the <code>requestId</code> param from\nthe <code>onKeyEvent</code> event instead."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 11706,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3728,
											"name": "shiftKey",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Whether or not the SHIFT key is pressed."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 11749,
													"character": 14
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 3719,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "One of keyup or keydown."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 11700,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"id": 3717,
												"name": "KeyboardEventType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												3725,
												3726,
												3729,
												3723,
												3727,
												3721,
												3722,
												3724,
												3720,
												3728,
												3719
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11696,
											"character": 34
										}
									]
								},
								{
									"id": 3741,
									"name": "MenuItem",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A menu item used by an input method to interact with the user from the\nlanguage menu."
									},
									"children": [
										{
											"id": 3746,
											"name": "checked",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Indicates this item should be drawn with a check."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 11843,
													"character": 13
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 3747,
											"name": "enabled",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Indicates this item is enabled."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 11848,
													"character": 13
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 3742,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "String that will be passed to callbacks referencing this MenuItem."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 11823,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3743,
											"name": "label",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Text displayed in the menu for this item."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 11828,
													"character": 11
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3744,
											"name": "style",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "The type of menu item."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 11833,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"id": 3740,
												"name": "MenuItemStyle"
											}
										},
										{
											"id": 3745,
											"name": "visible",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Indicates this item is visible."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 11838,
													"character": 13
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												3746,
												3747,
												3742,
												3743,
												3744,
												3745
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11819,
											"character": 29
										}
									]
								},
								{
									"id": 3758,
									"name": "MenuParameters",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 3759,
											"name": "engineID",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "ID of the engine to use."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 11904,
													"character": 14
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3760,
											"name": "items",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "MenuItems to add or update. They will be added in the order they exist in the\narray."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 11910,
													"character": 11
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 3741,
													"name": "MenuItem"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												3759,
												3760
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11900,
											"character": 35
										}
									]
								},
								{
									"id": 3757,
									"name": "AssistiveWindowButton",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "ID of buttons in assistive window."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11898,
											"character": 37
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "undo"
											},
											{
												"type": "literal",
												"value": "addToDictionary"
											}
										]
									}
								},
								{
									"id": 3752,
									"name": "AssistiveWindowType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Type of assistive window."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11876,
											"character": 35
										}
									],
									"type": {
										"type": "literal",
										"value": "undo"
									}
								},
								{
									"id": 3731,
									"name": "AutoCapitalizeType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "The auto-capitalize type of the text field."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11765,
											"character": 34
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "characters"
											},
											{
												"type": "literal",
												"value": "words"
											},
											{
												"type": "literal",
												"value": "sentences"
											}
										]
									}
								},
								{
									"id": 3730,
									"name": "InputContextType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Type of value this text field edits, (Text, Number, URL, etc)"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11760,
											"character": 32
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "text"
											},
											{
												"type": "literal",
												"value": "search"
											},
											{
												"type": "literal",
												"value": "tel"
											},
											{
												"type": "literal",
												"value": "url"
											},
											{
												"type": "literal",
												"value": "email"
											},
											{
												"type": "literal",
												"value": "number"
											},
											{
												"type": "literal",
												"value": "password"
											},
											{
												"type": "literal",
												"value": "null"
											}
										]
									}
								},
								{
									"id": 3717,
									"name": "KeyboardEventType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11691,
											"character": 33
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "keyup"
											},
											{
												"type": "literal",
												"value": "keydown"
											}
										]
									}
								},
								{
									"id": 3740,
									"name": "MenuItemStyle",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "The type of menu item. Radio buttons between separators are considered\ngrouped."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11813,
											"character": 29
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "check"
											},
											{
												"type": "literal",
												"value": "radio"
											},
											{
												"type": "literal",
												"value": "separator"
											}
										]
									}
								},
								{
									"id": 3751,
									"name": "MouseButton",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Which mouse buttons was clicked."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11871,
											"character": 27
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "left"
											},
											{
												"type": "literal",
												"value": "middle"
											},
											{
												"type": "literal",
												"value": "right"
											}
										]
									}
								},
								{
									"id": 3750,
									"name": "ScreenType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "The screen type under which the IME is activated."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11866,
											"character": 26
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "normal"
											},
											{
												"type": "literal",
												"value": "login"
											},
											{
												"type": "literal",
												"value": "lock"
											},
											{
												"type": "literal",
												"value": "secondary-login"
											}
										]
									}
								},
								{
									"id": 3748,
									"name": "UnderlineStyle",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "The type of the underline to modify this segment."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11854,
											"character": 30
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "underline"
											},
											{
												"type": "literal",
												"value": "doubleUnderline"
											},
											{
												"type": "literal",
												"value": "noUnderline"
											}
										]
									}
								},
								{
									"id": 3749,
									"name": "WindowPosition",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Where to display the candidate window. If set to 'cursor', the window follows\nthe cursor. If set to 'composition', the window is locked to the beginning of\nthe composition."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11861,
											"character": 30
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "cursor"
											},
											{
												"type": "literal",
												"value": "composition"
											}
										]
									}
								},
								{
									"id": 3761,
									"name": "onActivate",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"comment": {
										"shortText": "This event is sent when an IME is activated. It signals that the IME will be\nreceiving onKeyPress events.",
										"tags": [
											{
												"tag": "chrome-platform",
												"text": "chromeos\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 12352,
											"character": 27
										}
									],
									"type": {
										"type": "reference",
										"id": 2537,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 3762,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"comment": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 12352,
															"character": 49
														}
													],
													"signatures": [
														{
															"id": 3763,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"comment": {},
															"parameters": [
																{
																	"id": 3764,
																	"name": "engineID",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "ID of the engine receiving the event"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																},
																{
																	"id": 3765,
																	"name": "screen",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "The screen type under which the IME is activated.\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 3750,
																		"name": "ScreenType"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										],
										"name": "chrome.events.Event"
									}
								},
								{
									"id": 3813,
									"name": "onAssistiveWindowButtonClicked",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"comment": {
										"shortText": "This event is sent when a button in an assistive window is clicked."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 12541,
											"character": 47
										}
									],
									"type": {
										"type": "reference",
										"id": 2537,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 3814,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"comment": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 12541,
															"character": 69
														}
													],
													"signatures": [
														{
															"id": 3815,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"comment": {},
															"parameters": [
																{
																	"id": 3816,
																	"name": "details",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 3817,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 3818,
																					"name": "buttonID",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"comment": {
																						"shortText": "The ID of the button clicked."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 12550,
																							"character": 18
																						}
																					],
																					"type": {
																						"type": "reference",
																						"id": 3757,
																						"name": "AssistiveWindowButton"
																					}
																				},
																				{
																					"id": 3819,
																					"name": "windowType",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"comment": {
																						"shortText": "The type of the assistive window."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 12555,
																							"character": 20
																						}
																					],
																					"type": {
																						"type": "reference",
																						"id": 3752,
																						"name": "AssistiveWindowType"
																					}
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						3818,
																						3819
																					]
																				}
																			],
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 12546,
																					"character": 16
																				}
																			]
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										],
										"name": "chrome.events.Event"
									}
								},
								{
									"id": 3774,
									"name": "onBlur",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"comment": {
										"shortText": "This event is sent when focus leaves a text box. It is sent to all extensions\nthat are listening to this event, and enabled by the user.",
										"tags": [
											{
												"tag": "chrome-platform",
												"text": "chromeos\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 12399,
											"character": 23
										}
									],
									"type": {
										"type": "reference",
										"id": 2537,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 3775,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"comment": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 12399,
															"character": 45
														}
													],
													"signatures": [
														{
															"id": 3776,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"comment": {},
															"parameters": [
																{
																	"id": 3777,
																	"name": "contextID",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "The ID of the text field that has lost focus. The ID is invalid after this call\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										],
										"name": "chrome.events.Event"
									}
								},
								{
									"id": 3788,
									"name": "onCandidateClicked",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"comment": {
										"shortText": "This event is sent if this extension owns the active IME.",
										"tags": [
											{
												"tag": "chrome-platform",
												"text": "chromeos\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 12452,
											"character": 35
										}
									],
									"type": {
										"type": "reference",
										"id": 2537,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 3789,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"comment": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 12452,
															"character": 57
														}
													],
													"signatures": [
														{
															"id": 3790,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"comment": {},
															"parameters": [
																{
																	"id": 3791,
																	"name": "engineID",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "ID of the engine receiving the event"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																},
																{
																	"id": 3792,
																	"name": "candidateID",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "ID of the candidate that was clicked."
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 3793,
																	"name": "button",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "Which mouse buttons was clicked.\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 3751,
																		"name": "MouseButton"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										],
										"name": "chrome.events.Event"
									}
								},
								{
									"id": 3766,
									"name": "onDeactivated",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"comment": {
										"shortText": "This event is sent when an IME is deactivated. It signals that the IME will\nno longer be receiving onKeyPress events.",
										"tags": [
											{
												"tag": "chrome-platform",
												"text": "chromeos\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 12369,
											"character": 30
										}
									],
									"type": {
										"type": "reference",
										"id": 2537,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 3767,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"comment": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 12369,
															"character": 52
														}
													],
													"signatures": [
														{
															"id": 3768,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"comment": {},
															"parameters": [
																{
																	"id": 3769,
																	"name": "engineID",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "ID of the engine receiving the event\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										],
										"name": "chrome.events.Event"
									}
								},
								{
									"id": 3770,
									"name": "onFocus",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"comment": {
										"shortText": "This event is sent when focus enters a text box. It is sent to all extensions\nthat are listening to this event, and enabled by the user.",
										"tags": [
											{
												"tag": "chrome-platform",
												"text": "chromeos\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 12384,
											"character": 24
										}
									],
									"type": {
										"type": "reference",
										"id": 2537,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 3771,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"comment": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 12384,
															"character": 46
														}
													],
													"signatures": [
														{
															"id": 3772,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"comment": {},
															"parameters": [
																{
																	"id": 3773,
																	"name": "context",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "Describes the text field that has acquired focus.\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 3732,
																		"name": "InputContext"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										],
										"name": "chrome.events.Event"
									}
								},
								{
									"id": 3778,
									"name": "onInputContextUpdate",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"comment": {
										"shortText": "This event is sent when the properties of the current InputContext change,\nsuch as the the type. It is sent to all extensions that are listening to this\nevent, and enabled by the user.",
										"tags": [
											{
												"tag": "chrome-platform",
												"text": "chromeos\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 12415,
											"character": 37
										}
									],
									"type": {
										"type": "reference",
										"id": 2537,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 3779,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"comment": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 12415,
															"character": 59
														}
													],
													"signatures": [
														{
															"id": 3780,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"comment": {},
															"parameters": [
																{
																	"id": 3781,
																	"name": "context",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "An InputContext object describing the text field that has changed.\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 3732,
																		"name": "InputContext"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										],
										"name": "chrome.events.Event"
									}
								},
								{
									"id": 3782,
									"name": "onKeyEvent",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"comment": {
										"shortText": "Fired when a key event is sent from the operating system. The event will be\nsent to the extension if this extension owns the active IME. The listener\nfunction should return true if the event was handled false if it was not.  If\nthe event will be evaluated asynchronously, this function must return\nundefined and the IME must later call keyEventHandled() with the result.",
										"tags": [
											{
												"tag": "chrome-platform",
												"text": "chromeos\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 12433,
											"character": 27
										}
									],
									"type": {
										"type": "reference",
										"id": 2537,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 3783,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"comment": {
														"returns": "True if the keystroke was handled, false if not. Or returns undefined if the extension decides to call keyEventHandled explicitly.\n"
													},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 12433,
															"character": 49
														}
													],
													"signatures": [
														{
															"id": 3784,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"comment": {
																"returns": "True if the keystroke was handled, false if not. Or returns undefined if the extension decides to call keyEventHandled explicitly.\n"
															},
															"parameters": [
																{
																	"id": 3785,
																	"name": "engineID",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "ID of the engine receiving the event"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																},
																{
																	"id": 3786,
																	"name": "keyData",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "Data on the key event"
																	},
																	"type": {
																		"type": "reference",
																		"id": 3718,
																		"name": "KeyboardEvent"
																	}
																},
																{
																	"id": 3787,
																	"name": "requestId",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "ID of the request. If the event listener returns undefined, then <code>keyEventHandled</code> must be called later with this <code>requestId</code>."
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													]
												}
											}
										],
										"name": "chrome.events.Event"
									}
								},
								{
									"id": 3794,
									"name": "onMenuItemActivated",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"comment": {
										"shortText": "Called when the user selects a menu item",
										"tags": [
											{
												"tag": "chrome-platform",
												"text": "chromeos\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 12470,
											"character": 36
										}
									],
									"type": {
										"type": "reference",
										"id": 2537,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 3795,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"comment": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 12470,
															"character": 58
														}
													],
													"signatures": [
														{
															"id": 3796,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"comment": {},
															"parameters": [
																{
																	"id": 3797,
																	"name": "engineID",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "ID of the engine receiving the event"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																},
																{
																	"id": 3798,
																	"name": "name",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "Name of the MenuItem which was activated\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										],
										"name": "chrome.events.Event"
									}
								},
								{
									"id": 3809,
									"name": "onReset",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"comment": {
										"shortText": "This event is sent when chrome terminates ongoing text input session.",
										"tags": [
											{
												"tag": "chrome-platform",
												"text": "chromeos\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 12529,
											"character": 24
										}
									],
									"type": {
										"type": "reference",
										"id": 2537,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 3810,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"comment": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 12529,
															"character": 46
														}
													],
													"signatures": [
														{
															"id": 3811,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"comment": {},
															"parameters": [
																{
																	"id": 3812,
																	"name": "engineID",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "ID of the engine receiving the event\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										],
										"name": "chrome.events.Event"
									}
								},
								{
									"id": 3799,
									"name": "onSurroundingTextChanged",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"comment": {
										"shortText": "Called when the editable string around caret is changed or when the caret\nposition is moved. The text length is limited to 100 characters for each back\nand forth direction.",
										"tags": [
											{
												"tag": "chrome-platform",
												"text": "chromeos\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 12488,
											"character": 41
										}
									],
									"type": {
										"type": "reference",
										"id": 2537,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 3800,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"comment": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 12488,
															"character": 63
														}
													],
													"signatures": [
														{
															"id": 3801,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"comment": {},
															"parameters": [
																{
																	"id": 3802,
																	"name": "engineID",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "ID of the engine receiving the event"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																},
																{
																	"id": 3803,
																	"name": "surroundingInfo",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "The surrounding information.\n"
																	},
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 3804,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 3807,
																					"name": "anchor",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"comment": {
																						"shortText": "The beginning position of the selection. This value indicates caret position\nif there is no selection."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 12512,
																							"character": 16
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "number"
																					}
																				},
																				{
																					"id": 3806,
																					"name": "focus",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"comment": {
																						"shortText": "The ending position of the selection. This value indicates caret position if\nthere is no selection."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 12506,
																							"character": 15
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "number"
																					}
																				},
																				{
																					"id": 3808,
																					"name": "offset",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"comment": {
																						"shortText": "The offset position of <code>text</code>. Since <code>text</code> only\nincludes a subset of text around the cursor, offset indicates the absolute\nposition of the first character of <code>text</code>."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 12519,
																							"character": 16
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "number"
																					}
																				},
																				{
																					"id": 3805,
																					"name": "text",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"comment": {
																						"shortText": "The text around the cursor. This is only a subset of all text in the input\nfield."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 12500,
																							"character": 14
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "string"
																					}
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						3807,
																						3806,
																						3808,
																						3805
																					]
																				}
																			],
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 12495,
																					"character": 24
																				}
																			]
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										],
										"name": "chrome.events.Event"
									}
								},
								{
									"id": 3588,
									"name": "clearComposition",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11983,
											"character": 36
										}
									],
									"signatures": [
										{
											"id": 3589,
											"name": "clearComposition",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Clear the current composition. If this extension does not own the active IME,\nthis fails.",
												"tags": [
													{
														"tag": "chrome-platform",
														"text": "chromeos"
													}
												]
											},
											"parameters": [
												{
													"id": 3590,
													"name": "parameters",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 3591,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 3592,
																	"name": "contextID",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"comment": {
																		"shortText": "ID of the context where the composition will be cleared"
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 11988,
																			"character": 17
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"kind": 1024,
																	"children": [
																		3592
																	]
																}
															],
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 11984,
																	"character": 17
																}
															]
														}
													}
												},
												{
													"id": 3593,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "Called when the operation completes with a boolean indicating if the text was accepted or not. On failure, {@link runtime.lastError} is set."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 3594,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 11990,
																	"character": 16
																}
															],
															"signatures": [
																{
																	"id": 3595,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 3596,
																			"name": "success",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "\n"
																			},
																			"type": {
																				"type": "intrinsic",
																				"name": "boolean"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 3597,
									"name": "commitText",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 12003,
											"character": 30
										}
									],
									"signatures": [
										{
											"id": 3598,
											"name": "commitText",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Commits the provided text to the current input.",
												"tags": [
													{
														"tag": "chrome-platform",
														"text": "chromeos"
													}
												]
											},
											"parameters": [
												{
													"id": 3599,
													"name": "parameters",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 3600,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 3601,
																	"name": "contextID",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"comment": {
																		"shortText": "ID of the context where the text will be committed"
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 12008,
																			"character": 17
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 3602,
																	"name": "text",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"comment": {
																		"shortText": "The text to commit"
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 12013,
																			"character": 12
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"kind": 1024,
																	"children": [
																		3601,
																		3602
																	]
																}
															],
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 12004,
																	"character": 17
																}
															]
														}
													}
												},
												{
													"id": 3603,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "Called when the operation completes with a boolean indicating if the text was accepted or not. On failure, {@link runtime.lastError} is set."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 3604,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 12015,
																	"character": 16
																}
															],
															"signatures": [
																{
																	"id": 3605,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 3606,
																			"name": "success",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "\n"
																			},
																			"type": {
																				"type": "intrinsic",
																				"name": "boolean"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 3702,
									"name": "deleteSurroundingText",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 12307,
											"character": 41
										}
									],
									"signatures": [
										{
											"id": 3703,
											"name": "deleteSurroundingText",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Deletes the text around the caret.",
												"tags": [
													{
														"tag": "chrome-platform",
														"text": "chromeos"
													}
												]
											},
											"parameters": [
												{
													"id": 3704,
													"name": "parameters",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 3705,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 3707,
																	"name": "contextID",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"comment": {
																		"shortText": "ID of the context where the surrounding text will be deleted."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 12317,
																			"character": 17
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 3706,
																	"name": "engineID",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"comment": {
																		"shortText": "ID of the engine receiving the event."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 12312,
																			"character": 16
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																},
																{
																	"id": 3709,
																	"name": "length",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"comment": {
																		"shortText": "The number of characters to be deleted"
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 12328,
																			"character": 14
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 3708,
																	"name": "offset",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"comment": {
																		"shortText": "The offset from the caret position where deletion will start. This value can\nbe negative."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 12323,
																			"character": 14
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"kind": 1024,
																	"children": [
																		3707,
																		3706,
																		3709,
																		3708
																	]
																}
															],
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 12308,
																	"character": 17
																}
															]
														}
													}
												},
												{
													"id": 3710,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "Called when the operation completes.\n"
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 3711,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 12330,
																	"character": 16
																}
															],
															"signatures": [
																{
																	"id": 3712,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 3616,
									"name": "hideInputView",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 12051,
											"character": 33
										}
									],
									"signatures": [
										{
											"id": 3617,
											"name": "hideInputView",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Hides the input view window, which is popped up automatically by system. If\nthe input view window is already hidden, this function will do nothing.",
												"tags": [
													{
														"tag": "chrome-platform",
														"text": "chromeos\n"
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 3713,
									"name": "keyEventHandled",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 12341,
											"character": 35
										}
									],
									"signatures": [
										{
											"id": 3714,
											"name": "keyEventHandled",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Indicates that the key event received by onKeyEvent is handled.  This should\nonly be called if the onKeyEvent listener is asynchronous.",
												"tags": [
													{
														"tag": "chrome-platform",
														"text": "chromeos"
													}
												]
											},
											"parameters": [
												{
													"id": 3715,
													"name": "requestId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Request id of the event that was handled.  This should come from keyEvent.requestId"
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 3716,
													"name": "response",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "True if the keystroke was handled, false if not\n"
													},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 3607,
									"name": "sendKeyEvents",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 12029,
											"character": 33
										}
									],
									"signatures": [
										{
											"id": 3608,
											"name": "sendKeyEvents",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Sends the key events.  This function is expected to be used by virtual\nkeyboards.  When key(s) on a virtual keyboard is pressed by a user, this\nfunction is used to propagate that event to the system.",
												"tags": [
													{
														"tag": "chrome-platform",
														"text": "chromeos"
													}
												]
											},
											"parameters": [
												{
													"id": 3609,
													"name": "parameters",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 3610,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 3611,
																	"name": "contextID",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"comment": {
																		"shortText": "ID of the context where the key events will be sent, or zero to send key\nevents to non-input field."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 12035,
																			"character": 17
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 3612,
																	"name": "keyData",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"comment": {
																		"shortText": "Data on the key event."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 12040,
																			"character": 15
																		}
																	],
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 3718,
																			"name": "KeyboardEvent"
																		}
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"kind": 1024,
																	"children": [
																		3611,
																		3612
																	]
																}
															],
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 12030,
																	"character": 17
																}
															]
														}
													}
												},
												{
													"id": 3613,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "Called when the operation completes.\n"
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 3614,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 12042,
																	"character": 16
																}
															],
															"signatures": [
																{
																	"id": 3615,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 3678,
									"name": "setAssistiveWindowButtonHighlighted",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 12246,
											"character": 55
										}
									],
									"signatures": [
										{
											"id": 3679,
											"name": "setAssistiveWindowButtonHighlighted",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Highlights/Unhighlights a button in an assistive window.",
												"tags": [
													{
														"tag": "chrome-platform",
														"text": "chromeos"
													}
												]
											},
											"parameters": [
												{
													"id": 3680,
													"name": "parameters",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 3681,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 3685,
																	"name": "announceString",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"shortText": "The text for the screenreader to announce."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 12266,
																			"character": 22
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																},
																{
																	"id": 3683,
																	"name": "buttonID",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"comment": {
																		"shortText": "The ID of the button"
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 12256,
																			"character": 16
																		}
																	],
																	"type": {
																		"type": "reference",
																		"id": 3757,
																		"name": "AssistiveWindowButton"
																	}
																},
																{
																	"id": 3682,
																	"name": "contextID",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"comment": {
																		"shortText": "ID of the context owning the assistive window."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 12251,
																			"character": 17
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 3686,
																	"name": "highlighted",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"comment": {
																		"shortText": "Whether the button should be highlighted."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 12271,
																			"character": 19
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "boolean"
																	}
																},
																{
																	"id": 3684,
																	"name": "windowType",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"comment": {
																		"shortText": "The window type the button belongs to."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 12261,
																			"character": 18
																		}
																	],
																	"type": {
																		"type": "reference",
																		"id": 3752,
																		"name": "AssistiveWindowType"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"kind": 1024,
																	"children": [
																		3685,
																		3683,
																		3682,
																		3686,
																		3684
																	]
																}
															],
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 12247,
																	"character": 17
																}
															]
														}
													}
												},
												{
													"id": 3687,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "Called when the operation completes. On failure, {@link runtime.lastError} is set.\n"
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 3688,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 12273,
																	"character": 16
																}
															],
															"signatures": [
																{
																	"id": 3689,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 3668,
									"name": "setAssistiveWindowProperties",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 12222,
											"character": 48
										}
									],
									"signatures": [
										{
											"id": 3669,
											"name": "setAssistiveWindowProperties",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Shows/Hides an assistive window with the given properties.",
												"tags": [
													{
														"tag": "chrome-platform",
														"text": "chromeos"
													}
												]
											},
											"parameters": [
												{
													"id": 3670,
													"name": "parameters",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 3671,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 3672,
																	"name": "contextID",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"comment": {
																		"shortText": "ID of the context owning the assistive window."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 12227,
																			"character": 17
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 3673,
																	"name": "properties",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"comment": {
																		"shortText": "Properties of the assistive window."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 12232,
																			"character": 18
																		}
																	],
																	"type": {
																		"type": "reference",
																		"id": 3753,
																		"name": "AssistiveWindowProperties"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"kind": 1024,
																	"children": [
																		3672,
																		3673
																	]
																}
															],
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 12223,
																	"character": 17
																}
															]
														}
													}
												},
												{
													"id": 3674,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "Called when the operation completes."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 3675,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 12234,
																	"character": 16
																}
															],
															"signatures": [
																{
																	"id": 3676,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 3677,
																			"name": "success",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "\n"
																			},
																			"type": {
																				"type": "intrinsic",
																				"name": "boolean"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 3618,
									"name": "setCandidateWindowProperties",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 12062,
											"character": 48
										}
									],
									"signatures": [
										{
											"id": 3619,
											"name": "setCandidateWindowProperties",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Sets the properties of the candidate window. This fails if the extension\ndoesn't own the active IME",
												"tags": [
													{
														"tag": "chrome-platform",
														"text": "chromeos"
													}
												]
											},
											"parameters": [
												{
													"id": 3620,
													"name": "parameters",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 3621,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 3622,
																	"name": "engineID",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"comment": {
																		"shortText": "ID of the engine to set properties on."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 12067,
																			"character": 16
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																},
																{
																	"id": 3623,
																	"name": "properties",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 12068,
																			"character": 18
																		}
																	],
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 3624,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 3629,
																					"name": "auxiliaryText",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {
																						"isOptional": true
																					},
																					"comment": {
																						"shortText": "Text that is shown at the bottom of the candidate window."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 12093,
																							"character": 23
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "string"
																					}
																				},
																				{
																					"id": 3630,
																					"name": "auxiliaryTextVisible",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {
																						"isOptional": true
																					},
																					"comment": {
																						"shortText": "True to display the auxiliary text, false to hide it."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 12098,
																							"character": 30
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "boolean"
																					}
																				},
																				{
																					"id": 3632,
																					"name": "currentCandidateIndex",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {
																						"isOptional": true
																					},
																					"comment": {
																						"shortText": "The index of the current chosen candidate out of total candidates."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 12108,
																							"character": 31
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "number"
																					}
																				},
																				{
																					"id": 3626,
																					"name": "cursorVisible",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {
																						"isOptional": true
																					},
																					"comment": {
																						"shortText": "True to show the cursor, false to hide it."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 12077,
																							"character": 23
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "boolean"
																					}
																				},
																				{
																					"id": 3628,
																					"name": "pageSize",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {
																						"isOptional": true
																					},
																					"comment": {
																						"shortText": "The number of candidates to display per page."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 12088,
																							"character": 18
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "number"
																					}
																				},
																				{
																					"id": 3631,
																					"name": "totalCandidates",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {
																						"isOptional": true
																					},
																					"comment": {
																						"shortText": "The total number of candidates for the candidate window."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 12103,
																							"character": 25
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "number"
																					}
																				},
																				{
																					"id": 3627,
																					"name": "vertical",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {
																						"isOptional": true
																					},
																					"comment": {
																						"shortText": "True if the candidate window should be rendered vertical, false to make it\nhorizontal."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 12083,
																							"character": 18
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "boolean"
																					}
																				},
																				{
																					"id": 3625,
																					"name": "visible",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {
																						"isOptional": true
																					},
																					"comment": {
																						"shortText": "True to show the Candidate window, false to hide it."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 12072,
																							"character": 17
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "boolean"
																					}
																				},
																				{
																					"id": 3633,
																					"name": "windowPosition",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {
																						"isOptional": true
																					},
																					"comment": {
																						"shortText": "Where to display the candidate window."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 12113,
																							"character": 24
																						}
																					],
																					"type": {
																						"type": "reference",
																						"id": 3749,
																						"name": "WindowPosition"
																					}
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						3629,
																						3630,
																						3632,
																						3626,
																						3628,
																						3631,
																						3627,
																						3625,
																						3633
																					]
																				}
																			],
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 12068,
																					"character": 19
																				}
																			]
																		}
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"kind": 1024,
																	"children": [
																		3622,
																		3623
																	]
																}
															],
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 12063,
																	"character": 17
																}
															]
														}
													}
												},
												{
													"id": 3634,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "Called when the operation completes."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 3635,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 12116,
																	"character": 16
																}
															],
															"signatures": [
																{
																	"id": 3636,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 3637,
																			"name": "success",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "\n"
																			},
																			"type": {
																				"type": "intrinsic",
																				"name": "boolean"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 3638,
									"name": "setCandidates",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 12130,
											"character": 33
										}
									],
									"signatures": [
										{
											"id": 3639,
											"name": "setCandidates",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Sets the current candidate list. This fails if this extension doesn't own the\nactive IME",
												"tags": [
													{
														"tag": "chrome-platform",
														"text": "chromeos"
													}
												]
											},
											"parameters": [
												{
													"id": 3640,
													"name": "parameters",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 3641,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 3643,
																	"name": "candidates",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"comment": {
																		"shortText": "List of candidates to show in the candidate window"
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 12140,
																			"character": 18
																		}
																	],
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reflection",
																			"declaration": {
																				"id": 3644,
																				"name": "__type",
																				"kind": 65536,
																				"kindString": "Type literal",
																				"flags": {},
																				"children": [
																					{
																						"id": 3649,
																						"name": "annotation",
																						"kind": 1024,
																						"kindString": "Property",
																						"flags": {
																							"isOptional": true
																						},
																						"comment": {
																							"shortText": "Additional text describing the candidate"
																						},
																						"sources": [
																							{
																								"fileName": "npm/index.d.ts",
																								"line": 12165,
																								"character": 20
																							}
																						],
																						"type": {
																							"type": "intrinsic",
																							"name": "string"
																						}
																					},
																					{
																						"id": 3645,
																						"name": "candidate",
																						"kind": 1024,
																						"kindString": "Property",
																						"flags": {},
																						"comment": {
																							"shortText": "The candidate"
																						},
																						"sources": [
																							{
																								"fileName": "npm/index.d.ts",
																								"line": 12144,
																								"character": 19
																							}
																						],
																						"type": {
																							"type": "intrinsic",
																							"name": "string"
																						}
																					},
																					{
																						"id": 3646,
																						"name": "id",
																						"kind": 1024,
																						"kindString": "Property",
																						"flags": {},
																						"comment": {
																							"shortText": "The candidate's id"
																						},
																						"sources": [
																							{
																								"fileName": "npm/index.d.ts",
																								"line": 12149,
																								"character": 12
																							}
																						],
																						"type": {
																							"type": "intrinsic",
																							"name": "number"
																						}
																					},
																					{
																						"id": 3648,
																						"name": "label",
																						"kind": 1024,
																						"kindString": "Property",
																						"flags": {
																							"isOptional": true
																						},
																						"comment": {
																							"shortText": "Short string displayed to next to the candidate, often the shortcut key or\nindex"
																						},
																						"sources": [
																							{
																								"fileName": "npm/index.d.ts",
																								"line": 12160,
																								"character": 15
																							}
																						],
																						"type": {
																							"type": "intrinsic",
																							"name": "string"
																						}
																					},
																					{
																						"id": 3647,
																						"name": "parentId",
																						"kind": 1024,
																						"kindString": "Property",
																						"flags": {
																							"isOptional": true
																						},
																						"comment": {
																							"shortText": "The id to add these candidates under"
																						},
																						"sources": [
																							{
																								"fileName": "npm/index.d.ts",
																								"line": 12154,
																								"character": 18
																							}
																						],
																						"type": {
																							"type": "intrinsic",
																							"name": "number"
																						}
																					},
																					{
																						"id": 3650,
																						"name": "usage",
																						"kind": 1024,
																						"kindString": "Property",
																						"flags": {
																							"isOptional": true
																						},
																						"comment": {
																							"shortText": "The usage or detail description of word."
																						},
																						"sources": [
																							{
																								"fileName": "npm/index.d.ts",
																								"line": 12170,
																								"character": 15
																							}
																						],
																						"type": {
																							"type": "reflection",
																							"declaration": {
																								"id": 3651,
																								"name": "__type",
																								"kind": 65536,
																								"kindString": "Type literal",
																								"flags": {},
																								"children": [
																									{
																										"id": 3653,
																										"name": "body",
																										"kind": 1024,
																										"kindString": "Property",
																										"flags": {},
																										"comment": {
																											"shortText": "The body string of detail description."
																										},
																										"sources": [
																											{
																												"fileName": "npm/index.d.ts",
																												"line": 12179,
																												"character": 16
																											}
																										],
																										"type": {
																											"type": "intrinsic",
																											"name": "string"
																										}
																									},
																									{
																										"id": 3652,
																										"name": "title",
																										"kind": 1024,
																										"kindString": "Property",
																										"flags": {},
																										"comment": {
																											"shortText": "The title string of details description."
																										},
																										"sources": [
																											{
																												"fileName": "npm/index.d.ts",
																												"line": 12174,
																												"character": 17
																											}
																										],
																										"type": {
																											"type": "intrinsic",
																											"name": "string"
																										}
																									}
																								],
																								"groups": [
																									{
																										"title": "Properties",
																										"kind": 1024,
																										"children": [
																											3653,
																											3652
																										]
																									}
																								],
																								"sources": [
																									{
																										"fileName": "npm/index.d.ts",
																										"line": 12170,
																										"character": 17
																									}
																								]
																							}
																						}
																					}
																				],
																				"groups": [
																					{
																						"title": "Properties",
																						"kind": 1024,
																						"children": [
																							3649,
																							3645,
																							3646,
																							3648,
																							3647,
																							3650
																						]
																					}
																				],
																				"sources": [
																					{
																						"fileName": "npm/index.d.ts",
																						"line": 12140,
																						"character": 19
																					}
																				]
																			}
																		}
																	}
																},
																{
																	"id": 3642,
																	"name": "contextID",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"comment": {
																		"shortText": "ID of the context that owns the candidate window."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 12135,
																			"character": 17
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"kind": 1024,
																	"children": [
																		3643,
																		3642
																	]
																}
															],
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 12131,
																	"character": 17
																}
															]
														}
													}
												},
												{
													"id": 3654,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "Called when the operation completes."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 3655,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 12183,
																	"character": 16
																}
															],
															"signatures": [
																{
																	"id": 3656,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 3657,
																			"name": "success",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "\n"
																			},
																			"type": {
																				"type": "intrinsic",
																				"name": "boolean"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 3570,
									"name": "setComposition",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 11922,
											"character": 34
										}
									],
									"signatures": [
										{
											"id": 3571,
											"name": "setComposition",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Set the current composition. If this extension does not own the active IME,\nthis fails.",
												"tags": [
													{
														"tag": "chrome-platform",
														"text": "chromeos"
													}
												]
											},
											"parameters": [
												{
													"id": 3572,
													"name": "parameters",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 3573,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 3574,
																	"name": "contextID",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"comment": {
																		"shortText": "ID of the context where the composition text will be set"
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 11927,
																			"character": 17
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 3578,
																	"name": "cursor",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"comment": {
																		"shortText": "Position in the text of the cursor."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 11947,
																			"character": 14
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 3579,
																	"name": "segments",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"shortText": "List of segments and their associated types."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 11952,
																			"character": 16
																		}
																	],
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reflection",
																			"declaration": {
																				"id": 3580,
																				"name": "__type",
																				"kind": 65536,
																				"kindString": "Type literal",
																				"flags": {},
																				"children": [
																					{
																						"id": 3582,
																						"name": "end",
																						"kind": 1024,
																						"kindString": "Property",
																						"flags": {},
																						"comment": {
																							"shortText": "Index of the character to end this segment after."
																						},
																						"sources": [
																							{
																								"fileName": "npm/index.d.ts",
																								"line": 11961,
																								"character": 13
																							}
																						],
																						"type": {
																							"type": "intrinsic",
																							"name": "number"
																						}
																					},
																					{
																						"id": 3581,
																						"name": "start",
																						"kind": 1024,
																						"kindString": "Property",
																						"flags": {},
																						"comment": {
																							"shortText": "Index of the character to start this segment at"
																						},
																						"sources": [
																							{
																								"fileName": "npm/index.d.ts",
																								"line": 11956,
																								"character": 15
																							}
																						],
																						"type": {
																							"type": "intrinsic",
																							"name": "number"
																						}
																					},
																					{
																						"id": 3583,
																						"name": "style",
																						"kind": 1024,
																						"kindString": "Property",
																						"flags": {},
																						"comment": {
																							"shortText": "The type of the underline to modify this segment."
																						},
																						"sources": [
																							{
																								"fileName": "npm/index.d.ts",
																								"line": 11966,
																								"character": 15
																							}
																						],
																						"type": {
																							"type": "reference",
																							"id": 3748,
																							"name": "UnderlineStyle"
																						}
																					}
																				],
																				"groups": [
																					{
																						"title": "Properties",
																						"kind": 1024,
																						"children": [
																							3582,
																							3581,
																							3583
																						]
																					}
																				],
																				"sources": [
																					{
																						"fileName": "npm/index.d.ts",
																						"line": 11952,
																						"character": 18
																					}
																				]
																			}
																		}
																	}
																},
																{
																	"id": 3577,
																	"name": "selectionEnd",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"shortText": "Position in the text that the selection ends at."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 11942,
																			"character": 20
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 3576,
																	"name": "selectionStart",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"shortText": "Position in the text that the selection starts at."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 11937,
																			"character": 22
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 3575,
																	"name": "text",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"comment": {
																		"shortText": "Text to set"
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 11932,
																			"character": 12
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"kind": 1024,
																	"children": [
																		3574,
																		3578,
																		3579,
																		3577,
																		3576,
																		3575
																	]
																}
															],
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 11923,
																	"character": 17
																}
															]
														}
													}
												},
												{
													"id": 3584,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "Called when the operation completes with a boolean indicating if the text was accepted or not. On failure, {@link runtime.lastError} is set."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 3585,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 11969,
																	"character": 16
																}
															],
															"signatures": [
																{
																	"id": 3586,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 3587,
																			"name": "success",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "\n"
																			},
																			"type": {
																				"type": "intrinsic",
																				"name": "boolean"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 3658,
									"name": "setCursorPosition",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 12197,
											"character": 37
										}
									],
									"signatures": [
										{
											"id": 3659,
											"name": "setCursorPosition",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Set the position of the cursor in the candidate window. This is a no-op if\nthis extension does not own the active IME.",
												"tags": [
													{
														"tag": "chrome-platform",
														"text": "chromeos"
													}
												]
											},
											"parameters": [
												{
													"id": 3660,
													"name": "parameters",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 3661,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 3663,
																	"name": "candidateID",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"comment": {
																		"shortText": "ID of the candidate to select."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 12207,
																			"character": 19
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 3662,
																	"name": "contextID",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"comment": {
																		"shortText": "ID of the context that owns the candidate window."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 12202,
																			"character": 17
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"kind": 1024,
																	"children": [
																		3663,
																		3662
																	]
																}
															],
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 12198,
																	"character": 17
																}
															]
														}
													}
												},
												{
													"id": 3664,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "Called when the operation completes"
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 3665,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 12209,
																	"character": 16
																}
															],
															"signatures": [
																{
																	"id": 3666,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 3667,
																			"name": "success",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "\n"
																			},
																			"type": {
																				"type": "intrinsic",
																				"name": "boolean"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 3690,
									"name": "setMenuItems",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 12283,
											"character": 32
										}
									],
									"signatures": [
										{
											"id": 3691,
											"name": "setMenuItems",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Adds the provided menu items to the language menu when this IME is active.",
												"tags": [
													{
														"tag": "chrome-platform",
														"text": "chromeos"
													}
												]
											},
											"parameters": [
												{
													"id": 3692,
													"name": "parameters",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "reference",
														"id": 3758,
														"name": "MenuParameters"
													}
												},
												{
													"id": 3693,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "\n"
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 3694,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 12285,
																	"character": 16
																}
															],
															"signatures": [
																{
																	"id": 3695,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 3696,
									"name": "updateMenuItems",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 12295,
											"character": 35
										}
									],
									"signatures": [
										{
											"id": 3697,
											"name": "updateMenuItems",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Updates the state of the MenuItems specified",
												"tags": [
													{
														"tag": "chrome-platform",
														"text": "chromeos"
													}
												]
											},
											"parameters": [
												{
													"id": 3698,
													"name": "parameters",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "reference",
														"id": 3758,
														"name": "MenuParameters"
													}
												},
												{
													"id": 3699,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "Called when the operation completes\n"
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 3700,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 12297,
																	"character": 16
																}
															],
															"signatures": [
																{
																	"id": 3701,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										3753,
										3732,
										3718,
										3741,
										3758
									]
								},
								{
									"title": "Type aliases",
									"kind": 4194304,
									"children": [
										3757,
										3752,
										3731,
										3730,
										3717,
										3740,
										3751,
										3750,
										3748,
										3749
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										3761,
										3813,
										3774,
										3788,
										3766,
										3770,
										3778,
										3782,
										3794,
										3809,
										3799
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										3588,
										3597,
										3702,
										3616,
										3713,
										3607,
										3678,
										3668,
										3618,
										3638,
										3570,
										3658,
										3690,
										3696
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 11690,
									"character": 28
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								3569
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 11690,
							"character": 24
						}
					]
				},
				{
					"id": 3820,
					"name": "instanceID",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use <code>chrome.instanceID</code> to access the Instance ID service.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "instanceID"
							},
							{
								"tag": "chrome-permission",
								"text": "gcm\n"
							}
						]
					},
					"children": [
						{
							"id": 3861,
							"name": "onTokenRefresh",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when all the granted tokens need to be refreshed."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 12666,
									"character": 31
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 3862,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 12666,
													"character": 53
												}
											],
											"signatures": [
												{
													"id": 3863,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 3856,
							"name": "deleteID",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 12659,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 3857,
									"name": "deleteID",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Resets the app instance identifier and revokes all tokens associated with it."
									},
									"parameters": [
										{
											"id": 3858,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function called when the deletion completes. The instance identifier was revoked successfully if {@link runtime.lastError} is not set.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3859,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 12660,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 3860,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3847,
							"name": "deleteToken",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 12639,
									"character": 31
								}
							],
							"signatures": [
								{
									"id": 3848,
									"name": "deleteToken",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Revokes a granted token."
									},
									"parameters": [
										{
											"id": 3849,
											"name": "deleteTokenParams",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Parameters for deleteToken."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3850,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 3851,
															"name": "authorizedEntity",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "The authorized entity that is used to obtain the token."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 12644,
																	"character": 24
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 3852,
															"name": "scope",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "The scope that is used to obtain the token."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 12649,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																3851,
																3852
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 12640,
															"character": 24
														}
													]
												}
											}
										},
										{
											"id": 3853,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function called when the token deletion completes. The token was revoked successfully if {@link runtime.lastError} is not set.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3854,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 12651,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 3855,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3827,
							"name": "getCreationTime",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 12591,
									"character": 35
								}
							],
							"signatures": [
								{
									"id": 3828,
									"name": "getCreationTime",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieves the time when the InstanceID has been generated. The creation time\nwill be returned by the <code>callback</code>."
									},
									"parameters": [
										{
											"id": 3829,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function called when the retrieval completes. It should check {@link runtime.lastError} for error when creationTime is zero."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3830,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 12592,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 3831,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 3832,
																	"name": "creationTime",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "The time when the Instance ID has been generated, represented in milliseconds since the epoch.\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3821,
							"name": "getID",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 12578,
									"character": 25
								}
							],
							"signatures": [
								{
									"id": 3822,
									"name": "getID",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieves an identifier for the app instance. The instance ID will be\nreturned by the <code>callback</code>. The same ID will be returned as long\nas the application identity has not been revoked or expired."
									},
									"parameters": [
										{
											"id": 3823,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function called when the retrieval completes. It should check {@link runtime.lastError} for error when instanceID is empty."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3824,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 12579,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 3825,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 3826,
																	"name": "instanceID",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "An Instance ID assigned to the app instance.\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3833,
							"name": "getToken",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 12605,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 3834,
									"name": "getToken",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Return a token that allows the authorized entity to access the service\ndefined by scope."
									},
									"parameters": [
										{
											"id": 3835,
											"name": "getTokenParams",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Parameters for getToken."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3836,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 3837,
															"name": "authorizedEntity",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "Identifies the entity that is authorized to access resources associated with\nthis Instance ID. It can be a project ID from <a\nhref='https://code.google.com/apis/console'>Google developer console</a>."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 12612,
																	"character": 24
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 3839,
															"name": "options",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Allows including a small number of string key/value pairs that will be\nassociated with the token and may be used in processing the request.",
																"tags": [
																	{
																		"tag": "deprecated",
																		"text": "options are deprecated and will be ignored.\n"
																	}
																]
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 12626,
																	"character": 15
																}
															],
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 3840,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 12626,
																			"character": 17
																		}
																	],
																	"indexSignature": {
																		"id": 3841,
																		"name": "__index",
																		"kind": 8192,
																		"kindString": "Index signature",
																		"flags": {},
																		"parameters": [
																			{
																				"id": 3842,
																				"name": "name",
																				"kind": 32768,
																				"flags": {},
																				"type": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			}
																		],
																		"type": {
																			"type": "intrinsic",
																			"name": "string"
																		}
																	}
																}
															}
														},
														{
															"id": 3838,
															"name": "scope",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "Identifies authorized actions that the authorized entity can take. E.g. for\nsending GCM messages, <code>GCM</code> scope should be used."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 12618,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																3837,
																3839,
																3838
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 12606,
															"character": 21
														}
													]
												}
											}
										},
										{
											"id": 3843,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function called when the retrieval completes. It should check {@link runtime.lastError} for error when token is empty."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3844,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 12628,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 3845,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 3846,
																	"name": "token",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "A token assigned by the requested service.\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								3861
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								3856,
								3847,
								3827,
								3821,
								3833
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 12569,
							"character": 29
						}
					]
				},
				{
					"id": 3864,
					"name": "lockScreen",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 3865,
							"name": "data",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"comment": {
								"shortText": "<p>\nThe API that can be used by an app to create and manage data on the\nChrome OS lock screen.\n</p>\n<p>\nThe API usability will depend on the\nuser session state:\n<ul>\n<li>\nWhen the user session is locked,\nthe API usage will only be allowed\nfrom the lock screen context.\n</li>\n<li>\nWhen the user session is not locked, the API usage\nwill only be\nallowed outside the lock screen context - i.e. from the\nregular app\ncontext.\n</li>\n</ul>\n</p>\n<p>\nNote that apps\nhave reduced access to Chrome apps APIs from the lock screen\ncontext.\n</p>",
								"tags": [
									{
										"tag": "chrome-namespace",
										"text": "lockScreen.data"
									},
									{
										"tag": "chrome-permission",
										"text": "lockScreen\n"
									}
								]
							},
							"children": [
								{
									"id": 3892,
									"name": "DataItemInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 3893,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The data item ID that can later be used to retrieve and update the associated\nlock screen data."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 12711,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												3893
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 12706,
											"character": 33
										}
									]
								},
								{
									"id": 3894,
									"name": "DataItemsAvailableEvent",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 3895,
											"name": "wasLocked",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "<p>Whether the event was dispatched as a result of the user session\ngetting unlocked.    </p> <p>For example:   <ul>     <li>If the app creates\nnew data items while shown on         the lock screen, when the user unlocks\nthe screen,         {@link onDataItemsAvailable} event will be dispatched\nwith this         property set to <code>true</code>.         </li>\n<li>When the user logs in, if not previously reported lock screen\ndata items are found, which could happen if the user session had         been\nclosed while it was locked, {@link onDataItemsAvailable} will         be\ndispatched with this property set to <code>false</code>.         </li>\n</ul> </p>"
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 12727,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												3895
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 12714,
											"character": 44
										}
									]
								},
								{
									"id": 3902,
									"name": "onDataItemsAvailable",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"comment": {
										"shortText": "Dispatched when new data items become available to main, non-lock screen app\ncontext - this event is not expected to be dispatched to the app in the lock\nscreen context."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 12801,
											"character": 37
										}
									],
									"type": {
										"type": "reference",
										"id": 2537,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 3903,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"comment": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 12801,
															"character": 59
														}
													],
													"signatures": [
														{
															"id": 3904,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"comment": {},
															"parameters": [
																{
																	"id": 3905,
																	"name": "event",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 3894,
																		"name": "DataItemsAvailableEvent"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										],
										"name": "chrome.events.Event"
									}
								},
								{
									"id": 3866,
									"name": "create",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 12736,
											"character": 26
										}
									],
									"signatures": [
										{
											"id": 3867,
											"name": "create",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Creates a new data item reference - available only in lock screen contexts."
											},
											"parameters": [
												{
													"id": 3868,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 3869,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 12737,
																	"character": 15
																}
															],
															"signatures": [
																{
																	"id": 3870,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 3871,
																			"name": "item",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "\n"
																			},
																			"type": {
																				"type": "reference",
																				"id": 3892,
																				"name": "DataItemInfo"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 3896,
									"name": "delete",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 12789,
											"character": 20
										}
									],
									"signatures": [
										{
											"id": 3897,
											"name": "delete",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Deletes a data item. The data item will not be available through this API\nanymore. |id| - Identifies the data item to delete."
											},
											"parameters": [
												{
													"id": 3898,
													"name": "id",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 3899,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "\n"
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 3900,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 12791,
																	"character": 16
																}
															],
															"signatures": [
																{
																	"id": 3901,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 3872,
									"name": "getAll",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 12748,
											"character": 26
										}
									],
									"signatures": [
										{
											"id": 3873,
											"name": "getAll",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Gets references to all data items available to the app."
											},
											"parameters": [
												{
													"id": 3874,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 3875,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 12749,
																	"character": 15
																}
															],
															"signatures": [
																{
																	"id": 3876,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 3877,
																			"name": "items",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "\n"
																			},
																			"type": {
																				"type": "array",
																				"elementType": {
																					"type": "reference",
																					"id": 3892,
																					"name": "DataItemInfo"
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 3878,
									"name": "getContent",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 12761,
											"character": 30
										}
									],
									"signatures": [
										{
											"id": 3879,
											"name": "getContent",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Retrieves content of the data item identified by |id|."
											},
											"parameters": [
												{
													"id": 3880,
													"name": "id",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 3881,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 3882,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 12763,
																	"character": 15
																}
															],
															"signatures": [
																{
																	"id": 3883,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 3884,
																			"name": "data",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "\n"
																			},
																			"type": {
																				"type": "reference",
																				"name": "ArrayBuffer"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 3885,
									"name": "setContent",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 12776,
											"character": 30
										}
									],
									"signatures": [
										{
											"id": 3886,
											"name": "setContent",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Sets contents of a data item. |id| - Identifies the target data item. |data|\n- The data item contents to set."
											},
											"parameters": [
												{
													"id": 3887,
													"name": "id",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 3888,
													"name": "data",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "reference",
														"name": "ArrayBuffer"
													}
												},
												{
													"id": 3889,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "\n"
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 3890,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 12779,
																	"character": 16
																}
															],
															"signatures": [
																{
																	"id": 3891,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										3892,
										3894
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										3902
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										3866,
										3896,
										3872,
										3878,
										3885
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 12705,
									"character": 34
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								3865
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 12705,
							"character": 29
						}
					]
				},
				{
					"id": 3968,
					"name": "login",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.login</code> API to launch and exit user sessions.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "login"
							},
							{
								"tag": "chrome-permission",
								"text": "login"
							},
							{
								"tag": "chrome-platform",
								"text": "chromeos\n"
							}
						]
					},
					"children": [
						{
							"id": 3975,
							"name": "exitCurrentSession",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13009,
									"character": 38
								}
							],
							"signatures": [
								{
									"id": 3976,
									"name": "exitCurrentSession",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Exits the current session."
									},
									"parameters": [
										{
											"id": 3977,
											"name": "dataForNextLoginAttempt",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "If set, stores data which can be read by <code>fetchDataForNextLoginAttempt()</code> from the login screen. If unset, any currently stored data will be cleared."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3978,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3979,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13011,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 3980,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3981,
							"name": "fetchDataForNextLoginAttempt",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13022,
									"character": 48
								}
							],
							"signatures": [
								{
									"id": 3982,
									"name": "fetchDataForNextLoginAttempt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Reads the <code>dataForNextLoginAttempt</code> set by\n<code>exitCurrentSession()</code>. Clears the previously stored data after\nreading so it can only be read once."
									},
									"parameters": [
										{
											"id": 3983,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Called with the stored data, or an empty string if there was no previously stored data."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3984,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13023,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 3985,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 3986,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3969,
							"name": "launchManagedGuestSession",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 12998,
									"character": 45
								}
							],
							"signatures": [
								{
									"id": 3970,
									"name": "launchManagedGuestSession",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Launches a managed guest session if one is set up via the admin console. If\nthere are several managed guest sessions set up, it will launch the first\navailable one."
									},
									"parameters": [
										{
											"id": 3971,
											"name": "password",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "If provided, the launched managed guest session will be lockable, and can only be unlocked by calling <code>unlockManagedGuestSession()</code> with the same password."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3972,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Note: If the function succeeds, the callback is not guaranteed to be called as the extension will be disabled when the session starts. Use this callback only to handle the failure case by checking {@link runtime.lastError}.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3973,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13000,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 3974,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3987,
							"name": "lockManagedGuestSession",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13034,
									"character": 43
								}
							],
							"signatures": [
								{
									"id": 3988,
									"name": "lockManagedGuestSession",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Locks the current managed guest session. The session has to have been\nlaunched by <code>launchManagedGuestSession()</code> with a password."
									},
									"parameters": [
										{
											"id": 3989,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3990,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13035,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 3991,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3992,
							"name": "unlockManagedGuestSession",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13046,
									"character": 45
								}
							],
							"signatures": [
								{
									"id": 3993,
									"name": "unlockManagedGuestSession",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Unlocks a managed guest session which was launched by\n<code>launchManagedGuestSession()</code> with a password. The session will\nunlock if the provided password matches the one provided earlier."
									},
									"parameters": [
										{
											"id": 3994,
											"name": "password",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The password which will be used to unlock the session."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3995,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Note: If the function succeeds, the callback is not guaranteed to be called as the extension will be disabled when the session starts. Use this callback only to handle the failure case by checking {@link runtime.lastError}.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3996,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13048,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 3997,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								3975,
								3981,
								3969,
								3987,
								3992
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 12989,
							"character": 24
						}
					]
				},
				{
					"id": 3906,
					"name": "loginScreenStorage",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.loginScreenStorage</code> API to store persistent data\nfrom the login screen or inject data into the session.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "loginScreenStorage"
							},
							{
								"tag": "chrome-permission",
								"text": "loginScreenStorage"
							},
							{
								"tag": "chrome-platform",
								"text": "chromeos\n"
							}
						]
					},
					"children": [
						{
							"id": 3928,
							"name": "retrieveCredentials",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 12875,
									"character": 39
								}
							],
							"signatures": [
								{
									"id": 3929,
									"name": "retrieveCredentials",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieves credentials that were previosly stored using {@link\nstoreCredentials}. The caller's extension ID should be the same as the\nextension id passed to the {@link storeCredentials}."
									},
									"parameters": [
										{
											"id": 3930,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3931,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 12876,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 3932,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 3933,
																	"name": "data",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3914,
							"name": "retrievePersistentData",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 12846,
									"character": 42
								}
							],
							"signatures": [
								{
									"id": 3915,
									"name": "retrievePersistentData",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieves persistent data that was previously stored using {@link\nstorePersistentData} for the caller's extension ID."
									},
									"parameters": [
										{
											"id": 3916,
											"name": "ownerId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "ID of the extension that saved the data that the caller is trying to retrieve."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3917,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3918,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 12848,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 3919,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 3920,
																	"name": "data",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3921,
							"name": "storeCredentials",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 12861,
									"character": 36
								}
							],
							"signatures": [
								{
									"id": 3922,
									"name": "storeCredentials",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Stores credentials for later access from the user session. This method will\nfail if called while a user session is active."
									},
									"parameters": [
										{
											"id": 3923,
											"name": "extensionId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "ID of the in-session extension that should have access to these credentials. Credentials stored using this method are deleted on session exit."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3924,
											"name": "credentials",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The credentials to store."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3925,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3926,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 12864,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 3927,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3907,
							"name": "storePersistentData",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 12832,
									"character": 39
								}
							],
							"signatures": [
								{
									"id": 3908,
									"name": "storePersistentData",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Stores persistent data from the login screen. This data can be accessed later\nusing {@link retrievePersistentData} by any extension from the specified\nextension ids. This method will fail if called while a user session is\nactive."
									},
									"parameters": [
										{
											"id": 3909,
											"name": "extensionIds",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "IDs of the extensions that should have access to the stored data."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 3910,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The data to store."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3911,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3912,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 12835,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 3913,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								3928,
								3914,
								3921,
								3907
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 12821,
							"character": 37
						}
					]
				},
				{
					"id": 3934,
					"name": "loginScreenUi",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.loginScreenUi</code> API to show and hide custom\nlogin\nUI.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "loginScreenUi"
							},
							{
								"tag": "chrome-permission",
								"text": "loginScreenUi"
							},
							{
								"tag": "chrome-platform",
								"text": "chromeos\n"
							}
						]
					},
					"children": [
						{
							"id": 3946,
							"name": "ShowOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 3947,
									"name": "url",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Relative url of the contents to show."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 12898,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 3948,
									"name": "userCanClose",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Whether the user can close the window, defaults to false."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 12903,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										3947,
										3948
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 12894,
									"character": 32
								}
							]
						},
						{
							"id": 3941,
							"name": "close",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 12922,
									"character": 25
								}
							],
							"signatures": [
								{
									"id": 3942,
									"name": "close",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Closes the login/lock screen UI window previously opened by this extension."
									},
									"parameters": [
										{
											"id": 3943,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Callback that does not take arguments.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3944,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 12923,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 3945,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3935,
							"name": "show",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 12912,
									"character": 24
								}
							],
							"signatures": [
								{
									"id": 3936,
									"name": "show",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Opens a window, which is visible on top of the login and lock screen."
									},
									"parameters": [
										{
											"id": 3937,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Options for the custom login UI window."
											},
											"type": {
												"type": "reference",
												"id": 3946,
												"name": "ShowOptions"
											}
										},
										{
											"id": 3938,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Callback that does not take arguments.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3939,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 12914,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 3940,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								3946
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								3941,
								3935
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 12893,
							"character": 32
						}
					]
				},
				{
					"id": 3949,
					"name": "loginState",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.loginState</code> API to read and monitor the login\nstate.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "loginState"
							},
							{
								"tag": "chrome-permission",
								"text": "loginState"
							},
							{
								"tag": "chrome-platform",
								"text": "chromeos\n"
							}
						]
					},
					"children": [
						{
							"id": 3962,
							"name": "ProfileType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 12938,
									"character": 27
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "SIGNIN_PROFILE"
									},
									{
										"type": "literal",
										"value": "USER_PROFILE"
									}
								]
							}
						},
						{
							"id": 3963,
							"name": "SessionState",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 12940,
									"character": 28
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "UNKNOWN"
									},
									{
										"type": "literal",
										"value": "IN_OOBE_SCREEN"
									},
									{
										"type": "literal",
										"value": "IN_LOGIN_SCREEN"
									},
									{
										"type": "literal",
										"value": "IN_SESSION"
									},
									{
										"type": "literal",
										"value": "IN_LOCK_SCREEN"
									}
								]
							}
						},
						{
							"id": 3964,
							"name": "onSessionStateChanged",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Dispatched when the session state changes. <code>sessionState</code> is the\nnew session state."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 12970,
									"character": 38
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 3965,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 12970,
													"character": 60
												}
											],
											"signatures": [
												{
													"id": 3966,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 3967,
															"name": "sessionState",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reference",
																"id": 3963,
																"name": "SessionState"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 3950,
							"name": "getProfileType",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 12948,
									"character": 34
								}
							],
							"signatures": [
								{
									"id": 3951,
									"name": "getProfileType",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the type of the profile the extension is in."
									},
									"parameters": [
										{
											"id": 3952,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3953,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 12949,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 3954,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 3955,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 3962,
																		"name": "ProfileType"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3956,
							"name": "getSessionState",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 12960,
									"character": 35
								}
							],
							"signatures": [
								{
									"id": 3957,
									"name": "getSessionState",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the current session state."
									},
									"parameters": [
										{
											"id": 3958,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3959,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 12961,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 3960,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 3961,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 3963,
																		"name": "SessionState"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								3962,
								3963
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								3964
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								3950,
								3956
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 12937,
							"character": 29
						}
					]
				},
				{
					"id": 3998,
					"name": "management",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "The <code>chrome.management</code> API provides ways to manage the list of\nextensions/apps that are installed and running. It is particularly useful for\nextensions that <a href='override'>override</a> the built-in New Tab page.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "management"
							},
							{
								"tag": "chrome-permission",
								"text": "management\n"
							}
						]
					},
					"children": [
						{
							"id": 4102,
							"name": "ExtensionInfo",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Information about an installed extension, app, or theme."
							},
							"children": [
								{
									"id": 4115,
									"name": "appLaunchUrl",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The launch url (only present for apps)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13177,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4125,
									"name": "availableLaunchTypes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The currently available launch types (only present for apps)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13231,
											"character": 26
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 4098,
											"name": "LaunchType"
										}
									}
								},
								{
									"id": 4106,
									"name": "description",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The description of this extension, app, or theme."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13128,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4112,
									"name": "disabledReason",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "A reason the item is disabled."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13160,
											"character": 20
										}
									],
									"type": {
										"type": "reference",
										"id": 4099,
										"name": "ExtensionDisabledReason"
									}
								},
								{
									"id": 4111,
									"name": "enabled",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Whether it is currently enabled or disabled."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13155,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 4116,
									"name": "homepageUrl",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The URL of the homepage of this extension, app, or theme."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13182,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4122,
									"name": "hostPermissions",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Returns a list of host based permissions."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13216,
											"character": 21
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 4120,
									"name": "icons",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "A list of icon information. Note that this just reflects what was declared in\nthe manifest, and the actual image at that url may be larger or smaller than\nwhat was declared, so you might consider using explicit width and height\nattributes on img tags referencing these images. See the <a\nhref='manifest/icons'>manifest documentation on icons</a> for more details."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13206,
											"character": 11
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 4095,
											"name": "IconInfo"
										}
									}
								},
								{
									"id": 4103,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The extension's unique identifier."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13113,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4123,
									"name": "installType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "How the extension was installed."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13221,
											"character": 17
										}
									],
									"type": {
										"type": "reference",
										"id": 4101,
										"name": "ExtensionInstallType"
									}
								},
								{
									"id": 4113,
									"name": "isApp",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "True if this is an app.",
										"tags": [
											{
												"tag": "deprecated",
												"text": "Please use {@link management.ExtensionInfo.type}.\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13167,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 4124,
									"name": "launchType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The app launch type (only present for apps)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13226,
											"character": 16
										}
									],
									"type": {
										"type": "reference",
										"id": 4098,
										"name": "LaunchType"
									}
								},
								{
									"id": 4109,
									"name": "mayDisable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Whether this extension can be disabled or uninstalled by the user."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13144,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 4110,
									"name": "mayEnable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Whether this extension can be enabled by the user. This is only returned for\nextensions which are not enabled."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13150,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 4104,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The name of this extension, app, or theme."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13118,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4118,
									"name": "offlineEnabled",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Whether the extension, app, or theme declares that it supports offline."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13192,
											"character": 20
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 4119,
									"name": "optionsUrl",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The url for the item's options page, if it has one."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13197,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4121,
									"name": "permissions",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Returns a list of API based permissions."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13211,
											"character": 17
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 4105,
									"name": "shortName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "A short version of the name of this extension, app, or theme."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13123,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4114,
									"name": "type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The type of this extension, app, or theme."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13172,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 4100,
										"name": "ExtensionType"
									}
								},
								{
									"id": 4117,
									"name": "updateUrl",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The update URL of this extension, app, or theme."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13187,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4107,
									"name": "version",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The <a href='manifest/version'>version</a> of this extension, app, or theme."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13133,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4108,
									"name": "versionName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The <a href='manifest/version#version_name'>version name</a> of this\nextension, app, or theme if the manifest specified one."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13139,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4115,
										4125,
										4106,
										4112,
										4111,
										4116,
										4122,
										4120,
										4103,
										4123,
										4113,
										4124,
										4109,
										4110,
										4104,
										4118,
										4119,
										4121,
										4105,
										4114,
										4117,
										4107,
										4108
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13109,
									"character": 34
								}
							]
						},
						{
							"id": 4095,
							"name": "IconInfo",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Information about an icon belonging to an extension, app, or theme."
							},
							"children": [
								{
									"id": 4096,
									"name": "size",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "A number representing the width and height of the icon. Likely values include\n(but are not limited to) 128, 48, 24, and 16."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13071,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4097,
									"name": "url",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The URL for this icon image. To display a grayscale version of the icon (to\nindicate that an extension is disabled, for example), append\n<code>?grayscale=true</code> to the URL."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13078,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4096,
										4097
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13066,
									"character": 29
								}
							]
						},
						{
							"id": 4126,
							"name": "UninstallOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Information about an icon belonging to an extension, app, or theme."
							},
							"children": [
								{
									"id": 4127,
									"name": "showConfirmDialog",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Whether or not a confirm-uninstall dialog should prompt the user. Defaults to\nfalse for self uninstalls. If an extension uninstalls another extension, this\nparameter is ignored and the dialog is always shown."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13243,
											"character": 23
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4127
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13237,
									"character": 37
								}
							]
						},
						{
							"id": 4099,
							"name": "ExtensionDisabledReason",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "A reason the item is disabled."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13089,
									"character": 39
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "unknown"
									},
									{
										"type": "literal",
										"value": "permissions_increase"
									}
								]
							}
						},
						{
							"id": 4101,
							"name": "ExtensionInstallType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "How the extension was installed. One of<br><var>admin</var>: The extension\nwas installed because of an administrative policy,<br><var>development</var>:\nThe extension was loaded unpacked in developer mode,<br><var>normal</var>:\nThe extension was installed normally via a .crx file,<br><var>sideload</var>:\nThe extension was installed by other software on the\nmachine,<br><var>other</var>: The extension was installed by other means."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13104,
									"character": 36
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "admin"
									},
									{
										"type": "literal",
										"value": "development"
									},
									{
										"type": "literal",
										"value": "normal"
									},
									{
										"type": "literal",
										"value": "sideload"
									},
									{
										"type": "literal",
										"value": "other"
									}
								]
							}
						},
						{
							"id": 4100,
							"name": "ExtensionType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The type of this extension, app, or theme."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13094,
									"character": 29
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "extension"
									},
									{
										"type": "literal",
										"value": "hosted_app"
									},
									{
										"type": "literal",
										"value": "packaged_app"
									},
									{
										"type": "literal",
										"value": "legacy_packaged_app"
									},
									{
										"type": "literal",
										"value": "theme"
									},
									{
										"type": "literal",
										"value": "login_screen_extension"
									}
								]
							}
						},
						{
							"id": 4098,
							"name": "LaunchType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "These are all possible app launch types."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13084,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "OPEN_AS_REGULAR_TAB"
									},
									{
										"type": "literal",
										"value": "OPEN_AS_PINNED_TAB"
									},
									{
										"type": "literal",
										"value": "OPEN_AS_WINDOW"
									},
									{
										"type": "literal",
										"value": "OPEN_FULL_SCREEN"
									}
								]
							}
						},
						{
							"id": 4140,
							"name": "onDisabled",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when an app or extension has been disabled."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13485,
									"character": 27
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4141,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 13485,
													"character": 49
												}
											],
											"signatures": [
												{
													"id": 4142,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 4143,
															"name": "info",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reference",
																"id": 4102,
																"name": "ExtensionInfo"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4136,
							"name": "onEnabled",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when an app or extension has been enabled."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13473,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4137,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 13473,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 4138,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 4139,
															"name": "info",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reference",
																"id": 4102,
																"name": "ExtensionInfo"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4128,
							"name": "onInstalled",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when an app or extension has been installed."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13449,
									"character": 28
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4129,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 13449,
													"character": 50
												}
											],
											"signatures": [
												{
													"id": 4130,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 4131,
															"name": "info",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reference",
																"id": 4102,
																"name": "ExtensionInfo"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4132,
							"name": "onUninstalled",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when an app or extension has been uninstalled."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13461,
									"character": 30
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4133,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 13461,
													"character": 52
												}
											],
											"signatures": [
												{
													"id": 4134,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 4135,
															"name": "id",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "The id of the extension, app, or theme that was uninstalled.\n"
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4079,
							"name": "canInstallReplacementAndroidApp",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13419,
									"character": 51
								}
							],
							"signatures": [
								{
									"id": 4080,
									"name": "canInstallReplacementAndroidApp",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Checks if the replacement android app can be installed. Errors generated by\nthis API are reported by setting {@link runtime.lastError} and executing the\nfunction's regular callback."
									},
									"parameters": [
										{
											"id": 4081,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4082,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13420,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 4083,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4084,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "boolean"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4058,
							"name": "createAppShortcut",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13377,
									"character": 37
								}
							],
							"signatures": [
								{
									"id": 4059,
									"name": "createAppShortcut",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Display options to create shortcuts for an app. On Mac, only packaged app\nshortcuts can be created."
									},
									"parameters": [
										{
											"id": 4060,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "This should be the id from an app item of {@link management.ExtensionInfo}."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 4061,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4062,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13379,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 4063,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4071,
							"name": "generateAppForLink",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13403,
									"character": 38
								}
							],
							"signatures": [
								{
									"id": 4072,
									"name": "generateAppForLink",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate an app for a URL. Returns the generated bookmark app."
									},
									"parameters": [
										{
											"id": 4073,
											"name": "url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The URL of a web page. The scheme of the URL can only be \"http\" or \"https\"."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 4074,
											"name": "title",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The title of the generated app."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 4075,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4076,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13406,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 4077,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4078,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 4102,
																		"name": "ExtensionInfo"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4005,
							"name": "get",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13266,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 4006,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns information about the installed extension, app, or theme that has the\ngiven ID."
									},
									"parameters": [
										{
											"id": 4007,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ID from an item of {@link management.ExtensionInfo}."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 4008,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4009,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13268,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 4010,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4011,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 4102,
																		"name": "ExtensionInfo"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 3999,
							"name": "getAll",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13252,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 4000,
									"name": "getAll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a list of information about installed extensions and apps."
									},
									"parameters": [
										{
											"id": 4001,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4002,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13253,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 4003,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4004,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 4102,
																			"name": "ExtensionInfo"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4018,
							"name": "getPermissionWarningsById",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13295,
									"character": 45
								}
							],
							"signatures": [
								{
									"id": 4019,
									"name": "getPermissionWarningsById",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a list of <a href='permission_warnings'>permission warnings</a> for\nthe given extension id."
									},
									"parameters": [
										{
											"id": 4020,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ID of an already installed extension."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 4021,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4022,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13297,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 4023,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4024,
																	"name": "permissionWarnings",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "string"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4025,
							"name": "getPermissionWarningsByManifest",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13311,
									"character": 51
								}
							],
							"signatures": [
								{
									"id": 4026,
									"name": "getPermissionWarningsByManifest",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a list of <a href='permission_warnings'>permission warnings</a> for\nthe given extension manifest string. Note: This function can be used without\nrequesting the 'management' permission in the manifest."
									},
									"parameters": [
										{
											"id": 4027,
											"name": "manifestStr",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Extension manifest JSON string."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 4028,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4029,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13313,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 4030,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4031,
																	"name": "permissionWarnings",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "string"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4012,
							"name": "getSelf",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13281,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 4013,
									"name": "getSelf",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns information about the calling extension, app, or theme. Note: This\nfunction can be used without requesting the 'management' permission in the\nmanifest."
									},
									"parameters": [
										{
											"id": 4014,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4015,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13282,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 4016,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4017,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 4102,
																		"name": "ExtensionInfo"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4085,
							"name": "installReplacementAndroidApp",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13432,
									"character": 48
								}
							],
							"signatures": [
								{
									"id": 4086,
									"name": "installReplacementAndroidApp",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Prompts the user to install the replacement Android app from the manifest.\nErrors generated by this API are reported by setting {@link\nruntime.lastError} and executing the function's regular callback."
									},
									"parameters": [
										{
											"id": 4087,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4088,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13433,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 4089,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4090,
							"name": "installReplacementWebApp",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13442,
									"character": 44
								}
							],
							"signatures": [
								{
									"id": 4091,
									"name": "installReplacementWebApp",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Launches the replacement_web_app specified in the manifest. Prompts the user\nto install if not already installed."
									},
									"parameters": [
										{
											"id": 4092,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4093,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13443,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 4094,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4052,
							"name": "launchApp",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13365,
									"character": 29
								}
							],
							"signatures": [
								{
									"id": 4053,
									"name": "launchApp",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Launches an application."
									},
									"parameters": [
										{
											"id": 4054,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The extension id of the application."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 4055,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4056,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13367,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 4057,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4032,
							"name": "setEnabled",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13328,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 4033,
									"name": "setEnabled",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Enables or disables an app or extension. In most cases this function must be\ncalled in the context of a user gesture (e.g. an onclick handler for a\nbutton), and may present the user with a native confirmation UI as a way of\npreventing abuse."
									},
									"parameters": [
										{
											"id": 4034,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "This should be the id from an item of {@link management.ExtensionInfo}."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 4035,
											"name": "enabled",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Whether this item should be enabled or disabled."
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 4036,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4037,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13331,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 4038,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4064,
							"name": "setLaunchType",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13389,
									"character": 33
								}
							],
							"signatures": [
								{
									"id": 4065,
									"name": "setLaunchType",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Set the launch type of an app."
									},
									"parameters": [
										{
											"id": 4066,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "This should be the id from an app item of {@link management.ExtensionInfo}."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 4067,
											"name": "launchType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The target launch type. Always check and make sure this launch type is in {@link ExtensionInfo.availableLaunchTypes}, because the available launch types vary on different platforms and configurations."
											},
											"type": {
												"type": "reference",
												"id": 4098,
												"name": "LaunchType"
											}
										},
										{
											"id": 4068,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4069,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13392,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 4070,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4039,
							"name": "uninstall",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13341,
									"character": 29
								}
							],
							"signatures": [
								{
									"id": 4040,
									"name": "uninstall",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Uninstalls a currently installed app or extension."
									},
									"parameters": [
										{
											"id": 4041,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "This should be the id from an item of {@link management.ExtensionInfo}."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 4042,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 4126,
												"name": "UninstallOptions"
											}
										},
										{
											"id": 4043,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4044,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13344,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 4045,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4046,
							"name": "uninstallSelf",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13354,
									"character": 33
								}
							],
							"signatures": [
								{
									"id": 4047,
									"name": "uninstallSelf",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Uninstalls the calling extension. Note: This function can be used without\nrequesting the 'management' permission in the manifest."
									},
									"parameters": [
										{
											"id": 4048,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 4126,
												"name": "UninstallOptions"
											}
										},
										{
											"id": 4049,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4050,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13356,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 4051,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								4102,
								4095,
								4126
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								4099,
								4101,
								4100,
								4098
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								4140,
								4136,
								4128,
								4132
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								4079,
								4058,
								4071,
								4005,
								3999,
								4018,
								4025,
								4012,
								4085,
								4090,
								4052,
								4032,
								4064,
								4039,
								4046
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 13062,
							"character": 29
						}
					]
				},
				{
					"id": 4144,
					"name": "manifestTypes",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Schemas for structured manifest entries",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "manifestTypes\n"
							}
						]
					},
					"children": [
						{
							"id": 4145,
							"name": "ChromeSettingsOverrides",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Chrome settings which can be overriden by an extension."
							},
							"children": [
								{
									"id": 4146,
									"name": "homepage",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "New value for the homepage."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13510,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4147,
									"name": "search_provider",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "A search engine"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13515,
											"character": 21
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 4148,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 4159,
													"name": "alternate_urls",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "A list of URL patterns that can be used, in addition to |search_url|."
													},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13573,
															"character": 22
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												},
												{
													"id": 4153,
													"name": "encoding",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Encoding of the search term. This may only be omitted if\n<em>prepopulated_id</em> is set."
													},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13543,
															"character": 16
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 4151,
													"name": "favicon_url",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "An icon URL for the search engine. This may only be omitted if\n<em>prepopulated_id</em> is set."
													},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13532,
															"character": 19
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 4155,
													"name": "image_url",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "If omitted, this engine does not support image search."
													},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13553,
															"character": 17
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 4158,
													"name": "image_url_post_params",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "The string of post parameters to image_url"
													},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13568,
															"character": 29
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 4161,
													"name": "is_default",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"shortText": "Specifies if the search provider should be default."
													},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13583,
															"character": 18
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 4150,
													"name": "keyword",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Omnibox keyword for the search engine. This may only be omitted if\n<em>prepopulated_id</em> is set."
													},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13526,
															"character": 15
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 4149,
													"name": "name",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Name of the search engine displayed to user. This may only be omitted if\n<em>prepopulated_id</em> is set."
													},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13520,
															"character": 12
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 4160,
													"name": "prepopulated_id",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "An ID of the built-in search engine in Chrome."
													},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13578,
															"character": 23
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 4152,
													"name": "search_url",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"shortText": "An search URL used by the search engine."
													},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13537,
															"character": 18
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 4156,
													"name": "search_url_post_params",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "The string of post parameters to search_url"
													},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13558,
															"character": 30
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 4154,
													"name": "suggest_url",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "If omitted, this engine does not support suggestions."
													},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13548,
															"character": 19
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 4157,
													"name": "suggest_url_post_params",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "The string of post parameters to suggest_url"
													},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13563,
															"character": 31
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														4159,
														4153,
														4151,
														4155,
														4158,
														4161,
														4150,
														4149,
														4160,
														4152,
														4156,
														4154,
														4157
													]
												}
											]
										}
									}
								},
								{
									"id": 4162,
									"name": "startup_pages",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "An array of length one containing a URL to be used as the startup page."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13589,
											"character": 19
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4146,
										4147,
										4162
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13506,
									"character": 44
								}
							]
						},
						{
							"id": 4164,
							"name": "FileSystemProviderCapabilities",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Represents capabilities of a providing extension."
							},
							"children": [
								{
									"id": 4165,
									"name": "configurable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Whether configuring via <code>onConfigureRequested</code> is supported. By\ndefault: <code>false</code>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13609,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 4166,
									"name": "multiple_mounts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Whether multiple (more than one) mounted file systems are supported. By\ndefault: <code>false</code>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13615,
											"character": 21
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 4168,
									"name": "source",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Source of data for mounted file systems."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13626,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 4163,
										"name": "FileSystemProviderSource"
									}
								},
								{
									"id": 4167,
									"name": "watchable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Whether setting watchers and notifying about changes is supported. By\ndefault: <code>false</code>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13621,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4165,
										4166,
										4168,
										4167
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13604,
									"character": 51
								}
							]
						},
						{
							"id": 4163,
							"name": "FileSystemProviderSource",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "For <code>\"file\"</code> the source is a file passed via\n<code>onLaunched</code> event. For <code>\"device\"</code> contents are fetched\nfrom an external device (eg. plugged via USB), without using\n<code>file_handlers</code>. Finally, for <code>\"network\"</code> source,\ncontents should be fetched via network."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13599,
									"character": 40
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "file"
									},
									{
										"type": "literal",
										"value": "device"
									},
									{
										"type": "literal",
										"value": "network"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								4145,
								4164
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								4163
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 13502,
							"character": 32
						}
					]
				},
				{
					"id": 4169,
					"name": "notifications",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.notifications</code> API to create rich notifications\nusing templates and show these notifications to users in the system tray.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "notifications"
							},
							{
								"tag": "chrome-permission",
								"text": "notifications\n"
							}
						]
					},
					"children": [
						{
							"id": 4219,
							"name": "NotificationButton",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 4221,
									"name": "iconUrl",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"tags": [
											{
												"tag": "deprecated",
												"text": "Button icons not visible for Mac OS X users.\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13662,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4220,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13657,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4221,
										4220
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13656,
									"character": 39
								}
							]
						},
						{
							"id": 4216,
							"name": "NotificationItem",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 4218,
									"name": "message",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Additional details about this item."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13653,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4217,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Title of one item of a list notification."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13648,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4218,
										4217
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13644,
									"character": 37
								}
							]
						},
						{
							"id": 4222,
							"name": "NotificationOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 4225,
									"name": "appIconMaskUrl",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "<p>A URL to the app icon mask. URLs have the same restrictions as {@link\nnotifications.NotificationOptions.iconUrl iconUrl}.</p><p>The app icon mask\nshould be in alpha channel, as only the alpha channel of the image will be\nconsidered.</p>",
										"tags": [
											{
												"tag": "deprecated",
												"text": "The app icon mask is not visible for Mac OS X users.\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13688,
											"character": 20
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4231,
									"name": "buttons",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Text and icons for up to two notification action buttons."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13724,
											"character": 13
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 4219,
											"name": "NotificationButton"
										}
									}
								},
								{
									"id": 4228,
									"name": "contextMessage",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Alternate notification content with a lower-weight font."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13705,
											"character": 20
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4230,
									"name": "eventTime",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "A timestamp associated with the notification, in milliseconds past the epoch\n(e.g. <code>Date.now() + n</code>)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13719,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4224,
									"name": "iconUrl",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "<p>A URL to the sender's avatar, app icon, or a thumbnail for image\nnotifications.</p><p>URLs can be a data URL, a blob URL, or a URL relative to\na resource within this extension's .crx file <em>Required for {@link\nnotifications.create}</em> method.</p>"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13678,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4232,
									"name": "imageUrl",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "A URL to the image thumbnail for image-type notifications. URLs have the same\nrestrictions as {@link notifications.NotificationOptions.iconUrl iconUrl}.",
										"tags": [
											{
												"tag": "deprecated",
												"text": "The image is not visible for Mac OS X users.\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13732,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4235,
									"name": "isClickable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"tags": [
											{
												"tag": "deprecated",
												"text": "This UI hint is ignored as of Chrome 67\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13748,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 4233,
									"name": "items",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Items for multi-item notifications. Users on Mac OS X only see the first\nitem."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13738,
											"character": 11
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 4216,
											"name": "NotificationItem"
										}
									}
								},
								{
									"id": 4227,
									"name": "message",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Main notification content. <em>Required for {@link notifications.create}</em>\nmethod."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13700,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4229,
									"name": "priority",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Priority ranges from -2 to 2. -2 is lowest priority. 2 is highest. Zero is\ndefault.  On platforms that don't support a notification center (Windows,\nLinux & Mac), -2 and -1 result in an error as notifications with those\npriorities will not be shown at all."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13713,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4234,
									"name": "progress",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Current progress ranges from 0 to 100."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13743,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4236,
									"name": "requireInteraction",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Indicates that the notification should remain visible on screen until the\nuser activates or dismisses the notification. This defaults to false."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13754,
											"character": 24
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 4237,
									"name": "silent",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Indicates that no sounds or vibrations should be made when the notification\nis being shown. This defaults to false."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13760,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 4226,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Title of the notification (e.g. sender name for email). <em>Required for\n{@link notifications.create}</em> method."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13694,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4223,
									"name": "type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Which type of notification to display. <em>Required for {@link\nnotifications.create}</em> method."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13670,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 4214,
										"name": "TemplateType"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4225,
										4231,
										4228,
										4230,
										4224,
										4232,
										4235,
										4233,
										4227,
										4229,
										4234,
										4236,
										4237,
										4226,
										4223
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13665,
									"character": 40
								}
							]
						},
						{
							"id": 4215,
							"name": "PermissionLevel",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13642,
									"character": 31
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "granted"
									},
									{
										"type": "literal",
										"value": "denied"
									}
								]
							}
						},
						{
							"id": 4214,
							"name": "TemplateType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13640,
									"character": 28
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "basic"
									},
									{
										"type": "literal",
										"value": "image"
									},
									{
										"type": "literal",
										"value": "list"
									},
									{
										"type": "literal",
										"value": "progress"
									}
								]
							}
						},
						{
							"id": 4247,
							"name": "onButtonClicked",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "The user pressed a button in the notification."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13877,
									"character": 32
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4248,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 13877,
													"character": 54
												}
											],
											"signatures": [
												{
													"id": 4249,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 4250,
															"name": "notificationId",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 4251,
															"name": "buttonIndex",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4243,
							"name": "onClicked",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "The user clicked in a non-button area of the notification."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13865,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4244,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 13865,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 4245,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 4246,
															"name": "notificationId",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4238,
							"name": "onClosed",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "The notification closed, either by the system or by user action."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13851,
									"character": 25
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4239,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 13851,
													"character": 47
												}
											],
											"signatures": [
												{
													"id": 4240,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 4241,
															"name": "notificationId",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 4242,
															"name": "byUser",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4252,
							"name": "onPermissionLevelChanged",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "The user changes the permission level.  As of Chrome 47, only ChromeOS has UI\nthat dispatches this event."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13892,
									"character": 41
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4253,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 13892,
													"character": 63
												}
											],
											"signatures": [
												{
													"id": 4254,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 4255,
															"name": "level",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reference",
																"id": 4215,
																"name": "PermissionLevel"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4256,
							"name": "onShowSettings",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "The user clicked on a link for the app's notification settings.  As of Chrome\n47, only ChromeOS has UI that dispatches this event. As of Chrome 65, that UI\nhas been removed from ChromeOS, too.",
								"tags": [
									{
										"tag": "deprecated",
										"text": "Custom notification settings button is no longer supported.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13908,
									"character": 31
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4257,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 13908,
													"character": 53
												}
											],
											"signatures": [
												{
													"id": 4258,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4192,
							"name": "clear",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13816,
									"character": 25
								}
							],
							"signatures": [
								{
									"id": 4193,
									"name": "clear",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clears the specified notification."
									},
									"parameters": [
										{
											"id": 4194,
											"name": "notificationId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The id of the notification to be cleared. This is returned by {@link notifications.create} method."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 4195,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "<p>Called to indicate whether a matching notification existed.</p><p>The callback is required before Chrome 42.</p>"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4196,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13818,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 4197,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4198,
																	"name": "wasCleared",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "boolean"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4170,
							"name": "create",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13771,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 4171,
									"name": "create",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates and displays a notification."
									},
									"parameters": [
										{
											"id": 4172,
											"name": "notificationId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "<p>Identifier of the notification. If not set or empty, an ID will automatically be generated. If it matches an existing notification, this method first clears that notification before proceeding with the create operation. The identifier may not be longer than 500 characters.</p><p>The <code>notificationId</code> parameter is required before Chrome 42.</p>"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 4173,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Contents of the notification."
											},
											"type": {
												"type": "reference",
												"id": 4222,
												"name": "NotificationOptions"
											}
										},
										{
											"id": 4174,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "<p>Returns the notification id (either supplied or generated) that represents the created notification.</p><p>The callback is required before Chrome 42.</p>"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4175,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13774,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 4176,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4177,
																	"name": "notificationId",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								},
								{
									"id": 4178,
									"name": "create",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates and displays a notification."
									},
									"parameters": [
										{
											"id": 4179,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Contents of the notification."
											},
											"type": {
												"type": "reference",
												"id": 4222,
												"name": "NotificationOptions"
											}
										},
										{
											"id": 4180,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "<p>Returns the notification id (either supplied or generated) that represents the created notification.</p><p>The callback is required before Chrome 42.</p>"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4181,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13788,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 4182,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4183,
																	"name": "notificationId",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4199,
							"name": "getAll",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13829,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 4200,
									"name": "getAll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieves all the notifications of this app or extension."
									},
									"parameters": [
										{
											"id": 4201,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Returns the set of notification_ids currently in the system."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4202,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13830,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 4203,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4204,
																	"name": "notifications",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 4205,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 13831,
																					"character": 22
																				}
																			],
																			"indexSignature": {
																				"id": 4206,
																				"name": "__index",
																				"kind": 8192,
																				"kindString": "Index signature",
																				"flags": {},
																				"parameters": [
																					{
																						"id": 4207,
																						"name": "name",
																						"kind": 32768,
																						"flags": {},
																						"type": {
																							"type": "intrinsic",
																							"name": "string"
																						}
																					}
																				],
																				"type": {
																					"type": "intrinsic",
																					"name": "any"
																				}
																			}
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4208,
							"name": "getPermissionLevel",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13842,
									"character": 38
								}
							],
							"signatures": [
								{
									"id": 4209,
									"name": "getPermissionLevel",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieves whether the user has enabled notifications from this app or\nextension."
									},
									"parameters": [
										{
											"id": 4210,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Returns the current permission level."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4211,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13843,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 4212,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4213,
																	"name": "level",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 4215,
																		"name": "PermissionLevel"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4184,
							"name": "update",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13801,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 4185,
									"name": "update",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Updates an existing notification."
									},
									"parameters": [
										{
											"id": 4186,
											"name": "notificationId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The id of the notification to be updated. This is returned by {@link notifications.create} method."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 4187,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Contents of the notification to update to."
											},
											"type": {
												"type": "reference",
												"id": 4222,
												"name": "NotificationOptions"
											}
										},
										{
											"id": 4188,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "<p>Called to indicate whether a matching notification existed.</p><p>The callback is required before Chrome 42.</p>"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4189,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 13804,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 4190,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4191,
																	"name": "wasUpdated",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "boolean"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								4219,
								4216,
								4222
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								4215,
								4214
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								4247,
								4243,
								4238,
								4252,
								4256
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								4192,
								4170,
								4199,
								4208,
								4184
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 13639,
							"character": 32
						}
					]
				},
				{
					"id": 4259,
					"name": "omnibox",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "The omnibox API allows you to register a keyword with Google Chrome's address\nbar, which is also known as the omnibox.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "omnibox\n"
							}
						]
					},
					"children": [
						{
							"id": 4269,
							"name": "DefaultSuggestResult",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "A suggest result."
							},
							"children": [
								{
									"id": 4270,
									"name": "description",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The text that is displayed in the URL dropdown. Can contain XML-style markup\nfor styling. The supported tags are 'url' (for a literal URL), 'match' (for\nhighlighting text that matched what the user's query), and 'dim' (for dim\nhelper text). The styles can be nested, eg. <dim><match>dimmed\nmatch</match></dim>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13972,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4270
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13964,
									"character": 41
								}
							]
						},
						{
							"id": 4265,
							"name": "SuggestResult",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "A suggest result."
							},
							"children": [
								{
									"id": 4266,
									"name": "content",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The text that is put into the URL bar, and that is sent to the extension when\nthe user chooses this entry."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13943,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4268,
									"name": "deletable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Whether the suggest result can be deleted by the user."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13958,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 4267,
									"name": "description",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The text that is displayed in the URL dropdown. Can contain XML-style markup\nfor styling. The supported tags are 'url' (for a literal URL), 'match' (for\nhighlighting text that matched what the user's query), and 'dim' (for dim\nhelper text). The styles can be nested, eg. <dim><match>dimmed\nmatch</match></dim>. You must escape the five predefined entities to display\nthem as text: stackoverflow.com/a/1091953/89484"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 13953,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4266,
										4268,
										4267
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13938,
									"character": 34
								}
							]
						},
						{
							"id": 4263,
							"name": "DescriptionStyleType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The style type."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13925,
									"character": 36
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "url"
									},
									{
										"type": "literal",
										"value": "match"
									},
									{
										"type": "literal",
										"value": "dim"
									}
								]
							}
						},
						{
							"id": 4264,
							"name": "OnInputEnteredDisposition",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The window disposition for the omnibox query. This is the recommended context\nto display results. For example, if the omnibox command is to navigate to a\ncertain URL, a disposition of 'newForegroundTab' means the navigation should\ntake place in a new selected tab."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13933,
									"character": 41
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "currentTab"
									},
									{
										"type": "literal",
										"value": "newForegroundTab"
									},
									{
										"type": "literal",
										"value": "newBackgroundTab"
									}
								]
							}
						},
						{
							"id": 4290,
							"name": "onDeleteSuggestion",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "User has deleted a suggested result."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14034,
									"character": 35
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4291,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 14034,
													"character": 57
												}
											],
											"signatures": [
												{
													"id": 4292,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 4293,
															"name": "text",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Text of the deleted suggestion.\n"
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4287,
							"name": "onInputCancelled",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "User has ended the keyword input session without accepting the input."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14027,
									"character": 33
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4288,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 14027,
													"character": 55
												}
											],
											"signatures": [
												{
													"id": 4289,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4274,
							"name": "onInputChanged",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "User has changed what is typed into the omnibox."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13998,
									"character": 31
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4275,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 13998,
													"character": 53
												}
											],
											"signatures": [
												{
													"id": 4276,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 4277,
															"name": "text",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 4278,
															"name": "suggest",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 4279,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 14004,
																			"character": 16
																		}
																	],
																	"signatures": [
																		{
																			"id": 4280,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 4281,
																					"name": "suggestResults",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "array",
																						"elementType": {
																							"type": "reference",
																							"id": 4265,
																							"name": "SuggestResult"
																						}
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4282,
							"name": "onInputEntered",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "User has accepted what is typed into the omnibox."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14013,
									"character": 31
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4283,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 14013,
													"character": 53
												}
											],
											"signatures": [
												{
													"id": 4284,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 4285,
															"name": "text",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 4286,
															"name": "disposition",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reference",
																"id": 4264,
																"name": "OnInputEnteredDisposition"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4271,
							"name": "onInputStarted",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "User has started a keyword input session by typing the extension's keyword.\nThis is guaranteed to be sent exactly once per input session, and before any\nonInputChanged events."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13991,
									"character": 31
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4272,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 13991,
													"character": 53
												}
											],
											"signatures": [
												{
													"id": 4273,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4260,
							"name": "setDefaultSuggestion",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 13982,
									"character": 40
								}
							],
							"signatures": [
								{
									"id": 4261,
									"name": "setDefaultSuggestion",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the description and styling for the default suggestion. The default\nsuggestion is the text that is displayed in the first suggestion row\nunderneath the URL bar."
									},
									"parameters": [
										{
											"id": 4262,
											"name": "suggestion",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A partial SuggestResult object, without the 'content' parameter.\n"
											},
											"type": {
												"type": "reference",
												"id": 4269,
												"name": "DefaultSuggestResult"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								4269,
								4265
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								4263,
								4264
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								4290,
								4287,
								4274,
								4282,
								4271
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								4260
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 13921,
							"character": 26
						}
					]
				},
				{
					"id": 4294,
					"name": "pageAction",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.pageAction</code> API to put icons in the main Google\nChrome toolbar, to the right of the address bar. Page actions represent\nactions that can be taken on the current page, but that aren't applicable to\nall pages. Page actions appear grayed out when inactive.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "pageAction\n"
							}
						]
					},
					"children": [
						{
							"id": 4357,
							"name": "TabDetails",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 4358,
									"name": "tabId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The ID of the tab to query state for. If no tab is specified, the\nnon-tab-specific state is returned."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14066,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4358
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14061,
									"character": 31
								}
							]
						},
						{
							"id": 4356,
							"name": "ImageDataType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "Pixel data for an image. Must be an ImageData object (for example, from a\n<code>canvas</code> element)."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14059,
									"character": 29
								}
							],
							"type": {
								"type": "reference",
								"name": "ImageData"
							}
						},
						{
							"id": 4359,
							"name": "onClicked",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a page action icon is clicked.  This event will not fire if the\npage action has a popup."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14216,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4360,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 14216,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 4361,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 4362,
															"name": "tab",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reference",
																"id": 5892,
																"name": "tabs.Tab"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4349,
							"name": "getPopup",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14205,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 4350,
									"name": "getPopup",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the html document set as the popup for this page action."
									},
									"parameters": [
										{
											"id": 4351,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 4357,
												"name": "TabDetails"
											}
										},
										{
											"id": 4352,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4353,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 14207,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 4354,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4355,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4316,
							"name": "getTitle",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14121,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 4317,
									"name": "getTitle",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the title of the page action."
									},
									"parameters": [
										{
											"id": 4318,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 4357,
												"name": "TabDetails"
											}
										},
										{
											"id": 4319,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4320,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 14123,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 4321,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4322,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4301,
							"name": "hide",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14087,
									"character": 24
								}
							],
							"signatures": [
								{
									"id": 4302,
									"name": "hide",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Hides the page action. Hidden page actions still appear in the Chrome\ntoolbar, but are grayed out."
									},
									"parameters": [
										{
											"id": 4303,
											"name": "tabId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The id of the tab for which you want to modify the page action."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 4304,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4305,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 14089,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 4306,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4323,
							"name": "setIcon",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14137,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 4324,
									"name": "setIcon",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the icon for the page action. The icon can be specified either as the\npath to an image file or as the pixel data from a canvas element, or as\ndictionary of either one of those. Either the <b>path</b> or the\n<b>imageData</b> property must be specified."
									},
									"parameters": [
										{
											"id": 4325,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4326,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 4336,
															"name": "iconIndex",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "<b>Deprecated.</b> This argument is ignored."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 14170,
																	"character": 17
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 4328,
															"name": "imageData",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Either an ImageData object or a dictionary {size -> ImageData} representing\nicon to be set. If the icon is specified as a dictionary, the actual image to\nbe used is chosen depending on screen's pixel density. If the number of image\npixels that fit into one screen space unit equals <code>scale</code>, then\nimage with size <code>scale</code> * n will be selected, where n is the size\nof the icon in the UI. At least one image must be specified. Note that\n'details.imageData = foo' is equivalent to 'details.imageData = {'16': foo}'"
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 14153,
																	"character": 17
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "reference",
																		"id": 4356,
																		"name": "ImageDataType"
																	},
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 4329,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 14153,
																					"character": 35
																				}
																			],
																			"indexSignature": {
																				"id": 4330,
																				"name": "__index",
																				"kind": 8192,
																				"kindString": "Index signature",
																				"flags": {},
																				"parameters": [
																					{
																						"id": 4331,
																						"name": "name",
																						"kind": 32768,
																						"flags": {},
																						"type": {
																							"type": "intrinsic",
																							"name": "string"
																						}
																					}
																				],
																				"type": {
																					"type": "intrinsic",
																					"name": "any"
																				}
																			}
																		}
																	}
																]
															}
														},
														{
															"id": 4332,
															"name": "path",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Either a relative image path or a dictionary {size -> relative image path}\npointing to icon to be set. If the icon is specified as a dictionary, the\nactual image to be used is chosen depending on screen's pixel density. If the\nnumber of image pixels that fit into one screen space unit equals\n<code>scale</code>, then image with size <code>scale</code> * n will be\nselected, where n is the size of the icon in the UI. At least one image must\nbe specified. Note that 'details.path = foo' is equivalent to 'details.path =\n{'16': foo}'"
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 14165,
																	"character": 12
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 4333,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 14165,
																					"character": 23
																				}
																			],
																			"indexSignature": {
																				"id": 4334,
																				"name": "__index",
																				"kind": 8192,
																				"kindString": "Index signature",
																				"flags": {},
																				"parameters": [
																					{
																						"id": 4335,
																						"name": "name",
																						"kind": 32768,
																						"flags": {},
																						"type": {
																							"type": "intrinsic",
																							"name": "string"
																						}
																					}
																				],
																				"type": {
																					"type": "intrinsic",
																					"name": "any"
																				}
																			}
																		}
																	}
																]
															}
														},
														{
															"id": 4327,
															"name": "tabId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "The id of the tab for which you want to modify the page action."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 14142,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																4336,
																4328,
																4332,
																4327
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 14138,
															"character": 14
														}
													]
												}
											}
										},
										{
											"id": 4337,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4338,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 14172,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 4339,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4340,
							"name": "setPopup",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14182,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 4341,
									"name": "setPopup",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the html document to be opened as a popup when the user clicks on the\npage action's icon."
									},
									"parameters": [
										{
											"id": 4342,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4343,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 4345,
															"name": "popup",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "The html file to show in a popup.  If set to the empty string (''), no popup\nis shown."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 14193,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 4344,
															"name": "tabId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "The id of the tab for which you want to modify the page action."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 14187,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																4345,
																4344
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 14183,
															"character": 14
														}
													]
												}
											}
										},
										{
											"id": 4346,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4347,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 14195,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 4348,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4307,
							"name": "setTitle",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14099,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 4308,
									"name": "setTitle",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the title of the page action. This is displayed in a tooltip over the\npage action."
									},
									"parameters": [
										{
											"id": 4309,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4310,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 4311,
															"name": "tabId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "The id of the tab for which you want to modify the page action."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 14104,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 4312,
															"name": "title",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "The tooltip string."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 14109,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																4311,
																4312
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 14100,
															"character": 14
														}
													]
												}
											}
										},
										{
											"id": 4313,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4314,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 14111,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 4315,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4295,
							"name": "show",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14075,
									"character": 24
								}
							],
							"signatures": [
								{
									"id": 4296,
									"name": "show",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Shows the page action. The page action is shown whenever the tab is selected."
									},
									"parameters": [
										{
											"id": 4297,
											"name": "tabId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The id of the tab for which you want to modify the page action."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 4298,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4299,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 14077,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 4300,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								4357
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								4356
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								4359
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								4349,
								4316,
								4301,
								4323,
								4340,
								4307,
								4295
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 14054,
							"character": 29
						}
					]
				},
				{
					"id": 4363,
					"name": "pageCapture",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.pageCapture</code> API to save a tab as MHTML.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "pageCapture"
							},
							{
								"tag": "chrome-permission",
								"text": "pageCapture\n"
							}
						]
					},
					"children": [
						{
							"id": 4364,
							"name": "saveAsMHTML",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14242,
									"character": 31
								}
							],
							"signatures": [
								{
									"id": 4365,
									"name": "saveAsMHTML",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Saves the content of the tab with given id as MHTML."
									},
									"parameters": [
										{
											"id": 4366,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4367,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 4368,
															"name": "tabId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "The id of the tab to save as MHTML."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 14247,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																4368
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 14243,
															"character": 14
														}
													]
												}
											}
										},
										{
											"id": 4369,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Called when the MHTML has been generated."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4370,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 14249,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 4371,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4372,
																	"name": "mhtmlData",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"text": "The MHTML data as a Blob.\n"
																	},
																	"type": {
																		"type": "reference",
																		"name": "ArrayBuffer"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								4364
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 14234,
							"character": 30
						}
					]
				},
				{
					"id": 4373,
					"name": "permissions",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.permissions</code> API to request <a\nhref='permissions#manifest'>declared optional permissions</a> at run time\nrather than install time, so users understand why the permissions are needed\nand grant only those that are necessary.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "permissions\n"
							}
						]
					},
					"children": [
						{
							"id": 4401,
							"name": "Permissions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 4403,
									"name": "origins",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The list of host permissions, including those specified in the\n<code>optional_permissions</code> or <code>permissions</code> keys in the\nmanifest, and those associated with <a href='content_scripts'>Content\nScripts</a>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14278,
											"character": 13
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 4402,
									"name": "permissions",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "List of named permissions (does not include hosts or origins)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14270,
											"character": 17
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4403,
										4402
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14266,
									"character": 32
								}
							]
						},
						{
							"id": 4404,
							"name": "onAdded",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when the extension acquires new permissions."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14347,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4405,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 14347,
													"character": 46
												}
											],
											"signatures": [
												{
													"id": 4406,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 4407,
															"name": "permissions",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "The newly acquired permissions.\n"
															},
															"type": {
																"type": "reference",
																"id": 4401,
																"name": "Permissions"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4408,
							"name": "onRemoved",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when access to permissions has been removed from the extension."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14359,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4409,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 14359,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 4410,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 4411,
															"name": "permissions",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "The permissions that have been removed.\n"
															},
															"type": {
																"type": "reference",
																"id": 4401,
																"name": "Permissions"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4380,
							"name": "contains",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14300,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 4381,
									"name": "contains",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Checks if the extension has the specified permissions."
									},
									"parameters": [
										{
											"id": 4382,
											"name": "permissions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 4401,
												"name": "Permissions"
											}
										},
										{
											"id": 4383,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4384,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 14302,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 4385,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4386,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "True if the extension has the specified permissions. If an origin is specified as both an optional permission and a content script match pattern, this will return <code>false</code> unless both permissions are granted.\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "boolean"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4374,
							"name": "getAll",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14287,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 4375,
									"name": "getAll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the extension's current set of permissions."
									},
									"parameters": [
										{
											"id": 4376,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4377,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 14288,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 4378,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4379,
																	"name": "permissions",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "The extension's active permissions. Note that the <code>origins</code> property will contain granted origins from those specified in the <code>permissions</code> and <code>optional_permissions</code> keys in the manifest and those associated with <a href='content_scripts'>Content Scripts</a>.\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 4401,
																		"name": "Permissions"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4394,
							"name": "remove",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14337,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 4395,
									"name": "remove",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Removes access to the specified permissions. If there are any problems\nremoving the permissions, {@link runtime.lastError} will be set."
									},
									"parameters": [
										{
											"id": 4396,
											"name": "permissions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 4401,
												"name": "Permissions"
											}
										},
										{
											"id": 4397,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4398,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 14339,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 4399,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4400,
																	"name": "removed",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "True if the permissions were removed.\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "boolean"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4387,
							"name": "request",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14322,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 4388,
									"name": "request",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Requests access to the specified permissions, displaying a prompt to the user\nif necessary. These permissions must either be defined in the\n<code>optional_permissions</code> field of the manifest or be required\npermissions that were withheld by the user. Paths on origin patterns will be\nignored. You can request subsets of optional origin permissions; for example,\nif you specify <code>*://&#x2a;/*</code> in the\n<code>optional_permissions</code> section of the manifest, you can request\n<code>http://example.com/</code>. If there are any problems requesting the\npermissions, {@link runtime.lastError} will be set."
									},
									"parameters": [
										{
											"id": 4389,
											"name": "permissions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 4401,
												"name": "Permissions"
											}
										},
										{
											"id": 4390,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4391,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 14324,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 4392,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4393,
																	"name": "granted",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "True if the user granted the specified permissions.\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "boolean"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								4401
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								4404,
								4408
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								4380,
								4374,
								4394,
								4387
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 14265,
							"character": 30
						}
					]
				},
				{
					"id": 4412,
					"name": "platformKeys",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.platformKeys</code> API to access client certificates\nmanaged by the platform. If the user or policy grants the permission, an\nextension can use such a certficate in its custom authentication protocol.\nE.g. this allows usage of platform managed certificates in third party VPNs\n(see {@link vpnProvider chrome.vpnProvider}).",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "platformKeys"
							},
							{
								"tag": "chrome-platform",
								"text": "chromeos"
							},
							{
								"tag": "chrome-platform",
								"text": "lacros"
							},
							{
								"tag": "chrome-permission",
								"text": "platformKeys\n"
							}
						]
					},
					"children": [
						{
							"id": 4475,
							"name": "ClientCertificateRequest",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 4477,
									"name": "certificateAuthorities",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "List of distinguished names of certificate authorities allowed by the server.\nEach entry must be a DER-encoded X.509 DistinguishedName."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14414,
											"character": 28
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "ArrayBuffer"
										}
									}
								},
								{
									"id": 4476,
									"name": "certificateTypes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "This field is a list of the types of certificates requested, sorted in order\nof the server's preference. Only certificates of a type contained in this\nlist will be retrieved. If <code>certificateTypes</code> is the empty list,\nhowever, certificates of any type will be returned."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14408,
											"character": 22
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 4474,
											"name": "ClientCertificateType"
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4477,
										4476
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14401,
									"character": 45
								}
							]
						},
						{
							"id": 4468,
							"name": "Match",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 4469,
									"name": "certificate",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The DER encoding of a X.509 certificate."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14388,
											"character": 17
										}
									],
									"type": {
										"type": "reference",
										"name": "ArrayBuffer"
									}
								},
								{
									"id": 4470,
									"name": "keyAlgorithm",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The <a href=\"http://www.w3.org/TR/WebCryptoAPI/#key-algorithm-dictionary\">\nKeyAlgorithm</a> of the certified key. This contains algorithm parameters\nthat are inherent to the key of the certificate (e.g. the key length). Other\nparameters like the hash function used by the sign function are not included."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14396,
											"character": 18
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 4471,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": {
												"id": 4472,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 4473,
														"name": "name",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4469,
										4470
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14384,
									"character": 26
								}
							]
						},
						{
							"id": 4478,
							"name": "SelectDetails",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 4480,
									"name": "clientCerts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "If given, the <code>selectClientCertificates</code> operates on this list.\nOtherwise, obtains the list of all certificates from the platform's\ncertificate stores that are available to this extensions. Entries that the\nextension doesn't have permission for or which doesn't match the request, are\nremoved."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14430,
											"character": 17
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "ArrayBuffer"
										}
									}
								},
								{
									"id": 4481,
									"name": "interactive",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "If true, the filtered list is presented to the user to manually select a\ncertificate and thereby granting the extension access to the certificate(s)\nand key(s). Only the selected certificate(s) will be returned. If is false,\nthe list is reduced to all certificates that the extension has been granted\naccess to (automatically or manually)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14439,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 4479,
									"name": "request",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Only certificates that match this request will be returned."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14421,
											"character": 13
										}
									],
									"type": {
										"type": "reference",
										"id": 4475,
										"name": "ClientCertificateRequest"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4480,
										4481,
										4479
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14417,
									"character": 34
								}
							]
						},
						{
							"id": 4482,
							"name": "VerificationDetails",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 4484,
									"name": "hostname",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The hostname of the server to verify the certificate for, e.g. the server\nthat presented the <code>serverCertificateChain</code>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14454,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4483,
									"name": "serverCertificateChain",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Each chain entry must be the DER encoding of a X.509 certificate, the first\nentry must be the server certificate and each entry must certify the entry\npreceding it."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14448,
											"character": 28
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "ArrayBuffer"
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4484,
										4483
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14442,
									"character": 40
								}
							]
						},
						{
							"id": 4485,
							"name": "VerificationResult",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 4487,
									"name": "debug_errors",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "<p>If the trust verification failed, this array contains the errors reported\nby the underlying network layer. Otherwise, this array is\nempty.</p><p><strong>Note:</strong> This list is meant for debugging only and\nmay not contain all relevant errors. The errors returned may change in future\nrevisions of this API, and are not guaranteed to be forwards or backwards\ncompatible.</p>"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14473,
											"character": 18
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 4486,
									"name": "trusted",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The result of the trust verification: true if trust for the given\nverification details could be established and false if trust is rejected for\nany reason."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14463,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4487,
										4486
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14457,
									"character": 39
								}
							]
						},
						{
							"id": 4474,
							"name": "ClientCertificateType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14399,
									"character": 37
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "rsaSign"
									},
									{
										"type": "literal",
										"value": "ecdsaSign"
									}
								]
							}
						},
						{
							"id": 4420,
							"name": "getKeyPair",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14506,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 4421,
									"name": "getKeyPair",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Passes the key pair of <code>certificate</code> for usage with {@link\nplatformKeys.subtleCrypto} to <code>callback</code>."
									},
									"parameters": [
										{
											"id": 4422,
											"name": "certificate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The certificate of a {@link Match} returned by {@link selectClientCertificates}."
											},
											"type": {
												"type": "reference",
												"name": "ArrayBuffer"
											}
										},
										{
											"id": 4423,
											"name": "parameters",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Determines signature/hash algorithm parameters additionally to the parameters fixed by the key itself. The same parameters are accepted as by WebCrypto's <a href=\"http://www.w3.org/TR/WebCryptoAPI/#SubtleCrypto-method-importKey\">importKey</a> function, e.g. <code>RsaHashedImportParams</code> for a RSASSA-PKCS1-v1_5 key and <code>EcKeyImportParams</code> for EC key. Additionally for RSASSA-PKCS1-v1_5 keys, hashing algorithm name parameter can be specified with one of the following values: \"none\", \"SHA-1\", \"SHA-256\", \"SHA-384\", or \"SHA-512\", e.g. <code>{\"hash\": { \"name\": \"none\" } }</code>. The sign function will then apply PKCS#1 v1.5 padding but not hash the given data. <p>Currently, this function only supports the \"RSASSA-PKCS1-v1_5\" and \"ECDSA\" algorithms.</p>"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4424,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 14508,
															"character": 17
														}
													],
													"indexSignature": {
														"id": 4425,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 4426,
																"name": "name",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										},
										{
											"id": 4427,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The public and private <a href=\"http://www.w3.org/TR/WebCryptoAPI/#dfn-CryptoKey\">CryptoKey</a> of a certificate which can only be used with {@link platformKeys.subtleCrypto}."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4428,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 14509,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 4429,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4430,
																	"name": "publicKey",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {},
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 4431,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 14510,
																					"character": 18
																				}
																			],
																			"indexSignature": {
																				"id": 4432,
																				"name": "__index",
																				"kind": 8192,
																				"kindString": "Index signature",
																				"flags": {},
																				"parameters": [
																					{
																						"id": 4433,
																						"name": "name",
																						"kind": 32768,
																						"flags": {},
																						"type": {
																							"type": "intrinsic",
																							"name": "string"
																						}
																					}
																				],
																				"type": {
																					"type": "intrinsic",
																					"name": "any"
																				}
																			}
																		}
																	}
																},
																{
																	"id": 4434,
																	"name": "privateKey",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"text": "Might be <code>null</code> if this extension does not have   access to it.\n"
																	},
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 4435,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 14511,
																					"character": 20
																				}
																			],
																			"indexSignature": {
																				"id": 4436,
																				"name": "__index",
																				"kind": 8192,
																				"kindString": "Index signature",
																				"flags": {},
																				"parameters": [
																					{
																						"id": 4437,
																						"name": "name",
																						"kind": 32768,
																						"flags": {},
																						"type": {
																							"type": "intrinsic",
																							"name": "string"
																						}
																					}
																				],
																				"type": {
																					"type": "intrinsic",
																					"name": "any"
																				}
																			}
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4438,
							"name": "getKeyPairBySpki",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14525,
									"character": 36
								}
							],
							"signatures": [
								{
									"id": 4439,
									"name": "getKeyPairBySpki",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Passes the key pair identified by <code>publicKeySpkiDer</code> for usage\nwith {@link platformKeys.subtleCrypto} to <code>callback</code>."
									},
									"parameters": [
										{
											"id": 4440,
											"name": "publicKeySpkiDer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A DER-encoded X.509 SubjectPublicKeyInfo, obtained e.g. by calling WebCrypto's exportKey function with format=\"spki\"."
											},
											"type": {
												"type": "reference",
												"name": "ArrayBuffer"
											}
										},
										{
											"id": 4441,
											"name": "parameters",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Provides signature and hash algorithm parameters, in addition to those fixed by the key itself. The same parameters are accepted as by WebCrypto's <a href=\"http://www.w3.org/TR/WebCryptoAPI/#SubtleCrypto-method-importKey\">importKey</a> function, e.g. <code>RsaHashedImportParams</code> for a RSASSA-PKCS1-v1_5 key. For RSASSA-PKCS1-v1_5 keys, we need to also pass a \"hash\" parameter <code>{ \"hash\": { \"name\": string } }</code>. The \"hash\" parameter represents the name of the hashing algorithm to be used in the digest operation before a sign. It is possible to pass \"none\" as the hash name, in which case the sign function will apply PKCS#1 v1.5 padding and but not hash the given data. <p>Currently, this function only supports the \"RSASSA-PKCS1-v1_5\" algorithm with one of the hashing algorithms \"none\", \"SHA-1\", \"SHA-256\", \"SHA-384\", and \"SHA-512\".</p>"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4442,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 14527,
															"character": 17
														}
													],
													"indexSignature": {
														"id": 4443,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 4444,
																"name": "name",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										},
										{
											"id": 4445,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The public and private <a href=\"http://www.w3.org/TR/WebCryptoAPI/#dfn-CryptoKey\">CryptoKey</a> of a certificate which can only be used with {@link platformKeys.subtleCrypto}."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4446,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 14528,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 4447,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4448,
																	"name": "publicKey",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {},
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 4449,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 14529,
																					"character": 18
																				}
																			],
																			"indexSignature": {
																				"id": 4450,
																				"name": "__index",
																				"kind": 8192,
																				"kindString": "Index signature",
																				"flags": {},
																				"parameters": [
																					{
																						"id": 4451,
																						"name": "name",
																						"kind": 32768,
																						"flags": {},
																						"type": {
																							"type": "intrinsic",
																							"name": "string"
																						}
																					}
																				],
																				"type": {
																					"type": "intrinsic",
																					"name": "any"
																				}
																			}
																		}
																	}
																},
																{
																	"id": 4452,
																	"name": "privateKey",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"text": "Might be <code>null</code> if this extension does not have   access to it.\n"
																	},
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 4453,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 14530,
																					"character": 20
																				}
																			],
																			"indexSignature": {
																				"id": 4454,
																				"name": "__index",
																				"kind": 8192,
																				"kindString": "Index signature",
																				"flags": {},
																				"parameters": [
																					{
																						"id": 4455,
																						"name": "name",
																						"kind": 32768,
																						"flags": {},
																						"type": {
																							"type": "intrinsic",
																							"name": "string"
																						}
																					}
																				],
																				"type": {
																					"type": "intrinsic",
																					"name": "any"
																				}
																			}
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4413,
							"name": "selectClientCertificates",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14489,
									"character": 44
								}
							],
							"signatures": [
								{
									"id": 4414,
									"name": "selectClientCertificates",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This function filters from a list of client certificates the ones that are\nknown to the platform, match <code>request</code> and for which the extension\nhas permission to access the certificate and its private key. If\n<code>interactive</code> is true, the user is presented a dialog where they\ncan select from matching certificates and grant the extension access to the\ncertificate. The selected/filtered client certificates will be passed to\n<code>callback</code>."
									},
									"parameters": [
										{
											"id": 4415,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 4478,
												"name": "SelectDetails"
											}
										},
										{
											"id": 4416,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4417,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 14491,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 4418,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4419,
																	"name": "matches",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "The list of certificates that match the request, that the extension has permission for and, if <code>interactive</code> is true, that were selected by the user.\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 4468,
																			"name": "Match"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4456,
							"name": "subtleCrypto",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14540,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 4457,
									"name": "subtleCrypto",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "An implementation of WebCrypto's <a\nhref=\"http://www.w3.org/TR/WebCryptoAPI/#subtlecrypto-interface\">\nSubtleCrypto</a> that allows crypto operations on keys of client certificates\nthat are available to this extension."
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 4458,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 14540,
													"character": 35
												}
											],
											"indexSignature": {
												"id": 4459,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 4460,
														"name": "name",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									}
								}
							]
						},
						{
							"id": 4461,
							"name": "verifyTLSServerCertificate",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14555,
									"character": 46
								}
							],
							"signatures": [
								{
									"id": 4462,
									"name": "verifyTLSServerCertificate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Checks whether <code>details.serverCertificateChain</code> can be trusted for\n<code>details.hostname</code> according to the trust settings of the\nplatform. Note: The actual behavior of the trust verification is not fully\nspecified and might change in the future. The API implementation verifies\ncertificate expiration, validates the certification path and checks trust by\na known CA. The implementation is supposed to respect the EKU serverAuth and\nto support subject alternative names."
									},
									"parameters": [
										{
											"id": 4463,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 4482,
												"name": "VerificationDetails"
											}
										},
										{
											"id": 4464,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4465,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 14557,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 4466,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4467,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 4485,
																		"name": "VerificationResult"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								4475,
								4468,
								4478,
								4482,
								4485
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								4474
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								4420,
								4438,
								4413,
								4456,
								4461
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 14383,
							"character": 31
						}
					]
				},
				{
					"id": 4488,
					"name": "power",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.power</code> API to override the system's power\nmanagement features.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "power"
							},
							{
								"tag": "chrome-permission",
								"text": "power\n"
							}
						]
					},
					"children": [
						{
							"id": 4494,
							"name": "Level",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14573,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "system"
									},
									{
										"type": "literal",
										"value": "display"
									}
								]
							}
						},
						{
							"id": 4492,
							"name": "releaseKeepAwake",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14589,
									"character": 36
								}
							],
							"signatures": [
								{
									"id": 4493,
									"name": "releaseKeepAwake",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Releases a request previously made via requestKeepAwake()."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4489,
							"name": "requestKeepAwake",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14582,
									"character": 36
								}
							],
							"signatures": [
								{
									"id": 4490,
									"name": "requestKeepAwake",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Requests that power management be temporarily disabled. |level| describes the\ndegree to which power management should be disabled. If a request previously\nmade by the same app is still active, it will be replaced by the new request."
									},
									"parameters": [
										{
											"id": 4491,
											"name": "level",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"id": 4494,
												"name": "Level"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								4494
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								4492,
								4489
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 14572,
							"character": 24
						}
					]
				},
				{
					"id": 4495,
					"name": "printerProvider",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "The <code>chrome.printerProvider</code> API exposes events used by print\nmanager to query printers controlled by extensions, to query their\ncapabilities and to submit print jobs to these printers.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "printerProvider"
							},
							{
								"tag": "chrome-permission",
								"text": "printerProvider\n"
							}
						]
					},
					"children": [
						{
							"id": 4501,
							"name": "PrintJob",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 4508,
									"name": "contentType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The document content type. Supported formats are\n<code>\"application/pdf\"</code> and <code>\"image/pwg-raster\"</code>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14647,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4509,
									"name": "document",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Blob containing the document data to print. Format must match |contentType|."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14652,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"name": "Blob"
									}
								},
								{
									"id": 4502,
									"name": "printerId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "ID of the printer which should handle the job."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14629,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4504,
									"name": "ticket",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Print ticket in <a\nhref=\"https://developers.google.com/cloud-print/docs/cdd#cjt\"> CJT\nformat</a>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14641,
											"character": 12
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 4505,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": {
												"id": 4506,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 4507,
														"name": "name",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									}
								},
								{
									"id": 4503,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The print job title."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14634,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4508,
										4509,
										4502,
										4504,
										4503
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14625,
									"character": 29
								}
							]
						},
						{
							"id": 4497,
							"name": "PrinterInfo",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 4500,
									"name": "description",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Printer's human readable description."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14622,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4498,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Unique printer ID."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14612,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4499,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Printer's human readable name."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14617,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4500,
										4498,
										4499
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14608,
									"character": 32
								}
							]
						},
						{
							"id": 4496,
							"name": "PrintError",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "Error codes returned in response to {@link onPrintRequested} event."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14606,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "OK"
									},
									{
										"type": "literal",
										"value": "FAILED"
									},
									{
										"type": "literal",
										"value": "INVALID_TICKET"
									},
									{
										"type": "literal",
										"value": "INVALID_DATA"
									}
								]
							}
						},
						{
							"id": 4525,
							"name": "onGetCapabilityRequested",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Event fired when print manager requests printer capabilities."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14688,
									"character": 41
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4526,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 14688,
													"character": 63
												}
											],
											"signatures": [
												{
													"id": 4527,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 4528,
															"name": "printerId",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Unique ID of the printer whose capabilities are requested.\n"
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 4529,
															"name": "resultCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 4530,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 14694,
																			"character": 23
																		}
																	],
																	"signatures": [
																		{
																			"id": 4531,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 4532,
																					"name": "capabilities",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "reflection",
																						"declaration": {
																							"id": 4533,
																							"name": "__type",
																							"kind": 65536,
																							"kindString": "Type literal",
																							"flags": {},
																							"sources": [
																								{
																									"fileName": "npm/index.d.ts",
																									"line": 14695,
																									"character": 23
																								}
																							],
																							"indexSignature": {
																								"id": 4534,
																								"name": "__index",
																								"kind": 8192,
																								"kindString": "Index signature",
																								"flags": {},
																								"parameters": [
																									{
																										"id": 4535,
																										"name": "name",
																										"kind": 32768,
																										"flags": {},
																										"type": {
																											"type": "intrinsic",
																											"name": "string"
																										}
																									}
																								],
																								"type": {
																									"type": "intrinsic",
																									"name": "any"
																								}
																							}
																						}
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4510,
							"name": "onGetPrintersRequested",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Event fired when print manager requests printers provided by extensions."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14658,
									"character": 39
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4511,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 14658,
													"character": 61
												}
											],
											"signatures": [
												{
													"id": 4512,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 4513,
															"name": "resultCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 4514,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 14660,
																			"character": 23
																		}
																	],
																	"signatures": [
																		{
																			"id": 4515,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 4516,
																					"name": "printerInfo",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "array",
																						"elementType": {
																							"type": "reference",
																							"id": 4497,
																							"name": "PrinterInfo"
																						}
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4517,
							"name": "onGetUsbPrinterInfoRequested",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Event fired when print manager requests information about a USB device that\nmay be a printer. <p><em>Note:</em> An application should not rely on this\nevent being fired more than once per device. If a connected device is\nsupported it should be returned in the {@link onGetPrintersRequested}\nevent.</p>"
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14673,
									"character": 45
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4518,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 14673,
													"character": 67
												}
											],
											"signatures": [
												{
													"id": 4519,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 4520,
															"name": "device",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "The USB device.\n"
															},
															"type": {
																"type": "reference",
																"id": 6302,
																"name": "usb.Device"
															}
														},
														{
															"id": 4521,
															"name": "resultCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 4522,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 14679,
																			"character": 23
																		}
																	],
																	"signatures": [
																		{
																			"id": 4523,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 4524,
																					"name": "printerInfo",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {
																						"isOptional": true
																					},
																					"type": {
																						"type": "reference",
																						"id": 4497,
																						"name": "PrinterInfo"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4536,
							"name": "onPrintRequested",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Event fired when print manager requests printing."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14703,
									"character": 33
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4537,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 14703,
													"character": 55
												}
											],
											"signatures": [
												{
													"id": 4538,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 4539,
															"name": "printJob",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "The printing request parameters.\n"
															},
															"type": {
																"type": "reference",
																"id": 4501,
																"name": "PrintJob"
															}
														},
														{
															"id": 4540,
															"name": "resultCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 4541,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 14709,
																			"character": 23
																		}
																	],
																	"signatures": [
																		{
																			"id": 4542,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 4543,
																					"name": "result",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"id": 4496,
																						"name": "PrintError"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								4501,
								4497
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								4496
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								4525,
								4510,
								4517,
								4536
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 14602,
							"character": 34
						}
					]
				},
				{
					"id": 4585,
					"name": "printing",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.printing</code> API to send print jobs to printers\ninstalled on Chromebook.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "printing"
							},
							{
								"tag": "chrome-permission",
								"text": "printing"
							},
							{
								"tag": "chrome-platform",
								"text": "chromeos\n"
							}
						]
					},
					"children": [
						{
							"id": 4628,
							"name": "GetPrinterInfoResponse",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 4629,
									"name": "capabilities",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Printer capabilities in <a\nhref=\"https://developers.google.com/cloud-print/docs/cdd#cdd\"> CDD\nformat</a>. The property may be missing."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14986,
											"character": 18
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 4630,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": {
												"id": 4631,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 4632,
														"name": "name",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									}
								},
								{
									"id": 4633,
									"name": "status",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The status of the printer."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14991,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 4627,
										"name": "PrinterStatus"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4629,
										4633
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14980,
									"character": 43
								}
							]
						},
						{
							"id": 4619,
							"name": "Printer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 4622,
									"name": "description",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The human-readable description of the printer."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14947,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4620,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The printer's identifier; guaranteed to be unique among printers on the\ndevice."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14937,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4625,
									"name": "isDefault",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The flag which shows whether the printer fits <a\nhref=\"https://chromium.org/administrators/policy-list-3#DefaultPrinterSelection\"> DefaultPrinterSelection</a> rules. Note that several printers could be flagged."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14964,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 4621,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The name of the printer."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14942,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4626,
									"name": "recentlyUsedRank",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The value showing how recent the printer was used for printing from Chrome.\nThe lower the value is the more recent the printer was used. The minimum\nvalue is 0. Missing value indicates that the printer wasn't used recently.\nThis value is guaranteed to be unique amongst printers."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14972,
											"character": 22
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4624,
									"name": "source",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The source of the printer (user or policy configured)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14958,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 4553,
										"name": "PrinterSource"
									}
								},
								{
									"id": 4623,
									"name": "uri",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The printer URI. This can be used by extensions to choose the printer for the\nuser."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14953,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4622,
										4620,
										4625,
										4621,
										4626,
										4624,
										4623
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14932,
									"character": 28
								}
							]
						},
						{
							"id": 4612,
							"name": "SubmitJobRequest",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 4613,
									"name": "job",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The print job to be submitted. The only supported content type is\n\"application/pdf\", and the CJT ticket shouldn't include FitToPageTicketItem,\nPageRangeTicketItem, ReverseOrderTicketItem and VendorTicketItem fields since\nthey are irrelevant for native printing. All other fields must be present."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14906,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"id": 4501,
										"name": "PrintJob"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4613
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14899,
									"character": 37
								}
							]
						},
						{
							"id": 4615,
							"name": "SubmitJobResponse",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 4617,
									"name": "jobId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The id of created print job. This is a unique identifier among all print jobs\non the device. If status is not OK, jobId will be null."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14924,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4616,
									"name": "status",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The status of the request."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14918,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 4614,
										"name": "SubmitJobStatus"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4617,
										4616
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14914,
									"character": 38
								}
							]
						},
						{
							"id": 4634,
							"name": "JobStatus",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "Status of the print job."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14997,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "PENDING"
									},
									{
										"type": "literal",
										"value": "IN_PROGRESS"
									},
									{
										"type": "literal",
										"value": "FAILED"
									},
									{
										"type": "literal",
										"value": "CANCELED"
									},
									{
										"type": "literal",
										"value": "PRINTED"
									}
								]
							}
						},
						{
							"id": 4618,
							"name": "PrinterSource",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The source of the printer."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14930,
									"character": 29
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "USER"
									},
									{
										"type": "literal",
										"value": "POLICY"
									}
								]
							}
						},
						{
							"id": 4627,
							"name": "PrinterStatus",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The status of the printer."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14978,
									"character": 29
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "DOOR_OPEN"
									},
									{
										"type": "literal",
										"value": "TRAY_MISSING"
									},
									{
										"type": "literal",
										"value": "OUT_OF_INK"
									},
									{
										"type": "literal",
										"value": "OUT_OF_PAPER"
									},
									{
										"type": "literal",
										"value": "OUTPUT_FULL"
									},
									{
										"type": "literal",
										"value": "PAPER_JAM"
									},
									{
										"type": "literal",
										"value": "GENERIC_ISSUE"
									},
									{
										"type": "literal",
										"value": "STOPPED"
									},
									{
										"type": "literal",
										"value": "UNREACHABLE"
									},
									{
										"type": "literal",
										"value": "AVAILABLE"
									}
								]
							}
						},
						{
							"id": 4614,
							"name": "SubmitJobStatus",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The status of {@link submitJob} request."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14912,
									"character": 31
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "OK"
									},
									{
										"type": "literal",
										"value": "USER_REJECTED"
									}
								]
							}
						},
						{
							"id": 4636,
							"name": "MAX_GET_PRINTER_INFO_CALLS_PER_MINUTE",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "The maximum number of times that {@link getPrinterInfo} can be called per\nminute."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15008,
									"character": 54
								}
							],
							"type": {
								"type": "literal",
								"value": 20
							}
						},
						{
							"id": 4635,
							"name": "MAX_SUBMIT_JOB_CALLS_PER_MINUTE",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "The maximum number of times that {@link submitJob} can be called per minute."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15002,
									"character": 48
								}
							],
							"type": {
								"type": "literal",
								"value": 20
							}
						},
						{
							"id": 4637,
							"name": "onJobStatusChanged",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Event fired when the status of the job is changed. This is only fired for the\njobs created by this extension."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15071,
									"character": 35
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4638,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 15071,
													"character": 57
												}
											],
											"signatures": [
												{
													"id": 4639,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 4640,
															"name": "jobId",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 4641,
															"name": "status",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reference",
																"id": 4634,
																"name": "JobStatus"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4593,
							"name": "cancelJob",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15032,
									"character": 29
								}
							],
							"signatures": [
								{
									"id": 4594,
									"name": "cancelJob",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Cancels previously submitted job."
									},
									"parameters": [
										{
											"id": 4595,
											"name": "jobId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The id of the print job to cancel. This should be the same id received in a {@link SubmitJobResponse}."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 4596,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4597,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 15034,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 4598,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4605,
							"name": "getPrinterInfo",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15060,
									"character": 34
								}
							],
							"signatures": [
								{
									"id": 4606,
									"name": "getPrinterInfo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the status and capabilities of the printer in <a\nhref=\"https://developers.google.com/cloud-print/docs/cdd#cdd\"> CDD\nformat</a>. This call will fail with a runtime error if no printers with\ngiven id are installed."
									},
									"parameters": [
										{
											"id": 4607,
											"name": "printerId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 4608,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4609,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 15062,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 4610,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4611,
																	"name": "response",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 4628,
																		"name": "GetPrinterInfoResponse"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4599,
							"name": "getPrinters",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15044,
									"character": 31
								}
							],
							"signatures": [
								{
									"id": 4600,
									"name": "getPrinters",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the list of available printers on the device. This includes manually\nadded, enterprise and discovered printers."
									},
									"parameters": [
										{
											"id": 4601,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4602,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 15045,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 4603,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4604,
																	"name": "printers",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 4619,
																			"name": "Printer"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4586,
							"name": "submitJob",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15019,
									"character": 29
								}
							],
							"signatures": [
								{
									"id": 4587,
									"name": "submitJob",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Submits the job for print. If the extension is not listed in\nPrintingAPIExtensionsAllowlist policy, the user will be prompted to accept\nthe print job."
									},
									"parameters": [
										{
											"id": 4588,
											"name": "request",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 4612,
												"name": "SubmitJobRequest"
											}
										},
										{
											"id": 4589,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4590,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 15021,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 4591,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4592,
																	"name": "response",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 4615,
																		"name": "SubmitJobResponse"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								4628,
								4619,
								4612,
								4615
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								4634,
								4618,
								4627,
								4614
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								4636,
								4635,
								4637
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								4593,
								4605,
								4599,
								4586
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 14898,
							"character": 27
						}
					]
				},
				{
					"id": 4544,
					"name": "printingMetrics",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.printingMetrics</code> API to fetch data about\nprinting\nusage.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "printingMetrics"
							},
							{
								"tag": "chrome-permission",
								"text": "printingMetrics"
							},
							{
								"tag": "chrome-platform",
								"text": "chromeos\n"
							}
						]
					},
					"children": [
						{
							"id": 4556,
							"name": "MediaSize",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 4558,
									"name": "height",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Height (in micrometers) of the media used for printing."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14756,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4559,
									"name": "vendorId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Vendor-provided ID, e.g. \"iso_a3_297x420mm\" or \"na_index-3x5_3x5in\". Possible\nvalues are values of \"media\" IPP attribute and can be found on <a\nhref=\"https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xhtml\"> IANA page</a> ."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14763,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4557,
									"name": "width",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Width (in micrometers) of the media used for printing."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14751,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4558,
										4559,
										4557
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14747,
									"character": 30
								}
							]
						},
						{
							"id": 4569,
							"name": "PrintJobInfo",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 4576,
									"name": "completionTime",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The job completion time (in milliseconds past the Unix epoch)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14839,
											"character": 20
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4575,
									"name": "creationTime",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The job creation time (in milliseconds past the Unix epoch)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14834,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4570,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The ID of the job."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14809,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4579,
									"name": "numberOfPages",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The number of pages in the document."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14854,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4577,
									"name": "printer",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The info about the printer which printed the document."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14844,
											"character": 13
										}
									],
									"type": {
										"type": "reference",
										"id": 4565,
										"name": "Printer"
									}
								},
								{
									"id": 4580,
									"name": "printer_status",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The status of the printer."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14859,
											"character": 20
										}
									],
									"type": {
										"type": "reference",
										"id": 4627,
										"name": "PrinterStatus"
									}
								},
								{
									"id": 4578,
									"name": "settings",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The settings of the print job."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14849,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"id": 4560,
										"name": "PrintSettings"
									}
								},
								{
									"id": 4572,
									"name": "source",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Source showing who initiated the print job."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14819,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 4551,
										"name": "PrintJobSource"
									}
								},
								{
									"id": 4573,
									"name": "sourceId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "ID of source. Null if source is PRINT_PREVIEW or ANDROID_APP."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14824,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4574,
									"name": "status",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The final status of the job."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14829,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 4552,
										"name": "PrintJobStatus"
									}
								},
								{
									"id": 4571,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The title of the document which was printed."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14814,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4576,
										4575,
										4570,
										4579,
										4577,
										4580,
										4578,
										4572,
										4573,
										4574,
										4571
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14805,
									"character": 33
								}
							]
						},
						{
							"id": 4560,
							"name": "PrintSettings",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 4561,
									"name": "color",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The requested color mode."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14770,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"id": 4554,
										"name": "ColorMode"
									}
								},
								{
									"id": 4564,
									"name": "copies",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The requested number of copies."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14785,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4562,
									"name": "duplex",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The requested duplex mode."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14775,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 4555,
										"name": "DuplexMode"
									}
								},
								{
									"id": 4563,
									"name": "mediaSize",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The requested media size."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14780,
											"character": 15
										}
									],
									"type": {
										"type": "reference",
										"id": 4556,
										"name": "MediaSize"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4561,
										4564,
										4562,
										4563
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14766,
									"character": 34
								}
							]
						},
						{
							"id": 4565,
							"name": "Printer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 4566,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Displayed name of the printer."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14792,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4568,
									"name": "source",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The source of the printer."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14802,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 4553,
										"name": "PrinterSource"
									}
								},
								{
									"id": 4567,
									"name": "uri",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The full path for the printer. Contains protocol, hostname, port, and queue."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 14797,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4566,
										4568,
										4567
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14788,
									"character": 28
								}
							]
						},
						{
							"id": 4554,
							"name": "ColorMode",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14743,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "BLACK_AND_WHITE"
									},
									{
										"type": "literal",
										"value": "COLOR"
									}
								]
							}
						},
						{
							"id": 4555,
							"name": "DuplexMode",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14745,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "ONE_SIDED"
									},
									{
										"type": "literal",
										"value": "TWO_SIDED_LONG_EDGE"
									},
									{
										"type": "literal",
										"value": "TWO_SIDED_SHORT_EDGE"
									}
								]
							}
						},
						{
							"id": 4551,
							"name": "PrintJobSource",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The source of the print job."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14731,
									"character": 30
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "PRINT_PREVIEW"
									},
									{
										"type": "literal",
										"value": "ANDROID_APP"
									},
									{
										"type": "literal",
										"value": "EXTENSION"
									}
								]
							}
						},
						{
							"id": 4552,
							"name": "PrintJobStatus",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The final status of the print job."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14736,
									"character": 30
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "FAILED"
									},
									{
										"type": "literal",
										"value": "CANCELED"
									},
									{
										"type": "literal",
										"value": "PRINTED"
									}
								]
							}
						},
						{
							"id": 4553,
							"name": "PrinterSource",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The source of the printer."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14741,
									"character": 29
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "USER"
									},
									{
										"type": "literal",
										"value": "POLICY"
									}
								]
							}
						},
						{
							"id": 4581,
							"name": "onPrintJobFinished",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Event fired when the print job is finished. This includes any of termination\nstatuses: FAILED, CANCELED and PRINTED."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14878,
									"character": 35
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4582,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 14878,
													"character": 57
												}
											],
											"signatures": [
												{
													"id": 4583,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 4584,
															"name": "jobInfo",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reference",
																"id": 4569,
																"name": "PrintJobInfo"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4545,
							"name": "getPrintJobs",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 14868,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 4546,
									"name": "getPrintJobs",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the list of the finished print jobs."
									},
									"parameters": [
										{
											"id": 4547,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4548,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 14869,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 4549,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4550,
																	"name": "jobs",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 4569,
																			"name": "PrintJobInfo"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								4556,
								4569,
								4560,
								4565
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								4554,
								4555,
								4551,
								4552,
								4553
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								4581
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								4545
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 14727,
							"character": 34
						}
					]
				},
				{
					"id": 4642,
					"name": "privacy",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.privacy</code> API to control usage of the features in\nChrome that can affect a user's privacy. This API relies on the <a\nhref='types#ChromeSetting'>ChromeSetting prototype of the type API</a> for\ngetting and setting Chrome's configuration.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "privacy"
							},
							{
								"tag": "chrome-permission",
								"text": "privacy\n"
							}
						]
					},
					"children": [
						{
							"id": 4643,
							"name": "IPHandlingPolicy",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The IP handling policy of WebRTC."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15098,
									"character": 32
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "default"
									},
									{
										"type": "literal",
										"value": "default_public_and_private_interfaces"
									},
									{
										"type": "literal",
										"value": "default_public_interface_only"
									},
									{
										"type": "literal",
										"value": "disable_non_proxied_udp"
									}
								]
							}
						},
						{
							"id": 4644,
							"name": "network",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Settings that influence Chrome's handling of network connections in general."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15103,
									"character": 24
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 4645,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 4646,
											"name": "networkPredictionEnabled",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "If enabled, Chrome attempts to speed up your web browsing experience by\npre-resolving DNS entries and preemptively opening TCP and SSL connections to\nservers. This preference only affects actions taken by Chrome's internal\nprediction service. It does not affect webpage-initiated prefectches or\npreconnects. This preference's value is a boolean, defaulting to\n<code>true</code>."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 15112,
													"character": 30
												}
											],
											"type": {
												"type": "reference",
												"id": 6124,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "boolean"
													}
												],
												"name": "types.ChromeSetting"
											}
										},
										{
											"id": 4647,
											"name": "webRTCIPHandlingPolicy",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Allow users to specify the media performance/privacy tradeoffs which impacts\nhow WebRTC traffic will be routed and how much local address information is\nexposed. This preference's value is of type IPHandlingPolicy, defaulting to\n<code>default</code>."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 15120,
													"character": 28
												}
											],
											"type": {
												"type": "reference",
												"id": 6124,
												"typeArguments": [
													{
														"type": "reference",
														"id": 4643,
														"name": "IPHandlingPolicy"
													}
												],
												"name": "types.ChromeSetting"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												4646,
												4647
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15103,
											"character": 25
										}
									]
								}
							}
						},
						{
							"id": 4648,
							"name": "services",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Settings that enable or disable features that require third-party network\nservices provided by Google and your default search provider."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15127,
									"character": 25
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 4649,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 4650,
											"name": "alternateErrorPagesEnabled",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "If enabled, Chrome uses a web service to help resolve navigation errors. This\npreference's value is a boolean, defaulting to <code>true</code>."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 15132,
													"character": 32
												}
											],
											"type": {
												"type": "reference",
												"id": 6124,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "boolean"
													}
												],
												"name": "types.ChromeSetting"
											}
										},
										{
											"id": 4652,
											"name": "autofillAddressEnabled",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "If enabled, Chrome offers to automatically fill in addresses and other form\ndata. This preference's value is a boolean, defaulting to <code>true</code>."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 15146,
													"character": 28
												}
											],
											"type": {
												"type": "reference",
												"id": 6124,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "boolean"
													}
												],
												"name": "types.ChromeSetting"
											}
										},
										{
											"id": 4653,
											"name": "autofillCreditCardEnabled",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "If enabled, Chrome offers to automatically fill in credit card forms. This\npreference's value is a boolean, defaulting to <code>true</code>."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 15152,
													"character": 31
												}
											],
											"type": {
												"type": "reference",
												"id": 6124,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "boolean"
													}
												],
												"name": "types.ChromeSetting"
											}
										},
										{
											"id": 4651,
											"name": "autofillEnabled",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "If enabled, Chrome offers to automatically fill in forms. This preference's\nvalue is a boolean, defaulting to <code>true</code>.",
												"tags": [
													{
														"tag": "deprecated",
														"text": "Please use privacy.services.autofillAddressEnabled and privacy.services.autofillCreditCardEnabled. This remains for backward compatibility in this release and will be removed in the future.\n"
													}
												]
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 15140,
													"character": 21
												}
											],
											"type": {
												"type": "reference",
												"id": 6124,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "boolean"
													}
												],
												"name": "types.ChromeSetting"
											}
										},
										{
											"id": 4654,
											"name": "passwordSavingEnabled",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "If enabled, the password manager will ask if you want to save passwords. This\npreference's value is a boolean, defaulting to <code>true</code>."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 15158,
													"character": 27
												}
											],
											"type": {
												"type": "reference",
												"id": 6124,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "boolean"
													}
												],
												"name": "types.ChromeSetting"
											}
										},
										{
											"id": 4655,
											"name": "safeBrowsingEnabled",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "If enabled, Chrome does its best to protect you from phishing and malware.\nThis preference's value is a boolean, defaulting to <code>true</code>."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 15164,
													"character": 25
												}
											],
											"type": {
												"type": "reference",
												"id": 6124,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "boolean"
													}
												],
												"name": "types.ChromeSetting"
											}
										},
										{
											"id": 4656,
											"name": "safeBrowsingExtendedReportingEnabled",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "If enabled, Chrome will send additional information to Google when\nSafeBrowsing blocks a page, such as the content of the blocked page. This\npreference's value is a boolean, defaulting to <code>false</code>."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 15171,
													"character": 42
												}
											],
											"type": {
												"type": "reference",
												"id": 6124,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "boolean"
													}
												],
												"name": "types.ChromeSetting"
											}
										},
										{
											"id": 4657,
											"name": "searchSuggestEnabled",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "If enabled, Chrome sends the text you type into the Omnibox to your default\nsearch engine, which provides predictions of websites and searches that are\nlikely completions of what you've typed so far. This preference's value is a\nboolean, defaulting to <code>true</code>."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 15179,
													"character": 26
												}
											],
											"type": {
												"type": "reference",
												"id": 6124,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "boolean"
													}
												],
												"name": "types.ChromeSetting"
											}
										},
										{
											"id": 4658,
											"name": "spellingServiceEnabled",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "If enabled, Chrome uses a web service to help correct spelling errors. This\npreference's value is a boolean, defaulting to <code>false</code>."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 15185,
													"character": 28
												}
											],
											"type": {
												"type": "reference",
												"id": 6124,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "boolean"
													}
												],
												"name": "types.ChromeSetting"
											}
										},
										{
											"id": 4659,
											"name": "translationServiceEnabled",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "If enabled, Chrome offers to translate pages that aren't in a language you\nread. This preference's value is a boolean, defaulting to <code>true</code>."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 15191,
													"character": 31
												}
											],
											"type": {
												"type": "reference",
												"id": 6124,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "boolean"
													}
												],
												"name": "types.ChromeSetting"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												4650,
												4652,
												4653,
												4651,
												4654,
												4655,
												4656,
												4657,
												4658,
												4659
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15127,
											"character": 26
										}
									]
								}
							}
						},
						{
							"id": 4660,
							"name": "websites",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Settings that determine what information Chrome makes available to websites."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15197,
									"character": 25
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 4661,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 4665,
											"name": "doNotTrackEnabled",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "If enabled, Chrome sends 'Do Not Track' (<code>DNT: 1</code>) header with\nyour requests. The value of this preference is of type boolean, and the\ndefault value is <code>false</code>."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 15225,
													"character": 23
												}
											],
											"type": {
												"type": "reference",
												"id": 6124,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "boolean"
													}
												],
												"name": "types.ChromeSetting"
											}
										},
										{
											"id": 4663,
											"name": "hyperlinkAuditingEnabled",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "If enabled, Chrome sends auditing pings when requested by a website\n(<code>&lt;a ping&gt;</code>). The value of this preference is of type\nboolean, and the default value is <code>true</code>."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 15210,
													"character": 30
												}
											],
											"type": {
												"type": "reference",
												"id": 6124,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "boolean"
													}
												],
												"name": "types.ChromeSetting"
											}
										},
										{
											"id": 4666,
											"name": "protectedContentEnabled",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "<strong>Available on Windows and ChromeOS only</strong>: If enabled, Chrome\nprovides a unique ID to plugins in order to run protected content. The value\nof this preference is of type boolean, and the default value is\n<code>true</code>."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 15233,
													"character": 29
												}
											],
											"type": {
												"type": "reference",
												"id": 6124,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "boolean"
													}
												],
												"name": "types.ChromeSetting"
											}
										},
										{
											"id": 4664,
											"name": "referrersEnabled",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "If enabled, Chrome sends <code>referer</code> headers with your requests.\nYes, the name of this preference doesn't match the misspelled header. No,\nwe're not going to change it. The value of this preference is of type\nboolean, and the default value is <code>true</code>."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 15218,
													"character": 22
												}
											],
											"type": {
												"type": "reference",
												"id": 6124,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "boolean"
													}
												],
												"name": "types.ChromeSetting"
											}
										},
										{
											"id": 4662,
											"name": "thirdPartyCookiesAllowed",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "If disabled, Chrome blocks third-party sites from setting cookies. The value\nof this preference is of type boolean, and the default value is\n<code>true</code>."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 15203,
													"character": 30
												}
											],
											"type": {
												"type": "reference",
												"id": 6124,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "boolean"
													}
												],
												"name": "types.ChromeSetting"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												4665,
												4663,
												4666,
												4664,
												4662
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15197,
											"character": 26
										}
									]
								}
							}
						}
					],
					"groups": [
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								4643
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								4644,
								4648,
								4660
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 15094,
							"character": 26
						}
					]
				},
				{
					"id": 4667,
					"name": "processes",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.processes</code> API to interact with the browser's\nprocesses.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "processes"
							},
							{
								"tag": "alpha",
								"text": ""
							},
							{
								"tag": "chrome-permission",
								"text": "processes\n"
							}
						]
					},
					"children": [
						{
							"id": 4697,
							"name": "Cache",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 4699,
									"name": "liveSize",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The part of the cache that is utilized, in bytes."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15274,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4698,
									"name": "size",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The size of the cache, in bytes."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15269,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4699,
										4698
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15265,
									"character": 26
								}
							]
						},
						{
							"id": 4700,
							"name": "Process",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 4707,
									"name": "cpu",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The most recent measurement of the process’s CPU usage, expressed as the\npercentage of a single CPU core used in total, by all of the process’s\nthreads. This gives a value from zero to CpuInfo.numOfProcessors*100, which\ncan exceed 100% in multi-threaded processes. Only available when receiving\nthe object as part of a callback from onUpdated or onUpdatedWithMemory."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15316,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4715,
									"name": "cssCache",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The most recent information about the CSS cache for the process. Only\navailable when receiving the object as part of a callback from onUpdated or\nonUpdatedWithMemory."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15372,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"id": 4697,
										"name": "Cache"
									}
								},
								{
									"id": 4701,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Unique ID of the process provided by the browser."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15281,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4713,
									"name": "imageCache",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The most recent information about the image cache for the process. Only\navailable when receiving the object as part of a callback from onUpdated or\nonUpdatedWithMemory."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15358,
											"character": 16
										}
									],
									"type": {
										"type": "reference",
										"id": 4697,
										"name": "Cache"
									}
								},
								{
									"id": 4710,
									"name": "jsMemoryAllocated",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The most recent measurement of the process JavaScript allocated memory, in\nbytes. Only available when receiving the object as part of a callback from\nonUpdated or onUpdatedWithMemory."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15337,
											"character": 23
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4711,
									"name": "jsMemoryUsed",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The most recent measurement of the process JavaScript memory used, in bytes.\nOnly available when receiving the object as part of a callback from onUpdated\nor onUpdatedWithMemory."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15344,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4705,
									"name": "naclDebugPort",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The debugging port for Native Client processes. Zero for other process types\nand for NaCl processes that do not have debugging enabled."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15302,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4708,
									"name": "network",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The most recent measurement of the process network usage, in bytes per\nsecond. Only available when receiving the object as part of a callback from\nonUpdated or onUpdatedWithMemory."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15323,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4702,
									"name": "osProcessId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The ID of the process, as provided by the OS."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15286,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4709,
									"name": "privateMemory",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The most recent measurement of the process private memory usage, in bytes.\nOnly available when receiving the object as part of a callback from\nonUpdatedWithMemory or getProcessInfo with the includeMemory flag."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15330,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4704,
									"name": "profile",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The profile which the process is associated with."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15296,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4714,
									"name": "scriptCache",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The most recent information about the script cache for the process. Only\navailable when receiving the object as part of a callback from onUpdated or\nonUpdatedWithMemory."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15365,
											"character": 17
										}
									],
									"type": {
										"type": "reference",
										"id": 4697,
										"name": "Cache"
									}
								},
								{
									"id": 4712,
									"name": "sqliteMemory",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The most recent measurement of the process’s SQLite memory usage, in bytes.\nOnly available when receiving the object as part of a callback from onUpdated\nor onUpdatedWithMemory."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15351,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4706,
									"name": "tasks",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Array of TaskInfos representing the tasks running on this process."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15307,
											"character": 11
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 4694,
											"name": "TaskInfo"
										}
									}
								},
								{
									"id": 4703,
									"name": "type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The type of process."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15291,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 4693,
										"name": "ProcessType"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4707,
										4715,
										4701,
										4713,
										4710,
										4711,
										4705,
										4708,
										4702,
										4709,
										4704,
										4714,
										4712,
										4706,
										4703
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15277,
									"character": 28
								}
							]
						},
						{
							"id": 4694,
							"name": "TaskInfo",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 4696,
									"name": "tabId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Optional tab ID, if this task represents a tab running on a renderer process."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15262,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4695,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The title of the task."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15257,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4696,
										4695
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15253,
									"character": 29
								}
							]
						},
						{
							"id": 4693,
							"name": "ProcessType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The types of the browser processes."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15251,
									"character": 27
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "browser"
									},
									{
										"type": "literal",
										"value": "renderer"
									},
									{
										"type": "literal",
										"value": "extension"
									},
									{
										"type": "literal",
										"value": "notification"
									},
									{
										"type": "literal",
										"value": "plugin"
									},
									{
										"type": "literal",
										"value": "worker"
									},
									{
										"type": "literal",
										"value": "nacl"
									},
									{
										"type": "literal",
										"value": "service_worker"
									},
									{
										"type": "literal",
										"value": "utility"
									},
									{
										"type": "literal",
										"value": "gpu"
									},
									{
										"type": "literal",
										"value": "other"
									}
								]
							}
						},
						{
							"id": 4730,
							"name": "onCreated",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired each time a process is created, providing the corrseponding Process\nobject."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15453,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4731,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 15453,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 4732,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 4733,
															"name": "process",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Details of the process that was created. Metrics requiring aggregation over time will not be populated in the object.\n"
															},
															"type": {
																"type": "reference",
																"id": 4700,
																"name": "Process"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4738,
							"name": "onExited",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired each time a process is terminated, providing the type of exit."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15478,
									"character": 25
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4739,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 15478,
													"character": 47
												}
											],
											"signatures": [
												{
													"id": 4740,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 4741,
															"name": "processId",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "The ID of the process that exited."
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 4742,
															"name": "exitType",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "The type of exit that occurred for the process - normal, abnormal, killed, crashed. Only available for renderer processes."
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 4743,
															"name": "exitCode",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "The exit code if the process exited abnormally. Only available for renderer processes.\n"
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4734,
							"name": "onUnresponsive",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired each time a process becomes unresponsive, providing the corrseponding\nProcess object."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15466,
									"character": 31
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4735,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 15466,
													"character": 53
												}
											],
											"signatures": [
												{
													"id": 4736,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 4737,
															"name": "process",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Details of the unresponsive process. Metrics requiring aggregation over time will not be populated in the object. Only available for renderer processes.\n"
															},
															"type": {
																"type": "reference",
																"id": 4700,
																"name": "Process"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4716,
							"name": "onUpdated",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired each time the Task Manager updates its process statistics, providing\nthe dictionary of updated Process objects, indexed by process ID."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15424,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4717,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 15424,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 4718,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 4719,
															"name": "processes",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "A dictionary of updated {@link Process} objects for each live process in the browser, indexed by process ID.  Metrics requiring aggregation over time will be populated in each Process object.\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 4720,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 15429,
																			"character": 18
																		}
																	],
																	"indexSignature": {
																		"id": 4721,
																		"name": "__index",
																		"kind": 8192,
																		"kindString": "Index signature",
																		"flags": {},
																		"parameters": [
																			{
																				"id": 4722,
																				"name": "name",
																				"kind": 32768,
																				"flags": {},
																				"type": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			}
																		],
																		"type": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4723,
							"name": "onUpdatedWithMemory",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired each time the Task Manager updates its process statistics, providing\nthe dictionary of updated Process objects, indexed by process ID. Identical\nto onUpdate, with the addition of memory usage details included in each\nProcess object. Note, collecting memory usage information incurs extra CPU\nusage and should only be listened for when needed."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15440,
									"character": 36
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4724,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 15440,
													"character": 58
												}
											],
											"signatures": [
												{
													"id": 4725,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 4726,
															"name": "processes",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "A dictionary of updated {@link Process} objects for each live process in the browser, indexed by process ID.  Memory usage details will be included in each Process object.\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 4727,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 15445,
																			"character": 18
																		}
																	],
																	"indexSignature": {
																		"id": 4728,
																		"name": "__index",
																		"kind": 8192,
																		"kindString": "Index signature",
																		"flags": {},
																		"parameters": [
																			{
																				"id": 4729,
																				"name": "name",
																				"kind": 32768,
																				"flags": {},
																				"type": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			}
																		],
																		"type": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4668,
							"name": "getProcessIdForTab",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15382,
									"character": 38
								}
							],
							"signatures": [
								{
									"id": 4669,
									"name": "getProcessIdForTab",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the ID of the renderer process for the specified tab."
									},
									"parameters": [
										{
											"id": 4670,
											"name": "tabId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ID of the tab for which the renderer process ID is to be returned."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 4671,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A callback to return the ID of the renderer process of a tab."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4672,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 15384,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 4673,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4674,
																	"name": "processId",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "Process ID of the tab's renderer process.\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4682,
							"name": "getProcessInfo",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15412,
									"character": 34
								}
							],
							"signatures": [
								{
									"id": 4683,
									"name": "getProcessInfo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieves the process information for each process ID specified."
									},
									"parameters": [
										{
											"id": 4684,
											"name": "processIds",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The list of process IDs or single process ID for which to return the process information. An empty list indicates all processes are requested."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "number"
														}
													}
												]
											}
										},
										{
											"id": 4685,
											"name": "includeMemory",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "True if detailed memory usage is required. Note, collecting memory usage information incurs extra CPU usage and should only be queried for when needed."
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 4686,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A callback called when the processes information is collected."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4687,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 15415,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 4688,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4689,
																	"name": "processes",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "A dictionary of {@link Process} objects for each requested process that is a live child process of the current browser process, indexed by process ID. Metrics requiring aggregation over time will not be populated in each Process object.\n"
																	},
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 4690,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 15416,
																					"character": 18
																				}
																			],
																			"indexSignature": {
																				"id": 4691,
																				"name": "__index",
																				"kind": 8192,
																				"kindString": "Index signature",
																				"flags": {},
																				"parameters": [
																					{
																						"id": 4692,
																						"name": "name",
																						"kind": 32768,
																						"flags": {},
																						"type": {
																							"type": "intrinsic",
																							"name": "string"
																						}
																					}
																				],
																				"type": {
																					"type": "intrinsic",
																					"name": "any"
																				}
																			}
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4675,
							"name": "terminate",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15397,
									"character": 29
								}
							],
							"signatures": [
								{
									"id": 4676,
									"name": "terminate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Terminates the specified renderer process. Equivalent to visiting\nabout:crash, but without changing the tab's URL."
									},
									"parameters": [
										{
											"id": 4677,
											"name": "processId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ID of the process to be terminated."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 4678,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "A callback to report the status of the termination."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4679,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 15399,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 4680,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4681,
																	"name": "didTerminate",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "True if terminating the process was successful, and false otherwise.\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "boolean"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								4697,
								4700,
								4694
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								4693
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								4730,
								4738,
								4734,
								4716,
								4723
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								4668,
								4682,
								4675
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 15247,
							"character": 28
						}
					]
				},
				{
					"id": 4744,
					"name": "proxy",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.proxy</code> API to manage Chrome's proxy settings. This\nAPI relies on the <a href='types#ChromeSetting'>ChromeSetting prototype of\nthe type API</a> for getting and setting the proxy configuration.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "proxy"
							},
							{
								"tag": "chrome-platform",
								"text": "chromeos"
							},
							{
								"tag": "chrome-permission",
								"text": "proxy\n"
							}
						]
					},
					"children": [
						{
							"id": 4758,
							"name": "PacScript",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "An object holding proxy auto-config information. Exactly one of the fields\nshould be non-empty."
							},
							"children": [
								{
									"id": 4760,
									"name": "data",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "A PAC script."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15581,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4761,
									"name": "mandatory",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "If true, an invalid PAC script will prevent the network stack from falling\nback to direct connections. Defaults to false."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15587,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 4759,
									"name": "url",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "URL of the PAC file to be used."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15576,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4760,
										4761,
										4759
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15572,
									"character": 30
								}
							]
						},
						{
							"id": 4762,
							"name": "ProxyConfig",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "An object encapsulating a complete proxy configuration."
							},
							"children": [
								{
									"id": 4765,
									"name": "mode",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "'direct' = Never use a proxy<br>'auto_detect' = Auto detect proxy\nsettings<br>'pac_script' = Use specified PAC script<br>'fixed_servers' =\nManually specify proxy servers<br>'system' = Use system proxy settings"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15611,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 4746,
										"name": "Mode"
									}
								},
								{
									"id": 4764,
									"name": "pacScript",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The proxy auto-config (PAC) script for this configuration. Use this for\n'pac_script' mode."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15604,
											"character": 15
										}
									],
									"type": {
										"type": "reference",
										"id": 4758,
										"name": "PacScript"
									}
								},
								{
									"id": 4763,
									"name": "rules",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The proxy rules describing this configuration. Use this for 'fixed_servers'\nmode."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15598,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"id": 4751,
										"name": "ProxyRules"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4765,
										4764,
										4763
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15593,
									"character": 32
								}
							]
						},
						{
							"id": 4751,
							"name": "ProxyRules",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "An object encapsulating the set of proxy rules for all protocols. Use either\n'singleProxy' or (a subset of) 'proxyForHttp', 'proxyForHttps', 'proxyForFtp'\nand 'fallbackProxy'."
							},
							"children": [
								{
									"id": 4757,
									"name": "bypassList",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "List of servers to connect to without a proxy server."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15565,
											"character": 16
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 4756,
									"name": "fallbackProxy",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The proxy server to be used for everthing else or if any of the specific\nproxyFor... is not specified."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15560,
											"character": 19
										}
									],
									"type": {
										"type": "reference",
										"id": 4747,
										"name": "ProxyServer"
									}
								},
								{
									"id": 4755,
									"name": "proxyForFtp",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The proxy server to be used for FTP requests."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15554,
											"character": 17
										}
									],
									"type": {
										"type": "reference",
										"id": 4747,
										"name": "ProxyServer"
									}
								},
								{
									"id": 4753,
									"name": "proxyForHttp",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The proxy server to be used for HTTP requests."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15544,
											"character": 18
										}
									],
									"type": {
										"type": "reference",
										"id": 4747,
										"name": "ProxyServer"
									}
								},
								{
									"id": 4754,
									"name": "proxyForHttps",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The proxy server to be used for HTTPS requests."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15549,
											"character": 19
										}
									],
									"type": {
										"type": "reference",
										"id": 4747,
										"name": "ProxyServer"
									}
								},
								{
									"id": 4752,
									"name": "singleProxy",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The proxy server to be used for all per-URL requests (that is http, https,\nand ftp)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15539,
											"character": 17
										}
									],
									"type": {
										"type": "reference",
										"id": 4747,
										"name": "ProxyServer"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4757,
										4756,
										4755,
										4753,
										4754,
										4752
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15534,
									"character": 31
								}
							]
						},
						{
							"id": 4747,
							"name": "ProxyServer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "An object encapsulating a single proxy server's specification."
							},
							"children": [
								{
									"id": 4749,
									"name": "host",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The hostname or IP address of the proxy server. Hostnames must be in ASCII\n(in Punycode format). IDNA is not supported, yet."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15521,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4750,
									"name": "port",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The port of the proxy server. Defaults to a port that depends on the scheme."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15526,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4748,
									"name": "scheme",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The scheme (protocol) of the proxy server itself. Defaults to 'http'."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15515,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 4745,
										"name": "Scheme"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4749,
										4750,
										4748
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15511,
									"character": 32
								}
							]
						},
						{
							"id": 4746,
							"name": "Mode",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15506,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "direct"
									},
									{
										"type": "literal",
										"value": "auto_detect"
									},
									{
										"type": "literal",
										"value": "pac_script"
									},
									{
										"type": "literal",
										"value": "fixed_servers"
									},
									{
										"type": "literal",
										"value": "system"
									}
								]
							}
						},
						{
							"id": 4745,
							"name": "Scheme",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15504,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "http"
									},
									{
										"type": "literal",
										"value": "https"
									},
									{
										"type": "literal",
										"value": "quic"
									},
									{
										"type": "literal",
										"value": "socks4"
									},
									{
										"type": "literal",
										"value": "socks5"
									}
								]
							}
						},
						{
							"id": 4767,
							"name": "onProxyError",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Notifies about proxy errors."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15622,
									"character": 29
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4768,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 15622,
													"character": 51
												}
											],
											"signatures": [
												{
													"id": 4769,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 4770,
															"name": "details",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 4771,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 4774,
																			"name": "details",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "Additional details about the error such as a JavaScript runtime error."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 15642,
																					"character": 17
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 4773,
																			"name": "error",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The error description."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 15637,
																					"character": 15
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 4772,
																			"name": "fatal",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "If true, the error was fatal and the network transaction was aborted.\nOtherwise, a direct connection is used instead."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 15632,
																					"character": 15
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "boolean"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				4774,
																				4773,
																				4772
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 15627,
																			"character": 16
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4766,
							"name": "settings",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Proxy settings to be used. The value of this setting is a ProxyConfig object."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15617,
									"character": 25
								}
							],
							"type": {
								"type": "reference",
								"id": 6124,
								"typeArguments": [
									{
										"type": "reference",
										"id": 4762,
										"name": "ProxyConfig"
									}
								],
								"name": "types.ChromeSetting"
							}
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								4758,
								4762,
								4751,
								4747
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								4746,
								4745
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								4767,
								4766
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 15503,
							"character": 24
						}
					]
				},
				{
					"id": 4775,
					"name": "runtime",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.runtime</code> API to retrieve the background page,\nreturn details about the manifest, and listen for and respond to events in\nthe app or extension lifecycle. You can also use this API to convert the\nrelative path of URLs to fully-qualified URLs.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "runtime\n"
							}
						]
					},
					"children": [
						{
							"id": 4891,
							"name": "MessageSender",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "An object containing information about the script context that sent a message\nor request."
							},
							"children": [
								{
									"id": 4893,
									"name": "frameId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The <a href='webNavigation#frame_ids'>frame</a> that opened the connection. 0\nfor top-level frames, positive for child frames. This will only be set when\n<code>tab</code> is set."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15730,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4894,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The ID of the extension or app that opened the connection, if any."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15735,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4896,
									"name": "nativeApplication",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The name of the native application that opened the connection, if any."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15746,
											"character": 23
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4898,
									"name": "origin",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The origin of the page or frame that opened the connection. It can vary from\nthe url property (e.g., about:blank) or can be opaque (e.g., sandboxed\niframes). This is useful for identifying if the origin can be trusted if we\ncan't immediately tell from the URL."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15760,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4892,
									"name": "tab",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The {@link tabs.Tab} which opened the connection, if any. This property will\n<strong>only</strong> be present when the connection was opened from a tab\n(including content scripts), and <strong>only</strong> if the receiver is an\nextension, not an app."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15723,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"id": 5892,
										"name": "Tab"
									}
								},
								{
									"id": 4897,
									"name": "tlsChannelId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The TLS channel ID of the page or frame that opened the connection, if\nrequested by the extension or app, and if available."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15752,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4895,
									"name": "url",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The URL of the page or frame that opened the connection. If the sender is in\nan iframe, it will be iframe's URL not the URL of the page which hosts it."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15741,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4893,
										4894,
										4896,
										4898,
										4892,
										4897,
										4895
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15716,
									"character": 34
								}
							]
						},
						{
							"id": 4902,
							"name": "PlatformInfo",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "An object containing information about the current platform."
							},
							"children": [
								{
									"id": 4904,
									"name": "arch",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The machine's processor architecture."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15791,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 4900,
										"name": "PlatformArch"
									}
								},
								{
									"id": 4905,
									"name": "nacl_arch",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The native client architecture. This may be different from arch on some\nplatforms."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15797,
											"character": 15
										}
									],
									"type": {
										"type": "reference",
										"id": 4901,
										"name": "PlatformNaclArch"
									}
								},
								{
									"id": 4903,
									"name": "os",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The operating system chrome is running on."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15786,
											"character": 8
										}
									],
									"type": {
										"type": "reference",
										"id": 4899,
										"name": "PlatformOs"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4904,
										4905,
										4903
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15782,
									"character": 33
								}
							]
						},
						{
							"id": 4873,
							"name": "Port",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "An object which allows two way communication with other pages. See <a\nhref=\"messaging#connect\">Long-lived connections</a> for more information."
							},
							"children": [
								{
									"id": 4875,
									"name": "disconnect",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Immediately disconnect the port. Calling <code>disconnect()</code> on an\nalready-disconnected port has no effect. When a port is disconnected, no new\nevents will be dispatched to this port."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15674,
											"character": 16
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 4876,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 4877,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 4874,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The name of the port, as specified in the call to {@link runtime.connect}."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15667,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4878,
									"name": "onDisconnect",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Fired when the port is disconnected from the other end(s). {@link\nruntime.lastError} may be set if the port was disconnected by an error. If\nthe port is closed via {@link Port.disconnect disconnect}, then this event is\n<em>only</em> fired on the other end. This event is fired at most once (see\nalso <a href=\"messaging#port-lifetime\">Port lifetime</a>). The first and only\nparameter to the event handler is this disconnected port."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15684,
											"character": 18
										}
									],
									"type": {
										"type": "reference",
										"id": 2537,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 4879,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 4880,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 4881,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {}
																}
															}
														}
													]
												}
											}
										],
										"name": "Event"
									}
								},
								{
									"id": 4882,
									"name": "onMessage",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "This event is fired when {@link Port.postMessage postMessage} is called by\nthe other end of the port. The first parameter is the message, the second\nparameter is the port that received the message."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15691,
											"character": 15
										}
									],
									"type": {
										"type": "reference",
										"id": 2537,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 4883,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 4884,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 4885,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {}
																}
															}
														}
													]
												}
											}
										],
										"name": "Event"
									}
								},
								{
									"id": 4886,
									"name": "postMessage",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Send a message to the other end of the port. If the port is disconnected, an\nerror is thrown.",
										"tags": [
											{
												"tag": "param",
												"text": "The message to send. This object should be JSON-ifiable.\n",
												"param": "postMessage.message"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15699,
											"character": 17
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 4887,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 4888,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 4889,
															"name": "message",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 4890,
									"name": "sender",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "This property will <b>only</b> be present on ports passed to {@link\nruntime.onConnect onConnect} / {@link runtime.onConnectExternal\nonConnectExternal} / {@link runtime.onConnectExternal onConnectNative}\nlisteners."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 15709,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 4891,
										"name": "MessageSender"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4875,
										4874,
										4878,
										4882,
										4886,
										4890
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15663,
									"character": 25
								}
							]
						},
						{
							"id": 4907,
							"name": "OnInstalledReason",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The reason that this event is being dispatched."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15808,
									"character": 33
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "install"
									},
									{
										"type": "literal",
										"value": "update"
									},
									{
										"type": "literal",
										"value": "chrome_update"
									},
									{
										"type": "literal",
										"value": "shared_module_update"
									}
								]
							}
						},
						{
							"id": 4908,
							"name": "OnRestartRequiredReason",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The reason that the event is being dispatched. 'app_update' is used when the\nrestart is needed because the application is updated to a newer version.\n'os_update' is used when the restart is needed because the browser/OS is\nupdated to a newer version. 'periodic' is used when the system runs for more\nthan the permitted uptime set in the enterprise policy."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15817,
									"character": 39
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "app_update"
									},
									{
										"type": "literal",
										"value": "os_update"
									},
									{
										"type": "literal",
										"value": "periodic"
									}
								]
							}
						},
						{
							"id": 4900,
							"name": "PlatformArch",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The machine's processor architecture."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15771,
									"character": 28
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "arm"
									},
									{
										"type": "literal",
										"value": "arm64"
									},
									{
										"type": "literal",
										"value": "x86-32"
									},
									{
										"type": "literal",
										"value": "x86-64"
									},
									{
										"type": "literal",
										"value": "mips"
									},
									{
										"type": "literal",
										"value": "mips64"
									}
								]
							}
						},
						{
							"id": 4901,
							"name": "PlatformNaclArch",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The native client architecture. This may be different from arch on some\nplatforms."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15777,
									"character": 32
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "arm"
									},
									{
										"type": "literal",
										"value": "x86-32"
									},
									{
										"type": "literal",
										"value": "x86-64"
									},
									{
										"type": "literal",
										"value": "mips"
									},
									{
										"type": "literal",
										"value": "mips64"
									}
								]
							}
						},
						{
							"id": 4899,
							"name": "PlatformOs",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The operating system chrome is running on."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15766,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "mac"
									},
									{
										"type": "literal",
										"value": "win"
									},
									{
										"type": "literal",
										"value": "android"
									},
									{
										"type": "literal",
										"value": "cros"
									},
									{
										"type": "literal",
										"value": "linux"
									},
									{
										"type": "literal",
										"value": "openbsd"
									}
								]
							}
						},
						{
							"id": 4906,
							"name": "RequestUpdateCheckStatus",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "Result of the update check."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15803,
									"character": 40
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "throttled"
									},
									{
										"type": "literal",
										"value": "no_update"
									},
									{
										"type": "literal",
										"value": "update_available"
									}
								]
							}
						},
						{
							"id": 4912,
							"name": "id",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "The ID of the extension/app."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15832,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 4909,
							"name": "lastError",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isLet": true
							},
							"comment": {
								"shortText": "This will be defined during an API method callback if there was an error"
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15822,
									"character": 24
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4910,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 4911,
													"name": "message",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Details about the error which occurred."
													},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 15826,
															"character": 13
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														4911
													]
												}
											],
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 15822,
													"character": 25
												}
											]
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 4938,
							"name": "onBrowserUpdateAvailable",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a Chrome update is available, but isn't installed immediately\nbecause a browser restart is required.",
								"tags": [
									{
										"tag": "deprecated",
										"text": "Please use {@link runtime.onRestartRequired}.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16187,
									"character": 41
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4939,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 16187,
													"character": 63
												}
											],
											"signatures": [
												{
													"id": 4940,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4941,
							"name": "onConnect",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a connection is made from either an extension process or a content\nscript (by {@link runtime.connect})."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16195,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4942,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 16195,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 4943,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 4944,
															"name": "port",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reference",
																"id": 4873,
																"name": "Port"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4945,
							"name": "onConnectExternal",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a connection is made from another extension (by {@link\nruntime.connect})."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16208,
									"character": 34
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4946,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 16208,
													"character": 56
												}
											],
											"signatures": [
												{
													"id": 4947,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 4948,
															"name": "port",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reference",
																"id": 4873,
																"name": "Port"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4949,
							"name": "onConnectNative",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a connection is made from a native application. Currently only\nsupported on Chrome OS."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16221,
									"character": 32
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4950,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 16221,
													"character": 54
												}
											],
											"signatures": [
												{
													"id": 4951,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 4952,
															"name": "port",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reference",
																"id": 4873,
																"name": "Port"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4916,
							"name": "onInstalled",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when the extension is first installed, when the extension is updated to\na new version, and when Chrome is updated to a new version."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16109,
									"character": 28
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4917,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 16109,
													"character": 50
												}
											],
											"signatures": [
												{
													"id": 4918,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 4919,
															"name": "details",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 4920,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 4923,
																			"name": "id",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "Indicates the ID of the imported shared module extension which updated. This\nis present only if 'reason' is 'shared_module_update'."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 16130,
																					"character": 12
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 4922,
																			"name": "previousVersion",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "Indicates the previous version of the extension, which has just been updated.\nThis is present only if 'reason' is 'update'."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 16124,
																					"character": 25
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 4921,
																			"name": "reason",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The reason that this event is being dispatched."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 16118,
																					"character": 16
																				}
																			],
																			"type": {
																				"type": "reference",
																				"id": 4907,
																				"name": "OnInstalledReason"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				4923,
																				4922,
																				4921
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 16114,
																			"character": 16
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4953,
							"name": "onMessage",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a message is sent from either an extension process (by {@link\nruntime.sendMessage}) or a content script (by {@link tabs.sendMessage})."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16234,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4954,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {
												"returns": "Return true from the event listener if you wish to call <code>sendResponse</code> after the event listener returns.\n"
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 16234,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 4955,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"returns": "Return true from the event listener if you wish to call <code>sendResponse</code> after the event listener returns.\n"
													},
													"parameters": [
														{
															"id": 4956,
															"name": "message",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "The message sent by the calling script."
															},
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 4957,
															"name": "sender",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "reference",
																"id": 4891,
																"name": "MessageSender"
															}
														},
														{
															"id": 4958,
															"name": "sendResponse",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 4959,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 16243,
																			"character": 21
																		}
																	],
																	"signatures": [
																		{
																			"id": 4960,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4961,
							"name": "onMessageExternal",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a message is sent from another extension/app (by {@link\nruntime.sendMessage}). Cannot be used in a content script."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16251,
									"character": 34
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4962,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {
												"returns": "Return true from the event listener if you wish to call <code>sendResponse</code> after the event listener returns.\n"
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 16251,
													"character": 56
												}
											],
											"signatures": [
												{
													"id": 4963,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"returns": "Return true from the event listener if you wish to call <code>sendResponse</code> after the event listener returns.\n"
													},
													"parameters": [
														{
															"id": 4964,
															"name": "message",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "The message sent by the calling script."
															},
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 4965,
															"name": "sender",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "reference",
																"id": 4891,
																"name": "MessageSender"
															}
														},
														{
															"id": 4966,
															"name": "sendResponse",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 4967,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 16260,
																			"character": 21
																		}
																	],
																	"signatures": [
																		{
																			"id": 4968,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4969,
							"name": "onRestartRequired",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when an app or the device that it runs on needs to be restarted. The\napp should close all its windows at its earliest convenient time to let the\nrestart to happen. If the app does nothing, a restart will be enforced after\na 24-hour grace period has passed. Currently, this event is only fired for\nChrome OS kiosk apps."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16271,
									"character": 34
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4970,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 16271,
													"character": 56
												}
											],
											"signatures": [
												{
													"id": 4971,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 4972,
															"name": "reason",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "The reason that the event is being dispatched.\n"
															},
															"type": {
																"type": "reference",
																"id": 4908,
																"name": "OnRestartRequiredReason"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4913,
							"name": "onStartup",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a profile that has this extension installed first starts up. This\nevent is not fired when an incognito profile is started, even if this\nextension is operating in 'split' incognito mode."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16101,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4914,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 16101,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 4915,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4924,
							"name": "onSuspend",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Sent to the event page just before it is unloaded. This gives the extension\nopportunity to do some clean up. Note that since the page is unloading, any\nasynchronous operations started while handling this event are not guaranteed\nto complete. If more activity for the event page occurs before it gets\nunloaded the onSuspendCanceled event will be sent and the page won't be\nunloaded."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16143,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4925,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 16143,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 4926,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4927,
							"name": "onSuspendCanceled",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Sent after onSuspend to indicate that the app won't be unloaded after all."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16150,
									"character": 34
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4928,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 16150,
													"character": 56
												}
											],
											"signatures": [
												{
													"id": 4929,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4930,
							"name": "onUpdateAvailable",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when an update is available, but isn't installed immediately because\nthe app is currently running. If you do nothing, the update will be installed\nthe next time the background page gets unloaded, if you want it to be\ninstalled sooner you can explicitly call chrome.runtime.reload(). If your\nextension is using a persistent background page, the background page of\ncourse never gets unloaded, so unless you call chrome.runtime.reload()\nmanually in response to this event the update will not get installed until\nthe next time chrome itself restarts. If no handlers are listening for this\nevent, and your extension has a persistent background page, it behaves as if\nchrome.runtime.reload() is called in response to this event."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16166,
									"character": 34
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4931,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 16166,
													"character": 56
												}
											],
											"signatures": [
												{
													"id": 4932,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 4933,
															"name": "details",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "The manifest details of the available update.\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 4934,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 4935,
																			"name": "version",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The version number of the available update."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 16175,
																					"character": 17
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				4935
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 16171,
																			"character": 16
																		}
																	],
																	"indexSignature": {
																		"id": 4936,
																		"name": "__index",
																		"kind": 8192,
																		"kindString": "Index signature",
																		"flags": {},
																		"parameters": [
																			{
																				"id": 4937,
																				"name": "name",
																				"kind": 32768,
																				"flags": {},
																				"type": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			}
																		],
																		"type": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 4820,
							"name": "connect",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15968,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 4821,
									"name": "connect",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Attempts to connect to connect listeners within an extension/app (such as the\nbackground page), or other extensions/apps. This is useful for content\nscripts connecting to their extension processes, inter-app/extension\ncommunication, and <a href=\"manifest/externally_connectable.html\">web\nmessaging</a>. Note that this does not connect to any listeners in a content\nscript. Extensions may connect to content scripts embedded in tabs via {@link\ntabs.connect}.",
										"returns": "Port through which messages can be sent and received. The port's {@link Port onDisconnect} event is fired if the extension/app does not exist.\n"
									},
									"parameters": [
										{
											"id": 4822,
											"name": "extensionId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The ID of the extension or app to connect to. If omitted, a connection will be attempted with your own extension. Required if sending messages from a web page for <a href=\"manifest/externally_connectable.html\">web messaging</a>."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 4823,
											"name": "connectInfo",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4824,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 4826,
															"name": "includeTlsChannelId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether the TLS channel ID will be passed into onConnectExternal for\nprocesses that are listening for the connection event."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 15981,
																	"character": 27
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 4825,
															"name": "name",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Will be passed into onConnect for processes that are listening for the\nconnection event."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 15975,
																	"character": 12
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																4826,
																4825
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 15970,
															"character": 19
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 4873,
										"name": "Port"
									}
								}
							]
						},
						{
							"id": 4827,
							"name": "connectNative",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15992,
									"character": 33
								}
							],
							"signatures": [
								{
									"id": 4828,
									"name": "connectNative",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Connects to a native application in the host machine. See <a\nhref=\"nativeMessaging\">Native Messaging</a> for more information.",
										"returns": "Port through which messages can be sent and received with the application\n"
									},
									"parameters": [
										{
											"id": 4829,
											"name": "application",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the registered application to connect to."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 4873,
										"name": "Port"
									}
								}
							]
						},
						{
							"id": 4776,
							"name": "getBackgroundPage",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15843,
									"character": 37
								}
							],
							"signatures": [
								{
									"id": 4777,
									"name": "getBackgroundPage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieves the JavaScript 'window' object for the background page running\ninside the current extension/app. If the background page is an event page,\nthe system will ensure it is loaded before calling the callback. If there is\nno background page, an error is set."
									},
									"parameters": [
										{
											"id": 4778,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4779,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 15844,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 4780,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4781,
																	"name": "backgroundPage",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"text": "The JavaScript 'window' object for the background page.\n"
																	},
																	"type": {
																		"type": "reference",
																		"name": "Window"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4787,
							"name": "getManifest",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15873,
									"character": 31
								}
							],
							"signatures": [
								{
									"id": 4788,
									"name": "getManifest",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns details about the app or extension from the manifest. The object\nreturned is a serialization of the full <a href=\"manifest.html\">manifest\nfile</a>.",
										"returns": "The manifest details.\n"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 4789,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 15873,
													"character": 34
												}
											],
											"indexSignature": {
												"id": 4790,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 4791,
														"name": "name",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									}
								}
							]
						},
						{
							"id": 4867,
							"name": "getPackageDirectoryEntry",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16090,
									"character": 44
								}
							],
							"signatures": [
								{
									"id": 4868,
									"name": "getPackageDirectoryEntry",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a DirectoryEntry for the package directory."
									},
									"parameters": [
										{
											"id": 4869,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4870,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 16091,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 4871,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4872,
																	"name": "directoryEntry",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 2,
																		"name": "DirectoryEntry"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4861,
							"name": "getPlatformInfo",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16078,
									"character": 35
								}
							],
							"signatures": [
								{
									"id": 4862,
									"name": "getPlatformInfo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns information about the current platform."
									},
									"parameters": [
										{
											"id": 4863,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Called with results"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4864,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 16079,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 4865,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4866,
																	"name": "platformInfo",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 4902,
																		"name": "PlatformInfo"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4792,
							"name": "getURL",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15882,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 4793,
									"name": "getURL",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Converts a relative path within an app/extension install directory to a\nfully-qualified URL.",
										"returns": "The fully-qualified URL to the resource.\n"
									},
									"parameters": [
										{
											"id": 4794,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A path to a resource within an app/extension expressed relative to its install directory."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							]
						},
						{
							"id": 4782,
							"name": "openOptionsPage",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15862,
									"character": 35
								}
							],
							"signatures": [
								{
									"id": 4783,
									"name": "openOptionsPage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "<p>Open your Extension's options page, if possible.</p><p>The precise\nbehavior may depend on your manifest's <code><a\nhref=\"optionsV2\">options_ui</a></code> or <code><a\nhref=\"options\">options_page</a></code> key, or what Chrome happens to support\nat the time. For example, the page may be opened in a new tab, within\nchrome://extensions, within an App, or it may just focus an open options\npage. It will never cause the caller page to reload.</p><p>If your Extension\ndoes not declare an options page, or Chrome failed to create one for some\nother reason, the callback will set {@link lastError}.</p>"
									},
									"parameters": [
										{
											"id": 4784,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4785,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 15863,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 4786,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4801,
							"name": "reload",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15903,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 4802,
									"name": "reload",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Reloads the app or extension. This method is not supported in kiosk mode. For\nkiosk mode, use chrome.runtime.restart() method."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4803,
							"name": "requestUpdateCheck",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15922,
									"character": 38
								}
							],
							"signatures": [
								{
									"id": 4804,
									"name": "requestUpdateCheck",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "<p>Requests an immediate update check be done for this app/extension.</p>\n<p><b>Important</b>: Most extensions/apps should <b>not</b> use this method,\nsince chrome already does automatic checks every few hours, and you can\nlisten for the {@link runtime.onUpdateAvailable} event without needing to\ncall requestUpdateCheck.</p><p>This method is only appropriate to call in\nvery limited circumstances, such as if your extension/app talks to a backend\nservice, and the backend service has determined that the client extension/app\nversion is very far out of date and you'd like to prompt a user to update.\nMost other uses of requestUpdateCheck, such as calling it unconditionally\nbased on a repeating timer, probably only serve to waste client, network, and\nserver resources.</p>"
									},
									"parameters": [
										{
											"id": 4805,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4806,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 15923,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 4807,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4808,
																	"name": "status",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "Result of the update check."
																	},
																	"type": {
																		"type": "reference",
																		"id": 4906,
																		"name": "RequestUpdateCheckStatus"
																	}
																},
																{
																	"id": 4809,
																	"name": "details",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"text": "If an update is available, this contains more information about the available update.\n"
																	},
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 4810,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 4811,
																					"name": "version",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"comment": {
																						"shortText": "The version of the available update."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 15929,
																							"character": 17
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "string"
																					}
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						4811
																					]
																				}
																			],
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 15925,
																					"character": 17
																				}
																			]
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4812,
							"name": "restart",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15938,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 4813,
									"name": "restart",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Restart the ChromeOS device when the app runs in kiosk mode. Otherwise, it's\nno-op."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4814,
							"name": "restartAfterDelay",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15950,
									"character": 37
								}
							],
							"signatures": [
								{
									"id": 4815,
									"name": "restartAfterDelay",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Restart the ChromeOS device when the app runs in kiosk mode after the given\nseconds. If called again before the time ends, the reboot will be delayed. If\ncalled with a value of -1, the reboot will be cancelled. It's a no-op in\nnon-kiosk mode. It's only allowed to be called repeatedly by the first\nextension to invoke this API."
									},
									"parameters": [
										{
											"id": 4816,
											"name": "seconds",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Time to wait in seconds before rebooting the device, or -1 to cancel a scheduled reboot."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 4817,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "A callback to be invoked when a restart request was successfully rescheduled.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4818,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 15952,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 4819,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4830,
							"name": "sendMessage",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16012,
									"character": 31
								}
							],
							"signatures": [
								{
									"id": 4831,
									"name": "sendMessage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sends a single message to event listeners within your extension/app or a\ndifferent extension/app. Similar to {@link runtime.connect} but only sends a\nsingle message, with an optional response. If sending to your extension, the\n{@link runtime.onMessage} event will be fired in every frame of your\nextension (except for the sender's frame), or {@link\nruntime.onMessageExternal}, if a different extension. Note that extensions\ncannot send messages to content scripts using this method. To send messages\nto content scripts, use {@link tabs.sendMessage}."
									},
									"parameters": [
										{
											"id": 4832,
											"name": "extensionId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ID of the extension/app to send the message to. If omitted, the message will be sent to your own extension/app. Required if sending messages from a web page for <a href=\"manifest/externally_connectable.html\">web messaging</a>."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 4833,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The message to send. This message should be a JSON-ifiable object."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 4834,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4835,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 4836,
															"name": "includeTlsChannelId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether the TLS channel ID will be passed into onMessageExternal for\nprocesses that are listening for the connection event."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 16020,
																	"character": 27
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																4836
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 16015,
															"character": 15
														}
													]
												}
											}
										},
										{
											"id": 4837,
											"name": "responseCallback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4838,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 16022,
															"character": 24
														}
													],
													"signatures": [
														{
															"id": 4839,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4840,
																	"name": "response",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "The JSON response object sent by the handler of the message. If an error occurs while connecting to the extension, the callback will be called with no arguments and {@link runtime.lastError} will be set to the error message.\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								},
								{
									"id": 4841,
									"name": "sendMessage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sends a single message to event listeners within your extension/app or a\ndifferent extension/app. Similar to {@link runtime.connect} but only sends a\nsingle message, with an optional response. If sending to your extension, the\n{@link runtime.onMessage} event will be fired in every frame of your\nextension (except for the sender's frame), or {@link\nruntime.onMessageExternal}, if a different extension. Note that extensions\ncannot send messages to content scripts using this method. To send messages\nto content scripts, use {@link tabs.sendMessage}."
									},
									"parameters": [
										{
											"id": 4842,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The message to send. This message should be a JSON-ifiable object."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 4843,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4844,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 4845,
															"name": "includeTlsChannelId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether the TLS channel ID will be passed into onMessageExternal for\nprocesses that are listening for the connection event."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 16049,
																	"character": 27
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																4845
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 16044,
															"character": 15
														}
													]
												}
											}
										},
										{
											"id": 4846,
											"name": "responseCallback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4847,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 16051,
															"character": 24
														}
													],
													"signatures": [
														{
															"id": 4848,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4849,
																	"name": "response",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "The JSON response object sent by the handler of the message. If an error occurs while connecting to the extension, the callback will be called with no arguments and {@link runtime.lastError} will be set to the error message.\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4850,
							"name": "sendNativeMessage",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16064,
									"character": 37
								}
							],
							"signatures": [
								{
									"id": 4851,
									"name": "sendNativeMessage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Send a single message to a native application."
									},
									"parameters": [
										{
											"id": 4852,
											"name": "application",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the native messaging host."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 4853,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The message that will be passed to the native messaging host."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4854,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 16066,
															"character": 14
														}
													],
													"indexSignature": {
														"id": 4855,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 4856,
																"name": "name",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										},
										{
											"id": 4857,
											"name": "responseCallback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4858,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 16067,
															"character": 24
														}
													],
													"signatures": [
														{
															"id": 4859,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4860,
																	"name": "response",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "The response message sent by the native messaging host. If an error occurs while connecting to the native messaging host, the callback will be called with no arguments and {@link runtime.lastError} will be set to the error message.\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4795,
							"name": "setUninstallURL",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 15894,
									"character": 35
								}
							],
							"signatures": [
								{
									"id": 4796,
									"name": "setUninstallURL",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the URL to be visited upon uninstallation. This may be used to clean up\nserver-side data, do analytics, and implement surveys. Maximum 255\ncharacters."
									},
									"parameters": [
										{
											"id": 4797,
											"name": "url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "URL to be opened after the extension is uninstalled. This URL must have an http: or https: scheme. Set an empty string to not open a new tab upon uninstallation."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 4798,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called when the uninstall URL is set. If the given URL is invalid, {@link runtime.lastError} will be set.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4799,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 15896,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 4800,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								4891,
								4902,
								4873
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								4907,
								4908,
								4900,
								4901,
								4899,
								4906
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								4912,
								4909,
								4938,
								4941,
								4945,
								4949,
								4916,
								4953,
								4961,
								4969,
								4913,
								4924,
								4927,
								4930
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								4820,
								4827,
								4776,
								4787,
								4867,
								4861,
								4792,
								4782,
								4801,
								4803,
								4812,
								4814,
								4830,
								4850,
								4795
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 15658,
							"character": 26
						}
					]
				},
				{
					"id": 4973,
					"name": "scripting",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.scripting</code> API to execute script in different\ncontexts.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "scripting"
							},
							{
								"tag": "chrome-permission",
								"text": "scripting\n"
							}
						]
					},
					"children": [
						{
							"id": 4998,
							"name": "CSSInjection",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 5000,
									"name": "css",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "A string containing the CSS to inject. Exactly one of <code>files</code> and\n<code>css</code> must be specified."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 16349,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 5001,
									"name": "files",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The path of the CSS files to inject, relative to the extension's root\ndirectory. NOTE: Currently a maximum of one file is supported. Exactly one of\n<code>files</code> and <code>css</code> must be specified."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 16356,
											"character": 11
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 5002,
									"name": "origin",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The style origin for the injection. Defaults to <code>'AUTHOR'</code>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 16361,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 4987,
										"name": "StyleOrigin"
									}
								},
								{
									"id": 4999,
									"name": "target",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Details specifying the target into which to insert the CSS."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 16343,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 4988,
										"name": "InjectionTarget"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										5000,
										5001,
										5002,
										4999
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16339,
									"character": 33
								}
							]
						},
						{
							"id": 5003,
							"name": "InjectionResult",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 5005,
									"name": "frameId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The frame associated with the injection."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 16373,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 5004,
									"name": "result",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The result of the script execution."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 16368,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										5005,
										5004
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16364,
									"character": 36
								}
							]
						},
						{
							"id": 4988,
							"name": "InjectionTarget",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 4991,
									"name": "allFrames",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Whether the script should inject into all frames within the tab. Defaults to\nfalse. This must not be true if <code>frameIds</code> is specified."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 16314,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 4990,
									"name": "frameIds",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The <a\nhref=\"https://developer.chrome.com/extensions/webNavigation#frame_ids\">IDs</a> of specific frames to inject into."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 16308,
											"character": 14
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 4989,
									"name": "tabId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The ID of the tab into which to inject."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 16302,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4991,
										4990,
										4989
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16298,
									"character": 36
								}
							]
						},
						{
							"id": 4992,
							"name": "ScriptInjection",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 4996,
									"name": "files",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The path of the JS files to inject, relative to the extension's root\ndirectory. NOTE: Currently a maximum of one file is supported. Exactly one of\n<code>files</code> and <code>function</code> must be specified."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 16331,
											"character": 11
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 4993,
									"name": "function",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "A JavaScript function to inject. This function will be serialized, and then\ndeserialized for injection. This means that any bound parameters and\nexecution context will be lost. Exactly one of <code>files</code> and\n<code>function</code> must be specified."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 16324,
											"character": 14
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 4994,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 4995,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 4997,
									"name": "target",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Details specifying the target into which to inject the script."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 16336,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 4988,
										"name": "InjectionTarget"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4996,
										4993,
										4997
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16317,
									"character": 36
								}
							]
						},
						{
							"id": 4987,
							"name": "StyleOrigin",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The origin for a style change. See <a\nhref=\"https://developer.mozilla.org/en-US/docs/Glossary/Style_origin\">style\norigins</a> for more info."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16296,
									"character": 27
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "AUTHOR"
									},
									{
										"type": "literal",
										"value": "USER"
									}
								]
							}
						},
						{
							"id": 4974,
							"name": "executeScript",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16384,
									"character": 33
								}
							],
							"signatures": [
								{
									"id": 4975,
									"name": "executeScript",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Injects a script into a target context. The script will be run at\n<code>document_end</code>."
									},
									"parameters": [
										{
											"id": 4976,
											"name": "injection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The details of the script which to inject."
											},
											"type": {
												"type": "reference",
												"id": 4992,
												"name": "ScriptInjection"
											}
										},
										{
											"id": 4977,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Invoked upon completion of the injection. The resulting array contains the result of execution for each frame where the injection succeeded."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4978,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 16386,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 4979,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4980,
																	"name": "results",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 5003,
																			"name": "InjectionResult"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 4981,
							"name": "insertCSS",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16398,
									"character": 29
								}
							],
							"signatures": [
								{
									"id": 4982,
									"name": "insertCSS",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Inserts a CSS stylesheet into a target context. If multiple frames are\nspecified, unsuccessful injections are ignored."
									},
									"parameters": [
										{
											"id": 4983,
											"name": "injection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The details of the styles to insert."
											},
											"type": {
												"type": "reference",
												"id": 4998,
												"name": "CSSInjection"
											}
										},
										{
											"id": 4984,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Invoked upon completion of the insertion.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4985,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 16400,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 4986,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								4998,
								5003,
								4988,
								4992
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								4987
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								4974,
								4981
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 16290,
							"character": 28
						}
					]
				},
				{
					"id": 5006,
					"name": "search",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.search</code> API to search via the default provider.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "search"
							},
							{
								"tag": "chrome-permission",
								"text": "search\n"
							}
						]
					},
					"children": [
						{
							"id": 5014,
							"name": "QueryInfo",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 5016,
									"name": "disposition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Location where search results should be displayed. <code>CURRENT_TAB</code>\nis the default."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 16425,
											"character": 17
										}
									],
									"type": {
										"type": "reference",
										"id": 5013,
										"name": "Disposition"
									}
								},
								{
									"id": 5017,
									"name": "tabId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Location where search results should be displayed. <code>tabId<code> cannot\nbe used with <code>disposition</code>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 16431,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 5015,
									"name": "text",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "String to query with the default search provider."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 16419,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										5016,
										5017,
										5015
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16415,
									"character": 30
								}
							]
						},
						{
							"id": 5013,
							"name": "Disposition",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16413,
									"character": 27
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "CURRENT_TAB"
									},
									{
										"type": "literal",
										"value": "NEW_TAB"
									},
									{
										"type": "literal",
										"value": "NEW_WINDOW"
									}
								]
							}
						},
						{
							"id": 5007,
							"name": "query",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16441,
									"character": 25
								}
							],
							"signatures": [
								{
									"id": 5008,
									"name": "query",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Used to query the default search provider. In case of an error, {@link\nruntime.lastError} will be set."
									},
									"parameters": [
										{
											"id": 5009,
											"name": "queryInfo",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 5014,
												"name": "QueryInfo"
											}
										},
										{
											"id": 5010,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5011,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 16443,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 5012,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								5014
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								5013
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								5007
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 16412,
							"character": 25
						}
					]
				},
				{
					"id": 5018,
					"name": "sessions",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.sessions</code> API to query and restore tabs and\nwindows from a browsing session.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "sessions"
							},
							{
								"tag": "chrome-permission",
								"text": "sessions\n"
							}
						]
					},
					"children": [
						{
							"id": 5056,
							"name": "Device",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 5057,
									"name": "deviceName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The name of the foreign device."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 16490,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 5058,
									"name": "sessions",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "A list of open window sessions for the foreign device, sorted from most\nrecently to least recently modified session."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 16496,
											"character": 14
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 5052,
											"name": "Session"
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										5057,
										5058
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16486,
									"character": 27
								}
							]
						},
						{
							"id": 5050,
							"name": "Filter",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 5051,
									"name": "maxResults",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The maximum number of entries to be fetched in the requested list. Omit this\nparameter to fetch the maximum number of entries ({@link\nsessions.MAX_SESSION_RESULTS})."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 16463,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										5051
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16457,
									"character": 27
								}
							]
						},
						{
							"id": 5052,
							"name": "Session",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 5053,
									"name": "lastModified",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The time when the window or tab was closed or modified, represented in\nmilliseconds since the epoch."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 16471,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 5054,
									"name": "tab",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The {@link tabs.Tab}, if this entry describes a tab. Either this or {@link\nsessions.Session.window} will be set."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 16477,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"id": 5892,
										"name": "Tab"
									}
								},
								{
									"id": 5055,
									"name": "window",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The {@link windows.Window}, if this entry describes a window. Either this or\n{@link sessions.Session.tab} will be set."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 16483,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 6926,
										"name": "Window"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										5053,
										5054,
										5055
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16466,
									"character": 28
								}
							]
						},
						{
							"id": 5059,
							"name": "MAX_SESSION_RESULTS",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "The maximum number of {@link sessions.Session} that will be included in a\nrequested list."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16503,
									"character": 36
								}
							],
							"type": {
								"type": "literal",
								"value": 25
							}
						},
						{
							"id": 5060,
							"name": "onChanged",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when recently closed tabs and/or windows are changed. This event does\nnot monitor synced sessions changes."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16576,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 5061,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 16576,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 5062,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 5031,
							"name": "getDevices",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16538,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 5032,
									"name": "getDevices",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieves all devices with synced sessions."
									},
									"parameters": [
										{
											"id": 5033,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 5050,
												"name": "Filter"
											}
										},
										{
											"id": 5034,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5035,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 16540,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 5036,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5037,
																	"name": "devices",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "The list of {@link sessions.Device} objects for each synced session, sorted in order from device with most recently modified session to device with least recently modified session. {@link tabs.Tab} objects are sorted by recency in the {@link windows.Window} of the {@link sessions.Session} objects.\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 5056,
																			"name": "Device"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								},
								{
									"id": 5038,
									"name": "getDevices",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieves all devices with synced sessions."
									},
									"parameters": [
										{
											"id": 5039,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5040,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 16552,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 5041,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5042,
																	"name": "devices",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "The list of {@link sessions.Device} objects for each synced session, sorted in order from device with most recently modified session to device with least recently modified session. {@link tabs.Tab} objects are sorted by recency in the {@link windows.Window} of the {@link sessions.Session} objects.\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 5056,
																			"name": "Device"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 5019,
							"name": "getRecentlyClosed",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16512,
									"character": 37
								}
							],
							"signatures": [
								{
									"id": 5020,
									"name": "getRecentlyClosed",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the list of recently closed tabs and/or windows."
									},
									"parameters": [
										{
											"id": 5021,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 5050,
												"name": "Filter"
											}
										},
										{
											"id": 5022,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5023,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 16514,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 5024,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5025,
																	"name": "sessions",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "The list of closed entries in reverse order that they were closed (the most recently closed tab or window will be at index <code>0</code>). The entries may contain either tabs or windows.\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 5052,
																			"name": "Session"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								},
								{
									"id": 5026,
									"name": "getRecentlyClosed",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the list of recently closed tabs and/or windows."
									},
									"parameters": [
										{
											"id": 5027,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5028,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 16526,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 5029,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5030,
																	"name": "sessions",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "The list of closed entries in reverse order that they were closed (the most recently closed tab or window will be at index <code>0</code>). The entries may contain either tabs or windows.\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 5052,
																			"name": "Session"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 5043,
							"name": "restore",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16565,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 5044,
									"name": "restore",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Reopens a {@link windows.Window} or {@link tabs.Tab}, with an optional\ncallback to run when the entry has been restored."
									},
									"parameters": [
										{
											"id": 5045,
											"name": "sessionId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The {@link windows.Window.sessionId}, or {@link tabs.Tab.sessionId} to restore. If this parameter is not specified, the most recently closed session is restored."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 5046,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5047,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 16567,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 5048,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5049,
																	"name": "restoredSession",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "A {@link sessions.Session} containing the restored {@link windows.Window} or {@link tabs.Tab} object.\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 5052,
																		"name": "Session"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								5056,
								5050,
								5052
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								5059,
								5060
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								5031,
								5019,
								5043
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 16456,
							"character": 27
						}
					]
				},
				{
					"id": 5063,
					"name": "sharedModule",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Stub namespace for the \"import\" and \"export\" manifest keys.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "sharedModule\n"
							}
						]
					},
					"children": [
						{
							"id": 5067,
							"name": "Export",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 5068,
									"name": "allowlist",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Optional list of extension IDs explicitly allowed to import this Shared\nModule's resources.  If no allowlist is given, all extensions are allowed to\nimport it."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 16607,
											"character": 15
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										5068
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16601,
									"character": 27
								}
							]
						},
						{
							"id": 5064,
							"name": "Import",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 5065,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Extension ID of the shared module this extension or app depends on."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 16593,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 5066,
									"name": "minimum_version",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Minimum supported version of the shared module."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 16598,
											"character": 21
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										5065,
										5066
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16589,
									"character": 27
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								5067,
								5064
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 16588,
							"character": 31
						}
					]
				},
				{
					"id": 5069,
					"name": "signedInDevices",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.signedInDevices</code> API to get a list of devices\nsigned into chrome with the same account as the current profile.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "signedInDevices"
							},
							{
								"tag": "alpha",
								"text": ""
							},
							{
								"tag": "chrome-permission",
								"text": "signedInDevices\n"
							}
						]
					},
					"children": [
						{
							"id": 5084,
							"name": "DeviceInfo",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 5089,
									"name": "chromeVersion",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Version of chrome running in this device."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 16653,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 5086,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Unique Id for this device. Note: The id is meaningful only in the current\ndevice. This id cannot be used to refer to the same device from another\ndevice or extension."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 16638,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 5085,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Name of the device. This name is usually set by the user when setting up a\ndevice."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 16631,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 5087,
									"name": "os",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The OS of the device."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 16643,
											"character": 8
										}
									],
									"type": {
										"type": "reference",
										"id": 5082,
										"name": "OS"
									}
								},
								{
									"id": 5088,
									"name": "type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Device Type."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 16648,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 5083,
										"name": "DeviceType"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										5089,
										5086,
										5085,
										5087,
										5088
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16626,
									"character": 31
								}
							]
						},
						{
							"id": 5083,
							"name": "DeviceType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16624,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "desktop_or_laptop"
									},
									{
										"type": "literal",
										"value": "phone"
									},
									{
										"type": "literal",
										"value": "tablet"
									},
									{
										"type": "literal",
										"value": "unknown"
									}
								]
							}
						},
						{
							"id": 5082,
							"name": "OS",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16622,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "win"
									},
									{
										"type": "literal",
										"value": "mac"
									},
									{
										"type": "literal",
										"value": "linux"
									},
									{
										"type": "literal",
										"value": "chrome_os"
									},
									{
										"type": "literal",
										"value": "android"
									},
									{
										"type": "literal",
										"value": "ios"
									},
									{
										"type": "literal",
										"value": "unknown"
									}
								]
							}
						},
						{
							"id": 5090,
							"name": "onDeviceInfoChange",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when the DeviceInfo object of any of the signed in devices changes, or\nwhen a device is added or removed."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16688,
									"character": 35
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 5091,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 16688,
													"character": 57
												}
											],
											"signatures": [
												{
													"id": 5092,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 5093,
															"name": "devices",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "The array of all signed in devices.\n"
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"id": 5084,
																	"name": "DeviceInfo"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 5070,
							"name": "get",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16664,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 5071,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the array of signed in devices, signed into the same account as the\ncurrent profile."
									},
									"parameters": [
										{
											"id": 5072,
											"name": "isLocal",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "If true only return the information for the local device. If false or omitted return the list of all devices including the local device."
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 5073,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The callback to be invoked with the array of DeviceInfo objects."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5074,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 16666,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 5075,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5076,
																	"name": "devices",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 5084,
																			"name": "DeviceInfo"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								},
								{
									"id": 5077,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the array of signed in devices, signed into the same account as the\ncurrent profile."
									},
									"parameters": [
										{
											"id": 5078,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The callback to be invoked with the array of DeviceInfo objects."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5079,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 16679,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 5080,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5081,
																	"name": "devices",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 5084,
																			"name": "DeviceInfo"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								5084
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								5083,
								5082
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								5090
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								5070
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 16621,
							"character": 34
						}
					]
				},
				{
					"id": 5094,
					"name": "storage",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.storage</code> API to store, retrieve, and track changes\nto user data.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "storage"
							},
							{
								"tag": "chrome-permission",
								"text": "storage\n"
							}
						]
					},
					"children": [
						{
							"id": 5098,
							"name": "StorageArea",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 5152,
									"name": "onChanged",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Fired when one or more items change."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 16807,
											"character": 15
										}
									],
									"type": {
										"type": "reference",
										"id": 2537,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 5153,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 5154,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"comment": {},
															"parameters": [
																{
																	"id": 5155,
																	"name": "changes",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "Object mapping each key that changed to its corresponding {@link storage.StorageChange} for that item.\n"
																	},
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 5156,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"indexSignature": {
																				"id": 5157,
																				"name": "__index",
																				"kind": 8192,
																				"kindString": "Index signature",
																				"flags": {},
																				"parameters": [
																					{
																						"id": 5158,
																						"name": "name",
																						"kind": 32768,
																						"flags": {},
																						"type": {
																							"type": "intrinsic",
																							"name": "string"
																						}
																					}
																				],
																				"type": {
																					"type": "reference",
																					"id": 5095,
																					"name": "StorageChange"
																				}
																			}
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										],
										"name": "Event"
									}
								},
								{
									"id": 5147,
									"name": "clear",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 5148,
											"name": "clear",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Removes all items from storage."
											},
											"parameters": [
												{
													"id": 5149,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "Callback on success, or on failure (in which case {@link runtime.lastError} will be set).\n"
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 5150,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 5151,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 5099,
									"name": "get",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 5100,
											"name": "get",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Gets one or more items from storage."
											},
											"parameters": [
												{
													"id": 5101,
													"name": "keys",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "A single key to get, list of keys to get, or a dictionary specifying default values (see description of the object).  An empty list or object will return an empty result object.  Pass in <code>null</code> to get the entire contents of storage."
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															},
															{
																"type": "reflection",
																"declaration": {
																	"id": 5102,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"indexSignature": {
																		"id": 5103,
																		"name": "__index",
																		"kind": 8192,
																		"kindString": "Index signature",
																		"flags": {},
																		"parameters": [
																			{
																				"id": 5104,
																				"name": "name",
																				"kind": 32768,
																				"flags": {},
																				"type": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			}
																		],
																		"type": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															}
														]
													}
												},
												{
													"id": 5105,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Callback with storage items, or on failure (in which case {@link runtime.lastError} will be set)."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 5106,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 5107,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 5108,
																			"name": "items",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "Object with items in their key-value mappings.\n"
																			},
																			"type": {
																				"type": "reflection",
																				"declaration": {
																					"id": 5109,
																					"name": "__type",
																					"kind": 65536,
																					"kindString": "Type literal",
																					"flags": {},
																					"indexSignature": {
																						"id": 5110,
																						"name": "__index",
																						"kind": 8192,
																						"kindString": "Index signature",
																						"flags": {},
																						"parameters": [
																							{
																								"id": 5111,
																								"name": "name",
																								"kind": 32768,
																								"flags": {},
																								"type": {
																									"type": "intrinsic",
																									"name": "string"
																								}
																							}
																						],
																						"type": {
																							"type": "intrinsic",
																							"name": "any"
																						}
																					}
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										},
										{
											"id": 5112,
											"name": "get",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Gets one or more items from storage."
											},
											"parameters": [
												{
													"id": 5113,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Callback with storage items, or on failure (in which case {@link runtime.lastError} will be set)."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 5114,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 5115,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 5116,
																			"name": "items",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "Object with items in their key-value mappings.\n"
																			},
																			"type": {
																				"type": "reflection",
																				"declaration": {
																					"id": 5117,
																					"name": "__type",
																					"kind": 65536,
																					"kindString": "Type literal",
																					"flags": {},
																					"indexSignature": {
																						"id": 5118,
																						"name": "__index",
																						"kind": 8192,
																						"kindString": "Index signature",
																						"flags": {},
																						"parameters": [
																							{
																								"id": 5119,
																								"name": "name",
																								"kind": 32768,
																								"flags": {},
																								"type": {
																									"type": "intrinsic",
																									"name": "string"
																								}
																							}
																						],
																						"type": {
																							"type": "intrinsic",
																							"name": "any"
																						}
																					}
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 5120,
									"name": "getBytesInUse",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 5121,
											"name": "getBytesInUse",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Gets the amount of space (in bytes) being used by one or more items."
											},
											"parameters": [
												{
													"id": 5122,
													"name": "keys",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "A single key or list of keys to get the total usage for. An empty list will return 0. Pass in <code>null</code> to get the total usage of all of storage."
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														]
													}
												},
												{
													"id": 5123,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Callback with the amount of space being used by storage, or on failure (in which case {@link runtime.lastError} will be set)."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 5124,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 5125,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 5126,
																			"name": "bytesInUse",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "Amount of space being used in storage, in bytes.\n"
																			},
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										},
										{
											"id": 5127,
											"name": "getBytesInUse",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Gets the amount of space (in bytes) being used by one or more items."
											},
											"parameters": [
												{
													"id": 5128,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Callback with the amount of space being used by storage, or on failure (in which case {@link runtime.lastError} will be set)."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 5129,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 5130,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 5131,
																			"name": "bytesInUse",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "Amount of space being used in storage, in bytes.\n"
																			},
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 5141,
									"name": "remove",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 5142,
											"name": "remove",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Removes one or more items from storage."
											},
											"parameters": [
												{
													"id": 5143,
													"name": "keys",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "A single key or a list of keys for items to remove."
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														]
													}
												},
												{
													"id": 5144,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "Callback on success, or on failure (in which case {@link runtime.lastError} will be set).\n"
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 5145,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 5146,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 5132,
									"name": "set",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 5133,
											"name": "set",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Sets multiple items."
											},
											"parameters": [
												{
													"id": 5134,
													"name": "items",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "<p>An object which gives each key/value pair to update storage with. Any other key/value pairs in storage will not be affected.</p><p>Primitive values such as numbers will serialize as expected. Values with a <code>typeof</code> <code>\"object\"</code> and <code>\"function\"</code> will typically serialize to <code>{}</code>, with the exception of <code>Array</code> (serializes as expected), <code>Date</code>, and <code>Regex</code> (serialize using their <code>String</code> representation).</p>"
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 5135,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"indexSignature": {
																"id": 5136,
																"name": "__index",
																"kind": 8192,
																"kindString": "Index signature",
																"flags": {},
																"parameters": [
																	{
																		"id": 5137,
																		"name": "name",
																		"kind": 32768,
																		"flags": {},
																		"type": {
																			"type": "intrinsic",
																			"name": "string"
																		}
																	}
																],
																"type": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													}
												},
												{
													"id": 5138,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "Callback on success, or on failure (in which case {@link runtime.lastError} will be set).\n"
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 5139,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 5140,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										5152
									]
								},
								{
									"title": "Methods",
									"kind": 2048,
									"children": [
										5147,
										5099,
										5120,
										5141,
										5132
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16720,
									"character": 32
								}
							]
						},
						{
							"id": 5095,
							"name": "StorageChange",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 5097,
									"name": "newValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The new value of the item, if there is a new value."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 16717,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 5096,
									"name": "oldValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The old value of the item, if there was an old value."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 16712,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										5097,
										5096
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16708,
									"character": 34
								}
							]
						},
						{
							"id": 5167,
							"name": "local",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Items in the <code>local</code> storage area are local to each machine."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16871,
									"character": 22
								}
							],
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"id": 5098,
										"name": "StorageArea"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 5168,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 5169,
													"name": "QUOTA_BYTES",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"shortText": "The maximum amount (in bytes) of data that can be stored in local storage, as\nmeasured by the JSON stringification of every value plus every key's length.\nThis value will be ignored if the extension has the\n<code>unlimitedStorage</code> permission. Updates that would cause this limit\nto be exceeded fail immediately and set {@link runtime.lastError}."
													},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 16879,
															"character": 17
														}
													],
													"type": {
														"type": "literal",
														"value": 5242880
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														5169
													]
												}
											],
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 16871,
													"character": 37
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 5170,
							"name": "managed",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Items in the <code>managed</code> storage area are set by the domain\nadministrator, and are read-only for the extension; trying to modify this\nnamespace results in an error."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16887,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"id": 5098,
								"name": "StorageArea"
							}
						},
						{
							"id": 5171,
							"name": "onChanged",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when one or more items change."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16892,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 5172,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 16892,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 5173,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 5174,
															"name": "changes",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Object mapping each key that changed to its corresponding {@link storage.StorageChange} for that item."
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 5175,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 16898,
																			"character": 16
																		}
																	],
																	"indexSignature": {
																		"id": 5176,
																		"name": "__index",
																		"kind": 8192,
																		"kindString": "Index signature",
																		"flags": {},
																		"parameters": [
																			{
																				"id": 5177,
																				"name": "name",
																				"kind": 32768,
																				"flags": {},
																				"type": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			}
																		],
																		"type": {
																			"type": "reference",
																			"id": 5095,
																			"name": "StorageChange"
																		}
																	}
																}
															}
														},
														{
															"id": 5178,
															"name": "areaName",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "The name of the storage area (<code>\"sync\"</code>, <code>\"local\"</code> or <code>\"managed\"</code>) the changes are for.\n"
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 5159,
							"name": "sync",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Items in the <code>sync</code> storage area are synced using Chrome Sync."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16820,
									"character": 21
								}
							],
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"id": 5098,
										"name": "StorageArea"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 5160,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 5163,
													"name": "MAX_ITEMS",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"shortText": "The maximum number of items that can be stored in sync storage. Updates that\nwould cause this limit to be exceeded will fail immediately and set {@link\nruntime.lastError}."
													},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 16842,
															"character": 15
														}
													],
													"type": {
														"type": "literal",
														"value": 512
													}
												},
												{
													"id": 5166,
													"name": "MAX_SUSTAINED_WRITE_OPERATIONS_PER_MINUTE",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"tags": [
															{
																"tag": "deprecated",
																"text": "The storage.sync API no longer has a sustained write operation quota.\n"
															}
														]
													},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 16865,
															"character": 47
														}
													],
													"type": {
														"type": "literal",
														"value": 1000000
													}
												},
												{
													"id": 5164,
													"name": "MAX_WRITE_OPERATIONS_PER_HOUR",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"shortText": "<p>The maximum number of <code>set</code>, <code>remove</code>, or\n<code>clear</code> operations that can be performed each hour. This is 1\nevery 2 seconds, a lower ceiling than the short term higher writes-per-minute\nlimit.</p><p>Updates that would cause this limit to be exceeded fail\nimmediately and set {@link runtime.lastError}.</p>"
													},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 16851,
															"character": 35
														}
													],
													"type": {
														"type": "literal",
														"value": 1800
													}
												},
												{
													"id": 5165,
													"name": "MAX_WRITE_OPERATIONS_PER_MINUTE",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"shortText": "<p>The maximum number of <code>set</code>, <code>remove</code>, or\n<code>clear</code> operations that can be performed each minute. This is 2\nper second, providing higher throughput than writes-per-hour over a shorter\nperiod of time.</p><p>Updates that would cause this limit to be exceeded fail\nimmediately and set {@link runtime.lastError}.</p>"
													},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 16860,
															"character": 37
														}
													],
													"type": {
														"type": "literal",
														"value": 120
													}
												},
												{
													"id": 5161,
													"name": "QUOTA_BYTES",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"shortText": "The maximum total amount (in bytes) of data that can be stored in sync\nstorage, as measured by the JSON stringification of every value plus every\nkey's length. Updates that would cause this limit to be exceeded fail\nimmediately and set {@link runtime.lastError}."
													},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 16827,
															"character": 17
														}
													],
													"type": {
														"type": "literal",
														"value": 102400
													}
												},
												{
													"id": 5162,
													"name": "QUOTA_BYTES_PER_ITEM",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"shortText": "The maximum size (in bytes) of each individual item in sync storage, as\nmeasured by the JSON stringification of its value plus its key length.\nUpdates containing items larger than this limit will fail immediately and set\n{@link runtime.lastError}."
													},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 16835,
															"character": 26
														}
													],
													"type": {
														"type": "literal",
														"value": 8192
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														5163,
														5166,
														5164,
														5165,
														5161,
														5162
													]
												}
											],
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 16820,
													"character": 36
												}
											]
										}
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								5098,
								5095
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								5167,
								5170,
								5171,
								5159
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 16707,
							"character": 26
						}
					]
				},
				{
					"id": 5179,
					"name": "system",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 5180,
							"name": "cpu",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"comment": {
								"shortText": "Use the <code>system.cpu</code> API to query CPU metadata.",
								"tags": [
									{
										"tag": "chrome-namespace",
										"text": "system.cpu"
									},
									{
										"tag": "chrome-permission",
										"text": "system.cpu\n"
									}
								]
							},
							"children": [
								{
									"id": 5194,
									"name": "CpuInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 5196,
											"name": "archName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The architecture name of the processors."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 16952,
													"character": 14
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 5198,
											"name": "features",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "A set of feature codes indicating some of the processor's capabilities. The\ncurrently supported codes are \"mmx\", \"sse\", \"sse2\", \"sse3\", \"ssse3\",\n\"sse4_1\", \"sse4_2\", and \"avx\"."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 16964,
													"character": 14
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 5197,
											"name": "modelName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The model name of the processors."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 16957,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 5195,
											"name": "numOfProcessors",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The number of logical processors."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 16947,
													"character": 21
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5199,
											"name": "processors",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Information about each logical processor."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 16969,
													"character": 16
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 5192,
													"name": "ProcessorInfo"
												}
											}
										},
										{
											"id": 5200,
											"name": "temperatures",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "<p>List of CPU temperature readings from each thermal zone of the CPU.\nTemperatures are in degrees Celsius.</p><p><b>Currently supported on Chrome\nOS only.</b></p>"
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 16976,
													"character": 18
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												5196,
												5198,
												5197,
												5195,
												5199,
												5200
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 16943,
											"character": 28
										}
									]
								},
								{
									"id": 5187,
									"name": "CpuTime",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 5190,
											"name": "idle",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The cumulative time spent idle by this processor."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 16927,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5189,
											"name": "kernel",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The cumulative time used by kernel programs on this processor."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 16922,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5191,
											"name": "total",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The total cumulative time for this processor.  This value is equal to user +\nkernel + idle."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 16933,
													"character": 11
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5188,
											"name": "user",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The cumulative time used by userspace programs on this processor."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 16917,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												5190,
												5189,
												5191,
												5188
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 16913,
											"character": 28
										}
									]
								},
								{
									"id": 5192,
									"name": "ProcessorInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 5193,
											"name": "usage",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Cumulative usage info for this logical processor."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 16940,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"id": 5187,
												"name": "CpuTime"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												5193
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 16936,
											"character": 34
										}
									]
								},
								{
									"id": 5181,
									"name": "getInfo",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 16985,
											"character": 27
										}
									],
									"signatures": [
										{
											"id": 5182,
											"name": "getInfo",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Queries basic CPU information of the system."
											},
											"parameters": [
												{
													"id": 5183,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 5184,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 16986,
																	"character": 15
																}
															],
															"signatures": [
																{
																	"id": 5185,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 5186,
																			"name": "info",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "\n"
																			},
																			"type": {
																				"type": "reference",
																				"id": 5194,
																				"name": "CpuInfo"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										5194,
										5187,
										5192
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										5181
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 16912,
									"character": 29
								}
							]
						},
						{
							"id": 5201,
							"name": "display",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"comment": {
								"shortText": "Use the <code>system.display</code> API to query display metadata.",
								"tags": [
									{
										"tag": "chrome-namespace",
										"text": "system.display"
									},
									{
										"tag": "chrome-permission",
										"text": "system.display\n"
									}
								]
							},
							"children": [
								{
									"id": 5272,
									"name": "Bounds",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 5276,
											"name": "height",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The height of the display in pixels."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17020,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5273,
											"name": "left",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The x-coordinate of the upper-left corner."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17005,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5274,
											"name": "top",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The y-coordinate of the upper-left corner."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17010,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5275,
											"name": "width",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The width of the display in pixels."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17015,
													"character": 11
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												5276,
												5273,
												5274,
												5275
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17001,
											"character": 27
										}
									]
								},
								{
									"id": 5305,
									"name": "DisplayLayout",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 5306,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The unique identifier of the display."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17154,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 5309,
											"name": "offset",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The offset of the display along the connected edge. 0 indicates that the\ntopmost or leftmost corners are aligned."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17171,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5307,
											"name": "parentId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The unique identifier of the parent display. Empty if this is the root."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17159,
													"character": 14
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 5308,
											"name": "position",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The layout position of this display relative to the parent. This will be\nignored for the root."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17165,
													"character": 14
												}
											],
											"type": {
												"type": "reference",
												"id": 5304,
												"name": "LayoutPosition"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												5306,
												5309,
												5307,
												5308
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17150,
											"character": 34
										}
									]
								},
								{
									"id": 5293,
									"name": "DisplayMode",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 5299,
											"name": "deviceScaleFactor",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The display mode device scale factor."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17122,
													"character": 23
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5295,
											"name": "height",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The display mode height in device independent (user visible) pixels."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17100,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5297,
											"name": "heightInNativePixels",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The display mode height in native pixels."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17110,
													"character": 26
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5303,
											"name": "isInterlaced",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "True if this mode is interlaced, false if not provided."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17142,
													"character": 18
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 5301,
											"name": "isNative",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "True if the mode is the display's native mode."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17132,
													"character": 14
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 5302,
											"name": "isSelected",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "True if the display mode is currently selected."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17137,
													"character": 16
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 5300,
											"name": "refreshRate",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The display mode refresh rate in hertz."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17127,
													"character": 17
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5298,
											"name": "uiScale",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "The display mode UI scale factor.",
												"tags": [
													{
														"tag": "deprecated",
														"text": "Use {@link  displayZoomFactor}\n"
													}
												]
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17117,
													"character": 13
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5294,
											"name": "width",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The display mode width in device independent (user visible) pixels."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17095,
													"character": 11
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5296,
											"name": "widthInNativePixels",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The display mode width in native pixels."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17105,
													"character": 25
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												5299,
												5295,
												5297,
												5303,
												5301,
												5302,
												5300,
												5298,
												5294,
												5296
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17091,
											"character": 32
										}
									]
								},
								{
									"id": 5334,
									"name": "DisplayProperties",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 5340,
											"name": "boundsOriginX",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "If set, updates the display's logical bounds origin along the x-axis. Applied\ntogether with {@link boundsOriginY}. Defaults to the current value if not set\nand {@link boundsOriginY} is set. Note that when updating the display origin,\nsome constraints will be applied, so the final bounds origin may be different\nthan the one set. The final bounds can be retrieved using {@link getInfo}.\nThe bounds origin cannot be changed on the primary display."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17351,
													"character": 19
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5341,
											"name": "boundsOriginY",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "If set, updates the display's logical bounds origin along the y-axis. See\ndocumentation for {@link boundsOriginX} parameter."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17357,
													"character": 19
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5342,
											"name": "displayMode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "If set, updates the display mode to the mode matching this value. If other\nparameters are invalid, this will not be applied. If the display mode is\ninvalid, it will not be applied and an error will be set, but other\nproperties will still be applied."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17365,
													"character": 17
												}
											],
											"type": {
												"type": "reference",
												"id": 5293,
												"name": "DisplayMode"
											}
										},
										{
											"id": 5343,
											"name": "displayZoomFactor",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "If set, updates the zoom associated with the display. This zoom performs\nre-layout and repaint thus resulting in a better quality zoom than just\nperforming a pixel by pixel stretch enlargement."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17372,
													"character": 23
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5337,
											"name": "isPrimary",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "If set to true, makes the display primary. No-op if set to false. Note: If\nset, the display is considered primary for all other properties (i.e. {@link\nisUnified} may be set and bounds origin may not)."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17328,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 5335,
											"name": "isUnified",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Chrome OS only. If set to true, changes the display mode to unified desktop\n(see {@link enableUnifiedDesktop} for details). If set to false, unified\ndesktop mode will be disabled. This is only valid for the primary display. If\nprovided, mirroringSourceId must not be provided and other properties will be\nignored. This is has no effect if not provided."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17310,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 5336,
											"name": "mirroringSourceId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Chrome OS only. If set and not empty, enables mirroring for this display\nonly. Otherwise disables mirroring for all displays. This value should\nindicate the id of the source display to mirror, which must not be the same\nas the id passed to setDisplayProperties. If set, no other property may be\nset.",
												"tags": [
													{
														"tag": "deprecated",
														"text": "Use {@link setMirrorMode}.\n"
													}
												]
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17321,
													"character": 23
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 5338,
											"name": "overscan",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "If set, sets the display's overscan insets to the provided values. Note that\noverscan values may not be negative or larger than a half of the screen's\nsize. Overscan cannot be changed on the internal monitor."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17335,
													"character": 14
												}
											],
											"type": {
												"type": "reference",
												"id": 5277,
												"name": "Insets"
											}
										},
										{
											"id": 5339,
											"name": "rotation",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "If set, updates the display's rotation. Legal values are [0, 90, 180, 270].\nThe rotation is set clockwise, relative to the display's vertical position."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17341,
													"character": 14
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												5340,
												5341,
												5342,
												5343,
												5337,
												5335,
												5336,
												5338,
												5339
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17302,
											"character": 38
										}
									]
								},
								{
									"id": 5314,
									"name": "DisplayUnitInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 5332,
											"name": "availableDisplayZoomFactors",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "A list of zoom factor values that can be set for the display."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17293,
													"character": 33
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										},
										{
											"id": 5327,
											"name": "bounds",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The display's logical bounds."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17263,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"id": 5272,
												"name": "Bounds"
											}
										},
										{
											"id": 5333,
											"name": "displayZoomFactor",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The ratio between the display's current and default zoom. For example, value\n1 is equivalent to 100% zoom, and value 1.5 is equivalent to 150% zoom."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17299,
													"character": 23
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5324,
											"name": "dpiX",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The number of pixels per inch along the x-axis."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17245,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5325,
											"name": "dpiY",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The number of pixels per inch along the y-axis."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17250,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5317,
											"name": "edid",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "NOTE: This is only available to Chrome OS Kiosk apps and Web UI."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17205,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"id": 5310,
												"name": "Edid"
											}
										},
										{
											"id": 5331,
											"name": "hasTouchSupport",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "True if this display has a touch input device associated with it."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17288,
													"character": 21
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 5315,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The unique identifier of the display."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17195,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 5322,
											"name": "isEnabled",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "True if this display is enabled."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17234,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 5321,
											"name": "isInternal",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "True if this is an internal display."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17229,
													"character": 16
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 5320,
											"name": "isPrimary",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "True if this is the primary display."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17224,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 5323,
											"name": "isUnified",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "True for all displays when in unified desktop mode. See documentation for\n{@link enableUnifiedDesktop}."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17240,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 5319,
											"name": "mirroringDestinationIds",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Chrome OS only. Identifiers of the displays to which the source display is\nbeing mirrored. Empty if no displays are being mirrored. This will be set to\nthe same value for all displays. This must not include |mirroringSourceId|."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17219,
													"character": 29
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 5318,
											"name": "mirroringSourceId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Chrome OS only. Identifier of the display that is being mirrored if mirroring\nis enabled, otherwise empty. This will be set for all displays (including the\ndisplay being mirrored)."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17212,
													"character": 23
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 5330,
											"name": "modes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The list of available display modes. The current mode will have\nisSelected=true. Only available on Chrome OS. Will be set to an empty array\non other platforms."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17283,
													"character": 11
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 5293,
													"name": "DisplayMode"
												}
											}
										},
										{
											"id": 5316,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The user-friendly name (e.g. \"HP LCD monitor\")."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17200,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 5328,
											"name": "overscan",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The display's insets within its screen's bounds. Currently exposed only on\nChromeOS. Will be set to empty insets on other platforms."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17269,
													"character": 14
												}
											],
											"type": {
												"type": "reference",
												"id": 5277,
												"name": "Insets"
											}
										},
										{
											"id": 5326,
											"name": "rotation",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The display's clockwise rotation in degrees relative to the vertical\nposition. Currently exposed only on ChromeOS. Will be set to 0 on other\nplatforms. A value of -1 will be interpreted as auto-rotate when the device\nis in a physical tablet state."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17258,
													"character": 14
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5329,
											"name": "workArea",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The usable work area of the display within the display bounds. The work area\nexcludes areas of the display reserved for OS, for example taskbar and\nlauncher."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17276,
													"character": 14
												}
											],
											"type": {
												"type": "reference",
												"id": 5272,
												"name": "Bounds"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												5332,
												5327,
												5333,
												5324,
												5325,
												5317,
												5331,
												5315,
												5322,
												5321,
												5320,
												5323,
												5319,
												5318,
												5330,
												5316,
												5328,
												5326,
												5329
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17191,
											"character": 36
										}
									]
								},
								{
									"id": 5310,
									"name": "Edid",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 5311,
											"name": "manufacturerId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "3 character manufacturer code. See Sec. 3.4.1 page 21. Required in v1.4."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17178,
													"character": 20
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 5312,
											"name": "productId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "2 byte manufacturer-assigned code, Sec. 3.4.2 page 21. Required in v1.4."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17183,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 5313,
											"name": "yearOfManufacture",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Year of manufacturer, Sec. 3.4.4 page 22. Required in v1.4."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17188,
													"character": 23
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												5311,
												5312,
												5313
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17174,
											"character": 25
										}
									]
								},
								{
									"id": 5344,
									"name": "GetInfoFlags",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 5345,
											"name": "singleUnified",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "If set to true, only a single {@link DisplayUnitInfo} will be returned by\n{@link getInfo} when in unified desktop mode (see {@link\nenableUnifiedDesktop}). Defaults to false."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17381,
													"character": 19
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												5345
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17375,
											"character": 33
										}
									]
								},
								{
									"id": 5277,
									"name": "Insets",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 5281,
											"name": "bottom",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The y-axis distance from the bottom bound."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17042,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5278,
											"name": "left",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The x-axis distance from the left bound."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17027,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5280,
											"name": "right",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The x-axis distance from the right bound."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17037,
													"character": 11
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5279,
											"name": "top",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The y-axis distance from the top bound."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17032,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												5281,
												5278,
												5280,
												5279
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17023,
											"character": 27
										}
									]
								},
								{
									"id": 5347,
									"name": "MirrorModeInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 5350,
											"name": "mirroringDestinationIds",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "The ids of the mirroring destination displays. This is only valid for\n'mixed'."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17405,
													"character": 29
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 5349,
											"name": "mirroringSourceId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "The id of the mirroring source display. This is only valid for 'mixed'."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17399,
													"character": 23
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 5348,
											"name": "mode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The mirror mode that should be set."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17394,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"id": 5346,
												"name": "MirrorMode"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												5350,
												5349,
												5348
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17390,
											"character": 35
										}
									]
								},
								{
									"id": 5282,
									"name": "Point",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 5283,
											"name": "x",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The x-coordinate of the point."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17049,
													"character": 7
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5284,
											"name": "y",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The y-coordinate of the point."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17054,
													"character": 7
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												5283,
												5284
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17045,
											"character": 26
										}
									]
								},
								{
									"id": 5285,
									"name": "TouchCalibrationPair",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 5286,
											"name": "displayPoint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The coordinates of the display point."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17061,
													"character": 18
												}
											],
											"type": {
												"type": "reference",
												"id": 5282,
												"name": "Point"
											}
										},
										{
											"id": 5287,
											"name": "touchPoint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The coordinates of the touch point corresponding to the display point."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17066,
													"character": 16
												}
											],
											"type": {
												"type": "reference",
												"id": 5282,
												"name": "Point"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												5286,
												5287
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17057,
											"character": 41
										}
									]
								},
								{
									"id": 5288,
									"name": "TouchCalibrationPairQuad",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 5289,
											"name": "pair1",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "First pair of touch and display point required for touch calibration."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17073,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"id": 5285,
												"name": "TouchCalibrationPair"
											}
										},
										{
											"id": 5290,
											"name": "pair2",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Second pair of touch and display point required for touch calibration."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17078,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"id": 5285,
												"name": "TouchCalibrationPair"
											}
										},
										{
											"id": 5291,
											"name": "pair3",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Third pair of touch and display point required for touch calibration."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17083,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"id": 5285,
												"name": "TouchCalibrationPair"
											}
										},
										{
											"id": 5292,
											"name": "pair4",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Fourth pair of touch and display point required for touch calibration."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17088,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"id": 5285,
												"name": "TouchCalibrationPair"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												5289,
												5290,
												5291,
												5292
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17069,
											"character": 45
										}
									]
								},
								{
									"id": 5304,
									"name": "LayoutPosition",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Layout position, i.e. edge of parent that the display is attached to."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17148,
											"character": 30
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "top"
											},
											{
												"type": "literal",
												"value": "right"
											},
											{
												"type": "literal",
												"value": "bottom"
											},
											{
												"type": "literal",
												"value": "left"
											}
										]
									}
								},
								{
									"id": 5346,
									"name": "MirrorMode",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Mirror mode, i.e. different ways of how a display is mirrored to other\ndisplays."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17388,
											"character": 26
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "off"
											},
											{
												"type": "literal",
												"value": "normal"
											},
											{
												"type": "literal",
												"value": "mixed"
											}
										]
									}
								},
								{
									"id": 5351,
									"name": "onDisplayChanged",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"comment": {
										"shortText": "Fired when anything changes to the display configuration."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17605,
											"character": 33
										}
									],
									"type": {
										"type": "reference",
										"id": 2537,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 5352,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 17605,
															"character": 55
														}
													],
													"signatures": [
														{
															"id": 5353,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										],
										"name": "chrome.events.Event"
									}
								},
								{
									"id": 5263,
									"name": "clearTouchCalibration",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17584,
											"character": 41
										}
									],
									"signatures": [
										{
											"id": 5264,
											"name": "clearTouchCalibration",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Resets the touch calibration for the display and brings it back to its\ndefault state by clearing any touch calibration data associated with the\ndisplay."
											},
											"parameters": [
												{
													"id": 5265,
													"name": "id",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The display's unique identifier.\n"
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 5259,
									"name": "completeCustomTouchCalibration",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17572,
											"character": 50
										}
									],
									"signatures": [
										{
											"id": 5260,
											"name": "completeCustomTouchCalibration",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Sets the touch calibration pairs for a display. These |pairs| would be used\nto calibrate the touch screen for display with |id| called in\nstartCustomTouchCalibration(). Always call |startCustomTouchCalibration|\nbefore calling this method. If another touch calibration is already in\nprogress this will throw an error."
											},
											"parameters": [
												{
													"id": 5261,
													"name": "pairs",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The pairs of point used to calibrate the display."
													},
													"type": {
														"type": "reference",
														"id": 5288,
														"name": "TouchCalibrationPairQuad"
													}
												},
												{
													"id": 5262,
													"name": "bounds",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Bounds of the display when the touch calibration was performed.     |bounds.left| and |bounds.top| values are ignored.\n"
													},
													"type": {
														"type": "reference",
														"id": 5272,
														"name": "Bounds"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 5233,
									"name": "enableUnifiedDesktop",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17485,
											"character": 40
										}
									],
									"signatures": [
										{
											"id": 5234,
											"name": "enableUnifiedDesktop",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Enables/disables the unified desktop feature. If enabled while mirroring is\nactive, the desktop mode will not change until mirroring is turned off.\nOtherwise, the desktop mode will switch to unified immediately. NOTE: This is\nonly available to Chrome OS Kiosk apps and Web UI."
											},
											"parameters": [
												{
													"id": 5235,
													"name": "enabled",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "True if unified desktop should be enabled.\n"
													},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 5214,
									"name": "getDisplayLayout",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17441,
											"character": 36
										}
									],
									"signatures": [
										{
											"id": 5215,
											"name": "getDisplayLayout",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Requests the layout info for all displays. NOTE: This is only available to\nChrome OS Kiosk apps and Web UI."
											},
											"parameters": [
												{
													"id": 5216,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The callback to invoke with the results."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 5217,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 17442,
																	"character": 15
																}
															],
															"signatures": [
																{
																	"id": 5218,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 5219,
																			"name": "layouts",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "\n"
																			},
																			"type": {
																				"type": "array",
																				"elementType": {
																					"type": "reference",
																					"id": 5305,
																					"name": "DisplayLayout"
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 5202,
									"name": "getInfo",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17415,
											"character": 27
										}
									],
									"signatures": [
										{
											"id": 5203,
											"name": "getInfo",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Requests the information for all attached display devices."
											},
											"parameters": [
												{
													"id": 5204,
													"name": "flags",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Options affecting how the information is returned."
													},
													"type": {
														"type": "reference",
														"id": 5344,
														"name": "GetInfoFlags"
													}
												},
												{
													"id": 5205,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The callback to invoke with the results."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 5206,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 17417,
																	"character": 15
																}
															],
															"signatures": [
																{
																	"id": 5207,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 5208,
																			"name": "displayInfo",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "\n"
																			},
																			"type": {
																				"type": "array",
																				"elementType": {
																					"type": "reference",
																					"id": 5314,
																					"name": "DisplayUnitInfo"
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										},
										{
											"id": 5209,
											"name": "getInfo",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Requests the information for all attached display devices."
											},
											"parameters": [
												{
													"id": 5210,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The callback to invoke with the results."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 5211,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 17429,
																	"character": 15
																}
															],
															"signatures": [
																{
																	"id": 5212,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 5213,
																			"name": "displayInfo",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "\n"
																			},
																			"type": {
																				"type": "array",
																				"elementType": {
																					"type": "reference",
																					"id": 5314,
																					"name": "DisplayUnitInfo"
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 5239,
									"name": "overscanCalibrationAdjust",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17509,
											"character": 45
										}
									],
									"signatures": [
										{
											"id": 5240,
											"name": "overscanCalibrationAdjust",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Adjusts the current overscan insets for a display. Typically this should\neither move the display along an axis (e.g. left+right have the same value)\nor scale it along an axis (e.g. top+bottom have opposite values). Each Adjust\ncall is cumulative with previous calls since Start."
											},
											"parameters": [
												{
													"id": 5241,
													"name": "id",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The display's unique identifier."
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 5242,
													"name": "delta",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The amount to change the overscan insets.\n"
													},
													"type": {
														"type": "reference",
														"id": 5277,
														"name": "Insets"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 5246,
									"name": "overscanCalibrationComplete",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17530,
											"character": 47
										}
									],
									"signatures": [
										{
											"id": 5247,
											"name": "overscanCalibrationComplete",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Complete overscan adjustments for a display  by saving the current values and\nhiding the overlay."
											},
											"parameters": [
												{
													"id": 5248,
													"name": "id",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The display's unique identifier.\n"
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 5243,
									"name": "overscanCalibrationReset",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17520,
											"character": 44
										}
									],
									"signatures": [
										{
											"id": 5244,
											"name": "overscanCalibrationReset",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Resets the overscan insets for a display to the last saved value (i.e before\nStart was called)."
											},
											"parameters": [
												{
													"id": 5245,
													"name": "id",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The display's unique identifier.\n"
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 5236,
									"name": "overscanCalibrationStart",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17496,
											"character": 44
										}
									],
									"signatures": [
										{
											"id": 5237,
											"name": "overscanCalibrationStart",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Starts overscan calibration for a display. This will show an overlay on the\nscreen indicating the current overscan insets. If overscan calibration for\ndisplay |id| is in progress this will reset calibration."
											},
											"parameters": [
												{
													"id": 5238,
													"name": "id",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The display's unique identifier.\n"
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 5227,
									"name": "setDisplayLayout",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17472,
											"character": 36
										}
									],
									"signatures": [
										{
											"id": 5228,
											"name": "setDisplayLayout",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Set the layout for all displays. Any display not included will use the\ndefault layout. If a layout would overlap or be otherwise invalid it will be\nadjusted to a valid layout. After layout is resolved, an onDisplayChanged\nevent will be triggered. NOTE: This is only available to Chrome OS Kiosk apps\nand Web UI."
											},
											"parameters": [
												{
													"id": 5229,
													"name": "layouts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The layout information, required for all displays except     the primary display."
													},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 5305,
															"name": "DisplayLayout"
														}
													}
												},
												{
													"id": 5230,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "Empty function called when the function finishes. To find out     whether the function succeeded, {@link runtime.lastError} should be     queried.\n"
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 5231,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 17474,
																	"character": 16
																}
															],
															"signatures": [
																{
																	"id": 5232,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 5220,
									"name": "setDisplayProperties",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17456,
											"character": 40
										}
									],
									"signatures": [
										{
											"id": 5221,
											"name": "setDisplayProperties",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Updates the properties for the display specified by |id|, according to the\ninformation provided in |info|. On failure, {@link runtime.lastError} will be\nset. NOTE: This is only available to Chrome OS Kiosk apps and Web UI."
											},
											"parameters": [
												{
													"id": 5222,
													"name": "id",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The display's unique identifier."
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 5223,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The information about display properties that should be changed.     A property will be changed only if a new value for it is specified in     |info|."
													},
													"type": {
														"type": "reference",
														"id": 5334,
														"name": "DisplayProperties"
													}
												},
												{
													"id": 5224,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "Empty function called when the function finishes. To find out     whether the function succeeded, {@link runtime.lastError} should be     queried.\n"
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 5225,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 17459,
																	"character": 16
																}
															],
															"signatures": [
																{
																	"id": 5226,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 5266,
									"name": "setMirrorMode",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17597,
											"character": 33
										}
									],
									"signatures": [
										{
											"id": 5267,
											"name": "setMirrorMode",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Sets the display mode to the specified mirror mode. Each call resets the\nstate from previous calls. Calling setDisplayProperties() will fail for the\nmirroring destination displays. NOTE: This is only available to Chrome OS\nKiosk apps and Web UI."
											},
											"parameters": [
												{
													"id": 5268,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The information of the mirror mode that should be applied to the     display mode."
													},
													"type": {
														"type": "reference",
														"id": 5347,
														"name": "MirrorModeInfo"
													}
												},
												{
													"id": 5269,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "Empty function called when the function finishes. To find out     whether the function succeeded, {@link runtime.lastError} should be     queried.\n"
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 5270,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 17599,
																	"character": 16
																}
															],
															"signatures": [
																{
																	"id": 5271,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 5249,
									"name": "showNativeTouchCalibration",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17544,
											"character": 46
										}
									],
									"signatures": [
										{
											"id": 5250,
											"name": "showNativeTouchCalibration",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Displays the native touch calibration UX for the display with |id| as display\nid. This will show an overlay on the screen with required instructions on how\nto proceed. The callback will be invoked in case of successful calibration\nonly. If the calibration fails, this will throw an error."
											},
											"parameters": [
												{
													"id": 5251,
													"name": "id",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The display's unique identifier."
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 5252,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "Optional callback to inform the caller that the touch      calibration has ended. The argument of the callback informs if the      calibration was a success or not."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 5253,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 17546,
																	"character": 16
																}
															],
															"signatures": [
																{
																	"id": 5254,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 5255,
																			"name": "success",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "\n"
																			},
																			"type": {
																				"type": "intrinsic",
																				"name": "boolean"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 5256,
									"name": "startCustomTouchCalibration",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17558,
											"character": 47
										}
									],
									"signatures": [
										{
											"id": 5257,
											"name": "startCustomTouchCalibration",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Starts custom touch calibration for a display. This should be called when\nusing a custom UX for collecting calibration data. If another touch\ncalibration is already in progress this will throw an error."
											},
											"parameters": [
												{
													"id": 5258,
													"name": "id",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The display's unique identifier.\n"
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										5272,
										5305,
										5293,
										5334,
										5314,
										5310,
										5344,
										5277,
										5347,
										5282,
										5285,
										5288
									]
								},
								{
									"title": "Type aliases",
									"kind": 4194304,
									"children": [
										5304,
										5346
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										5351
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										5263,
										5259,
										5233,
										5214,
										5202,
										5239,
										5246,
										5243,
										5236,
										5227,
										5220,
										5266,
										5249,
										5256
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 17000,
									"character": 33
								}
							]
						},
						{
							"id": 5354,
							"name": "memory",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"comment": {
								"shortText": "The <code>chrome.system.memory</code> API.",
								"tags": [
									{
										"tag": "chrome-namespace",
										"text": "system.memory"
									},
									{
										"tag": "chrome-permission",
										"text": "system.memory\n"
									}
								]
							},
							"children": [
								{
									"id": 5361,
									"name": "MemoryInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 5363,
											"name": "availableCapacity",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The amount of available capacity, in bytes."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17680,
													"character": 23
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5362,
											"name": "capacity",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The total amount of physical memory capacity, in bytes."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17675,
													"character": 14
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												5363,
												5362
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17671,
											"character": 31
										}
									]
								},
								{
									"id": 5355,
									"name": "getInfo",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17689,
											"character": 27
										}
									],
									"signatures": [
										{
											"id": 5356,
											"name": "getInfo",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Get physical memory information."
											},
											"parameters": [
												{
													"id": 5357,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 5358,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 17690,
																	"character": 15
																}
															],
															"signatures": [
																{
																	"id": 5359,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 5360,
																			"name": "info",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "\n"
																			},
																			"type": {
																				"type": "reference",
																				"id": 5361,
																				"name": "MemoryInfo"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										5361
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										5355
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 17670,
									"character": 32
								}
							]
						},
						{
							"id": 5364,
							"name": "storage",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"comment": {
								"shortText": "Use the <code>chrome.system.storage</code> API to query storage device\ninformation and be notified when a removable storage device is attached and\ndetached.",
								"tags": [
									{
										"tag": "chrome-namespace",
										"text": "system.storage"
									},
									{
										"tag": "chrome-permission",
										"text": "system.storage\n"
									}
								]
							},
							"children": [
								{
									"id": 5391,
									"name": "StorageAvailableCapacityInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 5393,
											"name": "availableCapacity",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The available capacity of the storage device, in bytes."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17743,
													"character": 23
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5392,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "A copied |id| of getAvailableCapacity function parameter |id|."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17738,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												5393,
												5392
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17734,
											"character": 49
										}
									]
								},
								{
									"id": 5386,
									"name": "StorageUnitInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 5390,
											"name": "capacity",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The total amount of the storage space, in bytes."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17731,
													"character": 14
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5387,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The transient ID that uniquely identifies the storage device. This ID will be\npersistent within the same run of a single application. It will not be a\npersistent identifier between different runs of an application, or between\ndifferent applications."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17716,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 5388,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The name of the storage unit."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17721,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 5389,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The media type of the storage unit."
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17726,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"id": 5385,
												"name": "StorageUnitType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												5390,
												5387,
												5388,
												5389
											]
										}
									],
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17709,
											"character": 36
										}
									]
								},
								{
									"id": 5394,
									"name": "EjectDeviceResultCode",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17746,
											"character": 37
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "success"
											},
											{
												"type": "literal",
												"value": "in_use"
											},
											{
												"type": "literal",
												"value": "no_such_device"
											},
											{
												"type": "literal",
												"value": "failure"
											}
										]
									}
								},
								{
									"id": 5385,
									"name": "StorageUnitType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17707,
											"character": 31
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "fixed"
											},
											{
												"type": "literal",
												"value": "removable"
											},
											{
												"type": "literal",
												"value": "unknown"
											}
										]
									}
								},
								{
									"id": 5395,
									"name": "onAttached",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"comment": {
										"shortText": "Fired when a new removable storage is attached to the system."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17793,
											"character": 27
										}
									],
									"type": {
										"type": "reference",
										"id": 2537,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 5396,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"comment": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 17793,
															"character": 49
														}
													],
													"signatures": [
														{
															"id": 5397,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"comment": {},
															"parameters": [
																{
																	"id": 5398,
																	"name": "info",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 5386,
																		"name": "StorageUnitInfo"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										],
										"name": "chrome.events.Event"
									}
								},
								{
									"id": 5399,
									"name": "onDetached",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"comment": {
										"shortText": "Fired when a removable storage is detached from the system."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17805,
											"character": 27
										}
									],
									"type": {
										"type": "reference",
										"id": 2537,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 5400,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"comment": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 17805,
															"character": 49
														}
													],
													"signatures": [
														{
															"id": 5401,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"comment": {},
															"parameters": [
																{
																	"id": 5402,
																	"name": "id",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										],
										"name": "chrome.events.Event"
									}
								},
								{
									"id": 5371,
									"name": "ejectDevice",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17768,
											"character": 31
										}
									],
									"signatures": [
										{
											"id": 5372,
											"name": "ejectDevice",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Ejects a removable storage device."
											},
											"parameters": [
												{
													"id": 5373,
													"name": "id",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 5374,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 5375,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 17770,
																	"character": 15
																}
															],
															"signatures": [
																{
																	"id": 5376,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 5377,
																			"name": "result",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "\n"
																			},
																			"type": {
																				"type": "reference",
																				"id": 5394,
																				"name": "EjectDeviceResultCode"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 5378,
									"name": "getAvailableCapacity",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17783,
											"character": 40
										}
									],
									"signatures": [
										{
											"id": 5379,
											"name": "getAvailableCapacity",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Get the available capacity of a specified |id| storage device. The |id| is\nthe transient device ID from StorageUnitInfo."
											},
											"parameters": [
												{
													"id": 5380,
													"name": "id",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 5381,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 5382,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 17785,
																	"character": 15
																}
															],
															"signatures": [
																{
																	"id": 5383,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 5384,
																			"name": "info",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "\n"
																			},
																			"type": {
																				"type": "reference",
																				"id": 5391,
																				"name": "StorageAvailableCapacityInfo"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 5365,
									"name": "getInfo",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17755,
											"character": 27
										}
									],
									"signatures": [
										{
											"id": 5366,
											"name": "getInfo",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Get the storage information from the system. The argument passed to the\ncallback is an array of StorageUnitInfo objects."
											},
											"parameters": [
												{
													"id": 5367,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 5368,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 17756,
																	"character": 15
																}
															],
															"signatures": [
																{
																	"id": 5369,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 5370,
																			"name": "info",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "\n"
																			},
																			"type": {
																				"type": "array",
																				"elementType": {
																					"type": "reference",
																					"id": 5386,
																					"name": "StorageUnitInfo"
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										5391,
										5386
									]
								},
								{
									"title": "Type aliases",
									"kind": 4194304,
									"children": [
										5394,
										5385
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										5395,
										5399
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										5371,
										5378,
										5365
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 17706,
									"character": 33
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								5180,
								5201,
								5354,
								5364
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 16912,
							"character": 25
						}
					]
				},
				{
					"id": 5403,
					"name": "systemIndicator",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Manages an app's system indicator icon, an image displayed in the system's\nmenubar, system tray, or other visible area provided by the OS.\nThis is\nmodelled after the other extension action APIs, such as\nchrome.browserAction\nand chrome.pageAction.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "systemIndicator"
							},
							{
								"tag": "alpha",
								"text": "\n"
							}
						]
					},
					"children": [
						{
							"id": 5414,
							"name": "SetIconDetails",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 5416,
									"name": "imageData",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17627,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 5415,
									"name": "path",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17625,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										5416,
										5415
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 17624,
									"character": 35
								}
							]
						},
						{
							"id": 5417,
							"name": "onClicked",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired only when a click on the icon does not result in a menu being shown."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 17657,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 5418,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17657,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 5419,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 5412,
							"name": "disable",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 17652,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 5413,
									"name": "disable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Hide the icon from the status tray."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 5410,
							"name": "enable",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 17647,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 5411,
									"name": "enable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Show the icon in the status tray."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 5404,
							"name": "setIcon",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 17639,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 5405,
									"name": "setIcon",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Set the image to be used as an indicator icon, using a set of ImageData\nobjects. These objects should have multiple resolutions so that an\nappropriate size can be selected for the given icon size and DPI scaling\nsettings. Only square ImageData objects are accepted."
									},
									"parameters": [
										{
											"id": 5406,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 5414,
												"name": "SetIconDetails"
											}
										},
										{
											"id": 5407,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5408,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 17641,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 5409,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								5414
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								5417
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								5412,
								5410,
								5404
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 17623,
							"character": 34
						}
					]
				},
				{
					"id": 5420,
					"name": "tabCapture",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.tabCapture</code> API to interact with tab media\nstreams.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "tabCapture"
							},
							{
								"tag": "chrome-permission",
								"text": "tabCapture\n"
							}
						]
					},
					"children": [
						{
							"id": 5455,
							"name": "CaptureInfo",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 5458,
									"name": "fullscreen",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Whether an element in the tab being captured is in fullscreen mode."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17841,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 5457,
									"name": "status",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The new capture status of the tab."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17836,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 5454,
										"name": "TabCaptureState"
									}
								},
								{
									"id": 5456,
									"name": "tabId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The id of the tab whose status changed."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17831,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										5458,
										5457,
										5456
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 17827,
									"character": 32
								}
							]
						},
						{
							"id": 5468,
							"name": "CaptureOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 5469,
									"name": "audio",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17851,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 5471,
									"name": "audioConstraints",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17855,
											"character": 22
										}
									],
									"type": {
										"type": "reference",
										"id": 5459,
										"name": "MediaStreamConstraint"
									}
								},
								{
									"id": 5470,
									"name": "video",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17853,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 5472,
									"name": "videoConstraints",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17857,
											"character": 22
										}
									],
									"type": {
										"type": "reference",
										"id": 5459,
										"name": "MediaStreamConstraint"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										5469,
										5471,
										5470,
										5472
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 17850,
									"character": 35
								}
							]
						},
						{
							"id": 5473,
							"name": "GetMediaStreamOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 5474,
									"name": "consumerTabId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Optional tab id of the tab which will later invoke\n<code>getUserMedia()</code> to consume the stream. If not specified then the\nresulting stream can be used only by the calling extension. The stream can\nonly be used by frames in the given tab whose security origin matches the\nconsumber tab's origin. The tab's origin must be a secure origin, e.g. HTTPS."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17868,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 5475,
									"name": "targetTabId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Optional tab id of the tab which will be captured. If not specified then the\ncurrent active tab will be selected. Only tabs for which the extension has\nbeen granted the <code>activeTab</code> permission can be used as the target\ntab."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17876,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										5474,
										5475
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 17860,
									"character": 42
								}
							]
						},
						{
							"id": 5459,
							"name": "MediaStreamConstraint",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 5460,
									"name": "mandatory",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17845,
											"character": 15
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 5461,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": {
												"id": 5462,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 5463,
														"name": "name",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									}
								},
								{
									"id": 5464,
									"name": "optional",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 17847,
											"character": 14
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 5465,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": {
												"id": 5466,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 5467,
														"name": "name",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										5460,
										5464
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 17844,
									"character": 42
								}
							]
						},
						{
							"id": 5454,
							"name": "TabCaptureState",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 17825,
									"character": 31
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "pending"
									},
									{
										"type": "literal",
										"value": "active"
									},
									{
										"type": "literal",
										"value": "stopped"
									},
									{
										"type": "literal",
										"value": "error"
									}
								]
							}
						},
						{
							"id": 5476,
							"name": "onStatusChanged",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Event fired when the capture status of a tab changes. This allows extension\nauthors to keep track of the capture status of tabs to keep UI elements like\npage actions in sync."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 17978,
									"character": 32
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 5477,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 17978,
													"character": 54
												}
											],
											"signatures": [
												{
													"id": 5478,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 5479,
															"name": "info",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "CaptureInfo with new capture status for the tab.\n"
															},
															"type": {
																"type": "reference",
																"id": 5455,
																"name": "CaptureInfo"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 5421,
							"name": "capture",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 17891,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 5422,
									"name": "capture",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Captures the visible area of the currently active tab.  Capture can only be\nstarted on the currently active tab after the extension has been\n<em>invoked</em>, similar to the way that <a\nhref=\"activeTab#invoking-activeTab\">activeTab</a> works.  Capture is\nmaintained across page navigations within the tab, and stops when the tab is\nclosed, or the media stream is closed by the extension."
									},
									"parameters": [
										{
											"id": 5423,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Configures the returned media stream."
											},
											"type": {
												"type": "reference",
												"id": 5468,
												"name": "CaptureOptions"
											}
										},
										{
											"id": 5424,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Callback with either the tab capture MediaStream or   <code>null</code>.  <code>null</code> indicates an error has occurred   and the client may query {@link runtime.lastError} to access the error   details."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5425,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 17893,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 5426,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5427,
																	"name": "stream",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 5,
																		"name": "LocalMediaStream"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 5434,
							"name": "captureOffscreenTab",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 17935,
									"character": 39
								}
							],
							"signatures": [
								{
									"id": 5435,
									"name": "captureOffscreenTab",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "<p>Creates an off-screen tab and navigates it to the given |startUrl|. Then,\ncapture is started and a MediaStream is returned via\n|callback|.</p><p>Off-screen tabs are isolated from the user's normal browser\nexperience. They do not show up in the browser window or tab strip, nor are\nthey visible to extensions (e.g., via the chrome.tabs.* APIs).</p><p>An\noff-screen tab remains alive until one of three events occurs: 1. All\nMediaStreams providing its captured content are closed; 2. the page\nself-closes (e.g., via window.close()); 3. the extension that called\ncaptureOffscreenTab() is unloaded.</p><p>Sandboxing: The off-screen tab does\nnot have any access whatsoever to the local user profile (including cookies,\nHTTP auth, etc.).  Instead, it is provided its own sandboxed profile.  Also,\nit cannot access any interactive resources such as keyboard/mouse input,\nmedia recording devices (e.g., web cams), copy/paste to/from the system\nclipboard, etc.</p><p>Note: This is a new API, currently only available in\nCanary/Dev channel, and may change without notice.</p>"
									},
									"parameters": [
										{
											"id": 5436,
											"name": "startUrl",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 5437,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Constraints for the capture and returned MediaStream."
											},
											"type": {
												"type": "reference",
												"id": 5468,
												"name": "CaptureOptions"
											}
										},
										{
											"id": 5438,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Callback with either the tab capture MediaStream or   <code>null</code>.  <code>null</code> indicates an error has occurred   and the client may query {@link runtime.lastError} to access the error   details."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5439,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 17938,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 5440,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5441,
																	"name": "stream",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 5,
																		"name": "LocalMediaStream"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 5428,
							"name": "getCapturedTabs",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 17907,
									"character": 35
								}
							],
							"signatures": [
								{
									"id": 5429,
									"name": "getCapturedTabs",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a list of tabs that have requested capture or are being captured,\ni.e. status != stopped and status != error. This allows extensions to inform\nthe user that there is an existing tab capture that would prevent a new tab\ncapture from succeeding (or to prevent redundant requests for the same tab)."
									},
									"parameters": [
										{
											"id": 5430,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Callback invoked with CaptureInfo[] for captured tabs."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5431,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 17908,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 5432,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5433,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 5455,
																			"name": "CaptureInfo"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 5442,
							"name": "getMediaStreamId",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 17952,
									"character": 36
								}
							],
							"signatures": [
								{
									"id": 5443,
									"name": "getMediaStreamId",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a stream ID to capture the target tab. Similar to\nchrome.tabCapture.capture() method, but returns a media stream ID, instead of\na media stream, to the consumer tab."
									},
									"parameters": [
										{
											"id": 5444,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 5473,
												"name": "GetMediaStreamOptions"
											}
										},
										{
											"id": 5445,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Callback to invoke with the result. If successful, the result is an opaque string that can be passed to the <code>getUserMedia()</code> API to generate a media stream that corresponds to the target tab. The created <code>streamId</code> can only be used once and expires after a few seconds if it is not used."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5446,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 17954,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 5447,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5448,
																	"name": "streamId",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								},
								{
									"id": 5449,
									"name": "getMediaStreamId",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a stream ID to capture the target tab. Similar to\nchrome.tabCapture.capture() method, but returns a media stream ID, instead of\na media stream, to the consumer tab."
									},
									"parameters": [
										{
											"id": 5450,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Callback to invoke with the result. If successful, the result is an opaque string that can be passed to the <code>getUserMedia()</code> API to generate a media stream that corresponds to the target tab. The created <code>streamId</code> can only be used once and expires after a few seconds if it is not used."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5451,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 17968,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 5452,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5453,
																	"name": "streamId",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								5455,
								5468,
								5473,
								5459
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								5454
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								5476
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								5421,
								5434,
								5428,
								5442
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 17824,
							"character": 29
						}
					]
				},
				{
					"id": 5480,
					"name": "tabGroups",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.tabGroups</code> API to interact with the browser's tab\ngrouping system. You can use this API to modify and rearrange tab groups in\nthe browser. To group and ungroup tabs, or to query what tabs are in groups,\nuse the <code>chrome.tabs</code> API.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "tabGroups"
							},
							{
								"tag": "chrome-permission",
								"text": "tabGroups\n"
							}
						]
					},
					"children": [
						{
							"id": 5524,
							"name": "TabGroup",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 5526,
									"name": "collapsed",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Whether the group is collapsed. A collapsed group is one whose tabs are\nhidden."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 18015,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 5527,
									"name": "color",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The group's color."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 18020,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"id": 5523,
										"name": "Color"
									}
								},
								{
									"id": 5525,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The ID of the group. Group IDs are unique within a browser session."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 18009,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 5528,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The title of the group."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 18025,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 5529,
									"name": "windowId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The ID of the window that contains the group."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 18030,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										5526,
										5527,
										5525,
										5528,
										5529
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 18005,
									"character": 29
								}
							]
						},
						{
							"id": 5523,
							"name": "Color",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The group's color."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 18003,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "grey"
									},
									{
										"type": "literal",
										"value": "blue"
									},
									{
										"type": "literal",
										"value": "red"
									},
									{
										"type": "literal",
										"value": "yellow"
									},
									{
										"type": "literal",
										"value": "green"
									},
									{
										"type": "literal",
										"value": "pink"
									},
									{
										"type": "literal",
										"value": "purple"
									},
									{
										"type": "literal",
										"value": "cyan"
									}
								]
							}
						},
						{
							"id": 5530,
							"name": "TAB_GROUP_ID_NONE",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "An ID that represents the absence of a group."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 18036,
									"character": 34
								}
							],
							"type": {
								"type": "literal",
								"value": -1
							}
						},
						{
							"id": 5531,
							"name": "onCreated",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a group is created."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 18152,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 5532,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 18152,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 5533,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 5534,
															"name": "group",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Details of the group that was created.\n"
															},
															"type": {
																"type": "reference",
																"id": 5524,
																"name": "TabGroup"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 5539,
							"name": "onMoved",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a group is moved within a window. Move events are still fired for\nthe individual tabs within the group, as well as for the group itself. This\nevent is not fired when a group is moved between windows; instead, it will be\nremoved from one window and created in another."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 18179,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 5540,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 18179,
													"character": 46
												}
											],
											"signatures": [
												{
													"id": 5541,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 5542,
															"name": "group",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Details of the group that was moved.\n"
															},
															"type": {
																"type": "reference",
																"id": 5524,
																"name": "TabGroup"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 5543,
							"name": "onRemoved",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a group is closed, either directly by the user or automatically\nbecause it contained zero tabs."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 18192,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 5544,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 18192,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 5545,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 5546,
															"name": "group",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Details of the group that was removed.\n"
															},
															"type": {
																"type": "reference",
																"id": 5524,
																"name": "TabGroup"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 5535,
							"name": "onUpdated",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a group is updated."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 18164,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 5536,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 18164,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 5537,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 5538,
															"name": "group",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Details of the group that was updated.\n"
															},
															"type": {
																"type": "reference",
																"id": 5524,
																"name": "TabGroup"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 5481,
							"name": "get",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 18045,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 5482,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieves details about the specified group."
									},
									"parameters": [
										{
											"id": 5483,
											"name": "groupId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5484,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5485,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 18047,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 5486,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5487,
																	"name": "group",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 5524,
																		"name": "TabGroup"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 5512,
							"name": "move",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 18128,
									"character": 24
								}
							],
							"signatures": [
								{
									"id": 5513,
									"name": "move",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Moves the group and all its tabs within its window, or to a new window."
									},
									"parameters": [
										{
											"id": 5514,
											"name": "groupId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ID of the group to move."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5515,
											"name": "moveProperties",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5516,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 5518,
															"name": "index",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "The position to move the group to. Use <code>-1</code> to place the group at\nthe end of the window."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18142,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 5517,
															"name": "windowId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The window to move the group to. Defaults to the window the group is\ncurrently in. Note that groups can only be moved to and from windows with\n{@link windows.WindowType} type <code>\"normal\"</code>."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18136,
																	"character": 16
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																5518,
																5517
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 18130,
															"character": 21
														}
													]
												}
											}
										},
										{
											"id": 5519,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5520,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 18144,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 5521,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5522,
																	"name": "group",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"text": "Details about the moved group.\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 5524,
																		"name": "TabGroup"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 5488,
							"name": "query",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 18060,
									"character": 25
								}
							],
							"signatures": [
								{
									"id": 5489,
									"name": "query",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all groups that have the specified properties, or all groups if no\nproperties are specified."
									},
									"parameters": [
										{
											"id": 5490,
											"name": "queryInfo",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5491,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 5492,
															"name": "collapsed",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether the groups are collapsed."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18065,
																	"character": 17
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 5493,
															"name": "color",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The color of the groups."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18070,
																	"character": 13
																}
															],
															"type": {
																"type": "reference",
																"id": 5523,
																"name": "Color"
															}
														},
														{
															"id": 5494,
															"name": "title",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Match group titles against a pattern."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18075,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 5495,
															"name": "windowId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The ID of the parent window, or {@link windows.WINDOW_ID_CURRENT} for the <a\nhref='windows#current-window'>current window</a>."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18081,
																	"character": 16
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																5492,
																5493,
																5494,
																5495
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 18061,
															"character": 16
														}
													]
												}
											}
										},
										{
											"id": 5496,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5497,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 18083,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 5498,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5499,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 5524,
																			"name": "TabGroup"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 5500,
							"name": "update",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 18097,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 5501,
									"name": "update",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Modifies the properties of a group. Properties that are not specified in\n<var>updateProperties</var> are not modified."
									},
									"parameters": [
										{
											"id": 5502,
											"name": "groupId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ID of the group to modify."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5503,
											"name": "updateProperties",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5504,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 5505,
															"name": "collapsed",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether the group should be collapsed."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18103,
																	"character": 17
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 5506,
															"name": "color",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The color of the group."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18108,
																	"character": 13
																}
															],
															"type": {
																"type": "reference",
																"id": 5523,
																"name": "Color"
															}
														},
														{
															"id": 5507,
															"name": "title",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The title of the group."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18113,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																5505,
																5506,
																5507
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 18099,
															"character": 23
														}
													]
												}
											}
										},
										{
											"id": 5508,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5509,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 18115,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 5510,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5511,
																	"name": "group",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"text": "Details about the updated group.\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 5524,
																		"name": "TabGroup"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								5524
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								5523
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								5530,
								5531,
								5539,
								5543,
								5535
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								5481,
								5512,
								5488,
								5500
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 17999,
							"character": 28
						}
					]
				},
				{
					"id": 5547,
					"name": "tabs",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.tabs</code> API to interact with the browser's tab\nsystem. You can use this API to create, modify, and rearrange tabs in the\nbrowser.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "tabs\n"
							}
						]
					},
					"children": [
						{
							"id": 5888,
							"name": "MutedInfo",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "The tab's muted state and the reason for the last state change."
							},
							"children": [
								{
									"id": 5891,
									"name": "extensionId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The ID of the extension that changed the muted state. Not set if an extension\nwas not the reason the muted state last changed."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 18243,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 5889,
									"name": "muted",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Whether the tab is muted (prevented from playing sound). The tab may be muted\neven if it has not played or is not currently playing sound. Equivalent to\nwhether the 'muted' audio indicator is showing."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 18231,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 5890,
									"name": "reason",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The reason the tab was muted or unmuted. Not set if the tab's mute state has\nnever been changed."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 18237,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 5887,
										"name": "MutedInfoReason"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										5891,
										5889,
										5890
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 18225,
									"character": 30
								}
							]
						},
						{
							"id": 5892,
							"name": "Tab",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 5900,
									"name": "active",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Whether the tab is active in its window. Does not necessarily mean the window\nis focused."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 18293,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 5902,
									"name": "audible",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Whether the tab has produced sound over the past couple of seconds (but it\nmight not be heard if also muted). Equivalent to whether the 'speaker audio'\nindicator is showing."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 18305,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 5904,
									"name": "autoDiscardable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Whether the tab can be discarded automatically by the browser when resources\nare low."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 18318,
											"character": 21
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 5903,
									"name": "discarded",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Whether the tab is discarded. A discarded tab is one whose content has been\nunloaded from memory, but is still visible in the tab strip. Its content is\nreloaded the next time it is activated."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 18312,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 5909,
									"name": "favIconUrl",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The URL of the tab's favicon. This property is only present if the\nextension's manifest includes the <code>\"tabs\"</code> permission. It may also\nbe an empty string if the tab is loading."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 18351,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 5895,
									"name": "groupId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The ID of the group that the tab belongs to."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 18264,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 5913,
									"name": "height",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The height of the tab in pixels."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 18371,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 5899,
									"name": "highlighted",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Whether the tab is highlighted."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 18287,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 5893,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The ID of the tab. Tab IDs are unique within a browser session. Under some\ncircumstances a tab may not be assigned an ID; for example, when querying\nforeign tabs using the {@link sessions} API, in which case a session ID may\nbe present. Tab ID can also be set to <code>chrome.tabs.TAB_ID_NONE</code>\nfor apps and devtools windows."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 18254,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 5911,
									"name": "incognito",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Whether the tab is in an incognito window."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 18361,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 5894,
									"name": "index",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The zero-based index of the tab within its window."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 18259,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 5905,
									"name": "mutedInfo",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The tab's muted state and the reason for the last state change."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 18323,
											"character": 15
										}
									],
									"type": {
										"type": "reference",
										"id": 5888,
										"name": "MutedInfo"
									}
								},
								{
									"id": 5897,
									"name": "openerTabId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The ID of the tab that opened this tab, if any. This property is only present\nif the opener tab still exists."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 18275,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 5907,
									"name": "pendingUrl",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The URL the tab is navigating to, before it has committed. This property is\nonly present if the extension's manifest includes the <code>\"tabs\"</code>\npermission and there is a pending navigation."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 18338,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 5901,
									"name": "pinned",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Whether the tab is pinned."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 18298,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 5898,
									"name": "selected",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Whether the tab is selected.",
										"tags": [
											{
												"tag": "deprecated",
												"text": "Please use {@link tabs.Tab.highlighted}.\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 18282,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 5914,
									"name": "sessionId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The session ID used to uniquely identify a tab obtained from the {@link\nsessions} API."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 18377,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 5910,
									"name": "status",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The tab's loading status."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 18356,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 5886,
										"name": "TabStatus"
									}
								},
								{
									"id": 5908,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The title of the tab. This property is only present if the extension's\nmanifest includes the <code>\"tabs\"</code> permission."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 18344,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 5906,
									"name": "url",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The last committed URL of the main frame of the tab. This property is only\npresent if the extension's manifest includes the <code>\"tabs\"</code>\npermission and may be an empty string if the tab has not yet committed. See\nalso {@link Tab.pendingUrl}."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 18331,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 5912,
									"name": "width",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The width of the tab in pixels."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 18366,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 5896,
									"name": "windowId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The ID of the window that contains the tab."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 18269,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										5900,
										5902,
										5904,
										5903,
										5909,
										5895,
										5913,
										5899,
										5893,
										5911,
										5894,
										5905,
										5897,
										5907,
										5901,
										5898,
										5914,
										5910,
										5908,
										5906,
										5912,
										5896
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 18246,
									"character": 24
								}
							]
						},
						{
							"id": 5917,
							"name": "ZoomSettings",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Defines how zoom changes in a tab are handled and at what scope."
							},
							"children": [
								{
									"id": 5920,
									"name": "defaultZoomFactor",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Used to return the default zoom level for the current tab in calls to\ntabs.getZoomSettings."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 18414,
											"character": 23
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 5918,
									"name": "mode",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Defines how zoom changes are handled, i.e., which entity is responsible for\nthe actual scaling of the page; defaults to <code>automatic</code>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 18401,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 5915,
										"name": "ZoomSettingsMode"
									}
								},
								{
									"id": 5919,
									"name": "scope",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Defines whether zoom changes persist for the page's origin, or only take\neffect in this tab; defaults to <code>per-origin</code> when in\n<code>automatic</code> mode, and <code>per-tab</code> otherwise."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 18408,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"id": 5916,
										"name": "ZoomSettingsScope"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										5920,
										5918,
										5919
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 18396,
									"character": 33
								}
							]
						},
						{
							"id": 5887,
							"name": "MutedInfoReason",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "An event that caused a muted state change."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 18220,
									"character": 31
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "user"
									},
									{
										"type": "literal",
										"value": "capture"
									},
									{
										"type": "literal",
										"value": "extension"
									}
								]
							}
						},
						{
							"id": 5886,
							"name": "TabStatus",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The tab's loading status."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 18215,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "unloaded"
									},
									{
										"type": "literal",
										"value": "loading"
									},
									{
										"type": "literal",
										"value": "complete"
									}
								]
							}
						},
						{
							"id": 5921,
							"name": "WindowType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The type of window."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 18420,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "normal"
									},
									{
										"type": "literal",
										"value": "popup"
									},
									{
										"type": "literal",
										"value": "panel"
									},
									{
										"type": "literal",
										"value": "app"
									},
									{
										"type": "literal",
										"value": "devtools"
									}
								]
							}
						},
						{
							"id": 5915,
							"name": "ZoomSettingsMode",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "Defines how zoom changes are handled, i.e., which entity is responsible for\nthe actual scaling of the page; defaults to <code>automatic</code>."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 18384,
									"character": 32
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "automatic"
									},
									{
										"type": "literal",
										"value": "manual"
									},
									{
										"type": "literal",
										"value": "disabled"
									}
								]
							}
						},
						{
							"id": 5916,
							"name": "ZoomSettingsScope",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "Defines whether zoom changes persist for the page's origin, or only take\neffect in this tab; defaults to <code>per-origin</code> when in\n<code>automatic</code> mode, and <code>per-tab</code> otherwise."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 18391,
									"character": 33
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "per-origin"
									},
									{
										"type": "literal",
										"value": "per-tab"
									}
								]
							}
						},
						{
							"id": 5922,
							"name": "TAB_ID_NONE",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "An ID that represents the absence of a browser tab."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 18425,
									"character": 28
								}
							],
							"type": {
								"type": "literal",
								"value": -1
							}
						},
						{
							"id": 5967,
							"name": "onActivated",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fires when the active tab in a window changes. Note that the tab's URL may\nnot be set at the time this event fired, but you can listen to onUpdated\nevents so as to be notified when a URL is set."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19510,
									"character": 28
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 5968,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 19510,
													"character": 50
												}
											],
											"signatures": [
												{
													"id": 5969,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 5970,
															"name": "activeInfo",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 5971,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 5972,
																			"name": "tabId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the tab that has become active."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 19519,
																					"character": 15
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 5973,
																			"name": "windowId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the window the active tab changed inside of."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 19524,
																					"character": 18
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				5972,
																				5973
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 19515,
																			"character": 19
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 5960,
							"name": "onActiveChanged",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fires when the selected tab in a window changes. Note that the tab's URL may\nnot be set at the time this event fired, but you can listen to {@link\ntabs.onUpdated} events so as to be notified when a URL is set.",
								"tags": [
									{
										"tag": "deprecated",
										"text": "Please use {@link tabs.onActivated}.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19489,
									"character": 32
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 5961,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 19489,
													"character": 54
												}
											],
											"signatures": [
												{
													"id": 5962,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 5963,
															"name": "tabId",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "The ID of the tab that has become active."
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 5964,
															"name": "selectInfo",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 5965,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 5966,
																			"name": "windowId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the window the selected tab changed inside of."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 19500,
																					"character": 18
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				5966
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 19496,
																			"character": 19
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 5996,
							"name": "onAttached",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a tab is attached to a window; for example, because it was moved\nbetween windows."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19597,
									"character": 27
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 5997,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 19597,
													"character": 49
												}
											],
											"signatures": [
												{
													"id": 5998,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 5999,
															"name": "tabId",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 6000,
															"name": "attachInfo",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 6001,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 6003,
																			"name": "newPosition",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 19606,
																					"character": 21
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6002,
																			"name": "newWindowId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 19605,
																					"character": 21
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				6003,
																				6002
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 19604,
																			"character": 19
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 5923,
							"name": "onCreated",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a tab is created. Note that the tab's URL may not be set at the\ntime this event is fired, but you can listen to onUpdated events so as to be\nnotified when a URL is set."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19364,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 5924,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 19364,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 5925,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 5926,
															"name": "tab",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Details of the tab that was created.\n"
															},
															"type": {
																"type": "reference",
																"id": 5892,
																"name": "Tab"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 5988,
							"name": "onDetached",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a tab is detached from a window; for example, because it was moved\nbetween windows."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19579,
									"character": 27
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 5989,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 19579,
													"character": 49
												}
											],
											"signatures": [
												{
													"id": 5990,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 5991,
															"name": "tabId",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 5992,
															"name": "detachInfo",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 5993,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 5995,
																			"name": "oldPosition",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 19588,
																					"character": 21
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 5994,
																			"name": "oldWindowId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 19587,
																					"character": 21
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				5995,
																				5994
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 19586,
																			"character": 19
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 5974,
							"name": "onHighlightChanged",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when the highlighted or selected tabs in a window changes.",
								"tags": [
									{
										"tag": "deprecated",
										"text": "Please use {@link tabs.onHighlighted}.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19534,
									"character": 35
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 5975,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 19534,
													"character": 57
												}
											],
											"signatures": [
												{
													"id": 5976,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 5977,
															"name": "selectInfo",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 5978,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 5980,
																			"name": "tabIds",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "All highlighted tabs in the window."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 19548,
																					"character": 16
																				}
																			],
																			"type": {
																				"type": "array",
																				"elementType": {
																					"type": "intrinsic",
																					"name": "number"
																				}
																			}
																		},
																		{
																			"id": 5979,
																			"name": "windowId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The window whose tabs changed."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 19543,
																					"character": 18
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				5980,
																				5979
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 19539,
																			"character": 19
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 5981,
							"name": "onHighlighted",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when the highlighted or selected tabs in a window changes."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19556,
									"character": 30
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 5982,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 19556,
													"character": 52
												}
											],
											"signatures": [
												{
													"id": 5983,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 5984,
															"name": "highlightInfo",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 5985,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 5987,
																			"name": "tabIds",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "All highlighted tabs in the window."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 19570,
																					"character": 16
																				}
																			],
																			"type": {
																				"type": "array",
																				"elementType": {
																					"type": "intrinsic",
																					"name": "number"
																				}
																			}
																		},
																		{
																			"id": 5986,
																			"name": "windowId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The window whose tabs changed."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 19565,
																					"character": 18
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				5987,
																				5986
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 19561,
																			"character": 22
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 5944,
							"name": "onMoved",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a tab is moved within a window. Only one move event is fired,\nrepresenting the tab the user directly moved. Move events are not fired for\nthe other tabs that must move in response to the manually-moved tab. This\nevent is not fired when a tab is moved between windows; for details, see\n{@link tabs.onDetached}."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19446,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 5945,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 19446,
													"character": 46
												}
											],
											"signatures": [
												{
													"id": 5946,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 5947,
															"name": "tabId",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 5948,
															"name": "moveInfo",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 5949,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 5951,
																			"name": "fromIndex",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 19455,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 5952,
																			"name": "toIndex",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 19456,
																					"character": 17
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 5950,
																			"name": "windowId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 19454,
																					"character": 18
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				5951,
																				5952,
																				5950
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 19453,
																			"character": 17
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 6004,
							"name": "onRemoved",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a tab is closed."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19614,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6005,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 19614,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 6006,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 6007,
															"name": "tabId",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 6008,
															"name": "removeInfo",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 6009,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 6011,
																			"name": "isWindowClosing",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "True when the tab was closed because its parent window was closed."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 19630,
																					"character": 25
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "boolean"
																			}
																		},
																		{
																			"id": 6010,
																			"name": "windowId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The window whose tab is closed."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 19625,
																					"character": 18
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				6011,
																				6010
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 19621,
																			"character": 19
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 6012,
							"name": "onReplaced",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a tab is replaced with another tab due to prerendering or instant."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19638,
									"character": 27
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6013,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 19638,
													"character": 49
												}
											],
											"signatures": [
												{
													"id": 6014,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 6015,
															"name": "addedTabId",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 6016,
															"name": "removedTabId",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 5953,
							"name": "onSelectionChanged",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fires when the selected tab in a window changes.",
								"tags": [
									{
										"tag": "deprecated",
										"text": "Please use {@link tabs.onActivated}.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19466,
									"character": 35
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 5954,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 19466,
													"character": 57
												}
											],
											"signatures": [
												{
													"id": 5955,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 5956,
															"name": "tabId",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "The ID of the tab that has become active."
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 5957,
															"name": "selectInfo",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 5958,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 5959,
																			"name": "windowId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the window the selected tab changed inside of."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 19477,
																					"character": 18
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				5959
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 19473,
																			"character": 19
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 5927,
							"name": "onUpdated",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a tab is updated."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19376,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 5928,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 19376,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 5929,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 5930,
															"name": "tabId",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 5931,
															"name": "changeInfo",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Lists the changes to the state of the tab that was updated."
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 5932,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 5937,
																			"name": "audible",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The tab's new audible state."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 19408,
																					"character": 17
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "boolean"
																			}
																		},
																		{
																			"id": 5939,
																			"name": "autoDiscardable",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The tab's new auto-discardable state."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 19418,
																					"character": 25
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "boolean"
																			}
																		},
																		{
																			"id": 5938,
																			"name": "discarded",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The tab's new discarded state."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 19413,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "boolean"
																			}
																		},
																		{
																			"id": 5941,
																			"name": "favIconUrl",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The tab's new favicon URL."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 19428,
																					"character": 20
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 5935,
																			"name": "groupId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The tab's new group."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 19398,
																					"character": 17
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 5940,
																			"name": "mutedInfo",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The tab's new muted state and the reason for the change."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 19423,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "reference",
																				"id": 5888,
																				"name": "MutedInfo"
																			}
																		},
																		{
																			"id": 5936,
																			"name": "pinned",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The tab's new pinned state."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 19403,
																					"character": 16
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "boolean"
																			}
																		},
																		{
																			"id": 5933,
																			"name": "status",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The tab's loading status."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 19388,
																					"character": 16
																				}
																			],
																			"type": {
																				"type": "reference",
																				"id": 5886,
																				"name": "TabStatus"
																			}
																		},
																		{
																			"id": 5942,
																			"name": "title",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The tab's new title."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 19433,
																					"character": 15
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 5934,
																			"name": "url",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The tab's URL if it has changed."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 19393,
																					"character": 13
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				5937,
																				5939,
																				5938,
																				5941,
																				5935,
																				5940,
																				5936,
																				5933,
																				5942,
																				5934
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 19384,
																			"character": 19
																		}
																	]
																}
															}
														},
														{
															"id": 5943,
															"name": "tab",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Gives the state of the tab that was updated.\n"
															},
															"type": {
																"type": "reference",
																"id": 5892,
																"name": "Tab"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 6017,
							"name": "onZoomChange",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a tab is zoomed."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19652,
									"character": 29
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6018,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 19652,
													"character": 51
												}
											],
											"signatures": [
												{
													"id": 6019,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 6020,
															"name": "ZoomChangeInfo",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 6021,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 6024,
																			"name": "newZoomFactor",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 19660,
																					"character": 23
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6023,
																			"name": "oldZoomFactor",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 19659,
																					"character": 23
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6022,
																			"name": "tabId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 19658,
																					"character": 15
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6025,
																			"name": "zoomSettings",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 19661,
																					"character": 22
																				}
																			],
																			"type": {
																				"type": "reference",
																				"id": 5917,
																				"name": "ZoomSettings"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				6024,
																				6023,
																				6022,
																				6025
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 19657,
																			"character": 23
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 5756,
							"name": "captureVisibleTab",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19060,
									"character": 37
								}
							],
							"signatures": [
								{
									"id": 5757,
									"name": "captureVisibleTab",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Captures the visible area of the currently active tab in the specified\nwindow. In order to call this method, the extension must have either the <a\nhref='declare_permissions'>&lt;all_urls&gt;</a> permission or the <a\nhref='activeTab'>activeTab</a> permission. In addition to sites that\nextensions can normally access, this method allows extensions to capture\nsensitive sites that are otherwise restricted, including chrome:-scheme\npages, other extensions' pages, and data: URLs. These sensitive sites can\nonly be captured with the activeTab permission. File URLs may be captured\nonly if the extension has been granted file access."
									},
									"parameters": [
										{
											"id": 5758,
											"name": "windowId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The target window. Defaults to the <a href='windows#current-window'>current window</a>."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5759,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 2606,
												"name": "extensionTypes.ImageDetails"
											}
										},
										{
											"id": 5760,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5761,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 19063,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 5762,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5763,
																	"name": "dataUrl",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "A data URL that encodes an image of the visible area of the captured tab. May be assigned to the 'src' property of an HTML <code>img</code> element for display.\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								},
								{
									"id": 5764,
									"name": "captureVisibleTab",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Captures the visible area of the currently active tab in the specified\nwindow. In order to call this method, the extension must have either the <a\nhref='declare_permissions'>&lt;all_urls&gt;</a> permission or the <a\nhref='activeTab'>activeTab</a> permission. In addition to sites that\nextensions can normally access, this method allows extensions to capture\nsensitive sites that are otherwise restricted, including chrome:-scheme\npages, other extensions' pages, and data: URLs. These sensitive sites can\nonly be captured with the activeTab permission. File URLs may be captured\nonly if the extension has been granted file access."
									},
									"parameters": [
										{
											"id": 5765,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 2606,
												"name": "extensionTypes.ImageDetails"
											}
										},
										{
											"id": 5766,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5767,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 19085,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 5768,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5769,
																	"name": "dataUrl",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "A data URL that encodes an image of the visible area of the captured tab. May be assigned to the 'src' property of an HTML <code>img</code> element for display.\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								},
								{
									"id": 5770,
									"name": "captureVisibleTab",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Captures the visible area of the currently active tab in the specified\nwindow. In order to call this method, the extension must have either the <a\nhref='declare_permissions'>&lt;all_urls&gt;</a> permission or the <a\nhref='activeTab'>activeTab</a> permission. In addition to sites that\nextensions can normally access, this method allows extensions to capture\nsensitive sites that are otherwise restricted, including chrome:-scheme\npages, other extensions' pages, and data: URLs. These sensitive sites can\nonly be captured with the activeTab permission. File URLs may be captured\nonly if the extension has been granted file access."
									},
									"parameters": [
										{
											"id": 5771,
											"name": "windowId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The target window. Defaults to the <a href='windows#current-window'>current window</a>."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5772,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5773,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 19107,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 5774,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5775,
																	"name": "dataUrl",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "A data URL that encodes an image of the visible area of the captured tab. May be assigned to the 'src' property of an HTML <code>img</code> element for display.\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								},
								{
									"id": 5776,
									"name": "captureVisibleTab",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Captures the visible area of the currently active tab in the specified\nwindow. In order to call this method, the extension must have either the <a\nhref='declare_permissions'>&lt;all_urls&gt;</a> permission or the <a\nhref='activeTab'>activeTab</a> permission. In addition to sites that\nextensions can normally access, this method allows extensions to capture\nsensitive sites that are otherwise restricted, including chrome:-scheme\npages, other extensions' pages, and data: URLs. These sensitive sites can\nonly be captured with the activeTab permission. File URLs may be captured\nonly if the extension has been granted file access."
									},
									"parameters": [
										{
											"id": 5777,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5778,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 19127,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 5779,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5780,
																	"name": "dataUrl",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "A data URL that encodes an image of the visible area of the captured tab. May be assigned to the 'src' property of an HTML <code>img</code> element for display.\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 5561,
							"name": "connect",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 18464,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 5562,
									"name": "connect",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Connects to the content script(s) in the specified tab. The {@link\nruntime.onConnect} event is fired in each content script running in the\nspecified tab for the current extension. For more details, see <a\nhref='messaging'>Content Script Messaging</a>.",
										"returns": "A port that can be used to communicate with the content scripts running in the specified tab. The port's {@link runtime.Port} event is fired if the tab closes or does not exist.\n"
									},
									"parameters": [
										{
											"id": 5563,
											"name": "tabId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5564,
											"name": "connectInfo",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5565,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 5567,
															"name": "frameId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Open a port to a specific <a href='webNavigation#frame_ids'>frame</a>\nidentified by <code>frameId</code> instead of all frames in the tab."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18477,
																	"character": 15
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 5566,
															"name": "name",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Is passed into onConnect for content scripts that are listening for the\nconnection event."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18471,
																	"character": 12
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																5567,
																5566
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 18466,
															"character": 19
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 4873,
										"name": "runtime.Port"
									}
								}
							]
						},
						{
							"id": 5611,
							"name": "create",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 18591,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 5612,
									"name": "create",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a new tab."
									},
									"parameters": [
										{
											"id": 5613,
											"name": "createProperties",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5614,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 5618,
															"name": "active",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether the tab should become the active tab in the window. Does not affect\nwhether the window is focused (see {@link windows.update}). Defaults to\n<var>true</var>."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18618,
																	"character": 14
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 5616,
															"name": "index",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The position the tab should take in the window. The provided value is clamped\nto between zero and the number of tabs in the window."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18603,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 5621,
															"name": "openerTabId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The ID of the tab that opened this tab. If specified, the opener tab must be\nin the same window as the newly created tab."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18637,
																	"character": 19
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 5620,
															"name": "pinned",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether the tab should be pinned. Defaults to <var>false</var>"
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18631,
																	"character": 14
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 5619,
															"name": "selected",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether the tab should become the selected tab in the window. Defaults to\n<var>true</var>",
																"tags": [
																	{
																		"tag": "deprecated",
																		"text": "Please use <em>active</em>.\n"
																	}
																]
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18626,
																	"character": 16
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 5617,
															"name": "url",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The URL to initially navigate the tab to. Fully-qualified URLs must include a\nscheme (i.e., 'http://www.google.com', not 'www.google.com'). Relative URLs\nare relative to the current page within the extension. Defaults to the New\nTab Page."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18611,
																	"character": 11
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 5615,
															"name": "windowId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The window in which to create the new tab. Defaults to the <a\nhref='windows#current-window'>current window</a>."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18597,
																	"character": 16
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																5618,
																5616,
																5621,
																5620,
																5619,
																5617,
																5615
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 18592,
															"character": 23
														}
													]
												}
											}
										},
										{
											"id": 5622,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5623,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 18639,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 5624,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5625,
																	"name": "tab",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "The created tab.\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 5892,
																		"name": "Tab"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 5744,
							"name": "detectLanguage",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19025,
									"character": 34
								}
							],
							"signatures": [
								{
									"id": 5745,
									"name": "detectLanguage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Detects the primary language of the content in a tab."
									},
									"parameters": [
										{
											"id": 5746,
											"name": "tabId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Defaults to the active tab of the <a href='windows#current-window'>current window</a>."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5747,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5748,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 19027,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 5749,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5750,
																	"name": "language",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "An ISO language code such as <code>en</code> or <code>fr</code>. For a complete list of languages supported by this method, see <a href='http://src.chromium.org/viewvc/chrome/trunk/src/third_party/cld/languages/internal/languages.cc'>kLanguageInfoTable</a>. The second to fourth columns are checked and the first non-NULL value is returned, except for Simplified Chinese for which <code>zh-CN</code> is returned. For an unknown/undefined language, <code>und</code> is returned.\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								},
								{
									"id": 5751,
									"name": "detectLanguage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Detects the primary language of the content in a tab."
									},
									"parameters": [
										{
											"id": 5752,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5753,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 19039,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 5754,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5755,
																	"name": "language",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "An ISO language code such as <code>en</code> or <code>fr</code>. For a complete list of languages supported by this method, see <a href='http://src.chromium.org/viewvc/chrome/trunk/src/third_party/cld/languages/internal/languages.cc'>kLanguageInfoTable</a>. The second to fourth columns are checked and the first non-NULL value is returned, except for Simplified Chinese for which <code>zh-CN</code> is returned. For an unknown/undefined language, <code>und</code> is returned.\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 5867,
							"name": "discard",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19330,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 5868,
									"name": "discard",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Discards a tab from memory. Discarded tabs are still visible on the tab strip\nand are reloaded when activated."
									},
									"parameters": [
										{
											"id": 5869,
											"name": "tabId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The ID of the tab to be discarded. If specified, the tab is discarded unless it is active or already discarded. If omitted, the browser discards the least important tab. This can fail if no discardable tabs exist."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5870,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called after the operation is completed."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5871,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 19332,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 5872,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5873,
																	"name": "tab",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"text": "The discarded tab, if it was successfully discarded; undefined otherwise.\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 5892,
																		"name": "Tab"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 5626,
							"name": "duplicate",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 18651,
									"character": 29
								}
							],
							"signatures": [
								{
									"id": 5627,
									"name": "duplicate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Duplicates a tab."
									},
									"parameters": [
										{
											"id": 5628,
											"name": "tabId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ID of the tab to duplicate."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5629,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5630,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 18653,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 5631,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5632,
																	"name": "tab",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"text": "Details about the duplicated tab. The {@link tabs.Tab} object does not contain <code>url</code>, <code>pendingUrl</code>, <code>title</code>, and <code>favIconUrl</code> if the <code>\"tabs\"</code> permission has not been requested.\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 5892,
																		"name": "Tab"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 5781,
							"name": "executeScript",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19142,
									"character": 33
								}
							],
							"signatures": [
								{
									"id": 5782,
									"name": "executeScript",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Injects JavaScript code into a page. For details, see the <a\nhref='content_scripts#pi'>programmatic injection</a> section of the content\nscripts doc."
									},
									"parameters": [
										{
											"id": 5783,
											"name": "tabId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ID of the tab in which to run the script; defaults to the active tab of the current window."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5784,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Details of the script to run. Either the code or the file property must be set, but both may not be set at the same time."
											},
											"type": {
												"type": "reference",
												"id": 2611,
												"name": "extensionTypes.InjectDetails"
											}
										},
										{
											"id": 5785,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called after all the JavaScript has been executed."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5786,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 19145,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 5787,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5788,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"text": "The result of the script in every injected frame.\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								},
								{
									"id": 5789,
									"name": "executeScript",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Injects JavaScript code into a page. For details, see the <a\nhref='content_scripts#pi'>programmatic injection</a> section of the content\nscripts doc."
									},
									"parameters": [
										{
											"id": 5790,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Details of the script to run. Either the code or the file property must be set, but both may not be set at the same time."
											},
											"type": {
												"type": "reference",
												"id": 2611,
												"name": "extensionTypes.InjectDetails"
											}
										},
										{
											"id": 5791,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called after all the JavaScript has been executed."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5792,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 19161,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 5793,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5794,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"text": "The result of the script in every injected frame.\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 5548,
							"name": "get",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 18434,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 5549,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieves details about the specified tab."
									},
									"parameters": [
										{
											"id": 5550,
											"name": "tabId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5551,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5552,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 18436,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 5553,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5554,
																	"name": "tab",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 5892,
																		"name": "Tab"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 5599,
							"name": "getAllInWindow",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 18564,
									"character": 34
								}
							],
							"signatures": [
								{
									"id": 5600,
									"name": "getAllInWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets details about all tabs in the specified window.",
										"tags": [
											{
												"tag": "deprecated",
												"text": "Please use {@link tabs.query} <code>{windowId: windowId}</code>.\n"
											}
										]
									},
									"parameters": [
										{
											"id": 5601,
											"name": "windowId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Defaults to the <a href='windows#current-window'>current window</a>."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5602,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5603,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 18566,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 5604,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5605,
																	"name": "tabs",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 5892,
																			"name": "Tab"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								},
								{
									"id": 5606,
									"name": "getAllInWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets details about all tabs in the specified window.",
										"tags": [
											{
												"tag": "deprecated",
												"text": "Please use {@link tabs.query} <code>{windowId: windowId}</code>.\n"
											}
										]
									},
									"parameters": [
										{
											"id": 5607,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5608,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 18579,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 5609,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5610,
																	"name": "tabs",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 5892,
																			"name": "Tab"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 5555,
							"name": "getCurrent",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 18448,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 5556,
									"name": "getCurrent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the tab that this script call is being made from. May be undefined if\ncalled from a non-tab context (for example, a background page or popup view)."
									},
									"parameters": [
										{
											"id": 5557,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5558,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 18449,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 5559,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5560,
																	"name": "tab",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 5892,
																		"name": "Tab"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 5587,
							"name": "getSelected",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 18536,
									"character": 31
								}
							],
							"signatures": [
								{
									"id": 5588,
									"name": "getSelected",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the tab that is selected in the specified window.",
										"tags": [
											{
												"tag": "deprecated",
												"text": "Please use {@link tabs.query} <code>{active: true}</code>.\n"
											}
										]
									},
									"parameters": [
										{
											"id": 5589,
											"name": "windowId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Defaults to the <a href='windows#current-window'>current window</a>."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5590,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5591,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 18538,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 5592,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5593,
																	"name": "tab",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {},
																	"type": {
																		"type": "reference",
																		"id": 5892,
																		"name": "Tab"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								},
								{
									"id": 5594,
									"name": "getSelected",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the tab that is selected in the specified window.",
										"tags": [
											{
												"tag": "deprecated",
												"text": "Please use {@link tabs.query} <code>{active: true}</code>.\n"
											}
										]
									},
									"parameters": [
										{
											"id": 5595,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5596,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 18551,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 5597,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5598,
																	"name": "tab",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {},
																	"type": {
																		"type": "reference",
																		"id": 5892,
																		"name": "Tab"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 5831,
							"name": "getZoom",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19251,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 5832,
									"name": "getZoom",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the current zoom factor of a specified tab."
									},
									"parameters": [
										{
											"id": 5833,
											"name": "tabId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ID of the tab to get the current zoom factor from; defaults to the active tab of the current window."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5834,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Called with the tab's current zoom factor after it has been fetched."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5835,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 19253,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 5836,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5837,
																	"name": "zoomFactor",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "The tab's current zoom factor.\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								},
								{
									"id": 5838,
									"name": "getZoom",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the current zoom factor of a specified tab."
									},
									"parameters": [
										{
											"id": 5839,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Called with the tab's current zoom factor after it has been fetched."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5840,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 19265,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 5841,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5842,
																	"name": "zoomFactor",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "The tab's current zoom factor.\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 5855,
							"name": "getZoomSettings",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19303,
									"character": 35
								}
							],
							"signatures": [
								{
									"id": 5856,
									"name": "getZoomSettings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the current zoom settings of a specified tab."
									},
									"parameters": [
										{
											"id": 5857,
											"name": "tabId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ID of the tab to get the current zoom settings from; defaults to the active tab of the current window."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5858,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Called with the tab's current zoom settings."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5859,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 19305,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 5860,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5861,
																	"name": "zoomSettings",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "The tab's current zoom settings.\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 5917,
																		"name": "ZoomSettings"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								},
								{
									"id": 5862,
									"name": "getZoomSettings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the current zoom settings of a specified tab."
									},
									"parameters": [
										{
											"id": 5863,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Called with the tab's current zoom settings."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5864,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 19317,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 5865,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5866,
																	"name": "zoomSettings",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "The tab's current zoom settings.\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 5917,
																		"name": "ZoomSettings"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 5880,
							"name": "goBack",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19354,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 5881,
									"name": "goBack",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Go back to the previous page, if one is available."
									},
									"parameters": [
										{
											"id": 5882,
											"name": "tabId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The ID of the tab to navigate back; defaults to the selected tab of the current window."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5883,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5884,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 19356,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 5885,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 5874,
							"name": "goForward",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19343,
									"character": 29
								}
							],
							"signatures": [
								{
									"id": 5875,
									"name": "goForward",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Go foward to the next page, if one is available."
									},
									"parameters": [
										{
											"id": 5876,
											"name": "tabId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The ID of the tab to navigate forward; defaults to the selected tab of the current window."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5877,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5878,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 19345,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 5879,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 5725,
							"name": "group",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 18977,
									"character": 25
								}
							],
							"signatures": [
								{
									"id": 5726,
									"name": "group",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds one or more tabs to a specified group, or if no group is specified, adds\nthe given tabs to a newly created group."
									},
									"parameters": [
										{
											"id": 5727,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5728,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 5731,
															"name": "createProperties",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Configurations for creating a group. Cannot be used if groupId is already\nspecified."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18994,
																	"character": 24
																}
															],
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 5732,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 5733,
																			"name": "windowId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The window of the new group. Defaults to the current window."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 18998,
																					"character": 18
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				5733
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 18994,
																			"character": 26
																		}
																	]
																}
															}
														},
														{
															"id": 5730,
															"name": "groupId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The ID of the group to add the tabs to. If not specified, a new group will be\ncreated."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18988,
																	"character": 15
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 5729,
															"name": "tabIds",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "The tab ID or list of tab IDs to add to the specified group."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18982,
																	"character": 14
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "number"
																	},
																	{
																		"type": "intersection",
																		"types": [
																			{
																				"type": "tuple",
																				"elements": [
																					{
																						"type": "intrinsic",
																						"name": "number"
																					}
																				]
																			},
																			{
																				"type": "array",
																				"elementType": {
																					"type": "intrinsic",
																					"name": "number"
																				}
																			}
																		]
																	}
																]
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																5731,
																5730,
																5729
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 18978,
															"character": 14
														}
													]
												}
											}
										},
										{
											"id": 5734,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5735,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 19001,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 5736,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5737,
																	"name": "groupId",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "The ID of the group that the tabs were added to.\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 5657,
							"name": "highlight",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 18770,
									"character": 29
								}
							],
							"signatures": [
								{
									"id": 5658,
									"name": "highlight",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Highlights the given tabs and focuses on the first of group. Will appear to\ndo nothing if the specified tab is currently active."
									},
									"parameters": [
										{
											"id": 5659,
											"name": "highlightInfo",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5660,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 5662,
															"name": "tabs",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "One or more tab indices to highlight."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18780,
																	"character": 12
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "number"
																		}
																	},
																	{
																		"type": "intrinsic",
																		"name": "number"
																	}
																]
															}
														},
														{
															"id": 5661,
															"name": "windowId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The window that contains the tabs."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18775,
																	"character": 16
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																5662,
																5661
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 18771,
															"character": 20
														}
													]
												}
											}
										},
										{
											"id": 5663,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5664,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 18782,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 5665,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5666,
																	"name": "window",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "Contains details about the window whose tabs were highlighted.\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 6926,
																		"name": "windows.Window"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 5795,
							"name": "insertCSS",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19175,
									"character": 29
								}
							],
							"signatures": [
								{
									"id": 5796,
									"name": "insertCSS",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Injects CSS into a page. For details, see the <a\nhref='content_scripts#pi'>programmatic injection</a> section of the content\nscripts doc."
									},
									"parameters": [
										{
											"id": 5797,
											"name": "tabId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ID of the tab in which to insert the CSS; defaults to the active tab of the current window."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5798,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Details of the CSS text to insert. Either the code or the file property must be set, but both may not be set at the same time."
											},
											"type": {
												"type": "reference",
												"id": 2611,
												"name": "extensionTypes.InjectDetails"
											}
										},
										{
											"id": 5799,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called when all the CSS has been inserted.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5800,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 19178,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 5801,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								},
								{
									"id": 5802,
									"name": "insertCSS",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Injects CSS into a page. For details, see the <a\nhref='content_scripts#pi'>programmatic injection</a> section of the content\nscripts doc."
									},
									"parameters": [
										{
											"id": 5803,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Details of the CSS text to insert. Either the code or the file property must be set, but both may not be set at the same time."
											},
											"type": {
												"type": "reference",
												"id": 2611,
												"name": "extensionTypes.InjectDetails"
											}
										},
										{
											"id": 5804,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called when all the CSS has been inserted.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5805,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 19191,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 5806,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 5699,
							"name": "move",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 18921,
									"character": 24
								}
							],
							"signatures": [
								{
									"id": 5700,
									"name": "move",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Moves one or more tabs to a new position within its window, or to a new\nwindow. Note that tabs can only be moved to and from normal (window.type ===\n\"normal\") windows."
									},
									"parameters": [
										{
											"id": 5701,
											"name": "tabIds",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The tab ID or list of tab IDs to move."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "number"
														}
													}
												]
											}
										},
										{
											"id": 5702,
											"name": "moveProperties",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5703,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 5705,
															"name": "index",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "The position to move the window to. Use <code>-1</code> to place the tab at\nthe end of the window."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18933,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 5704,
															"name": "windowId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Defaults to the window the tab is currently in."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18927,
																	"character": 16
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																5705,
																5704
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 18923,
															"character": 21
														}
													]
												}
											}
										},
										{
											"id": 5706,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5707,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 18935,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 5708,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5709,
																	"name": "tabs",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "Details about the moved tabs.\n"
																	},
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "reference",
																				"id": 5892,
																				"name": "Tab"
																			},
																			{
																				"type": "array",
																				"elementType": {
																					"type": "reference",
																					"id": 5892,
																					"name": "Tab"
																				}
																			}
																		]
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 5633,
							"name": "query",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 18666,
									"character": 25
								}
							],
							"signatures": [
								{
									"id": 5634,
									"name": "query",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all tabs that have the specified properties, or all tabs if no\nproperties are specified."
									},
									"parameters": [
										{
											"id": 5635,
											"name": "queryInfo",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5636,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 5637,
															"name": "active",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether the tabs are active in their windows."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18671,
																	"character": 14
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 5639,
															"name": "audible",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether the tabs are audible."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18681,
																	"character": 15
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 5643,
															"name": "autoDiscardable",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether the tabs can be discarded automatically by the browser when resources\nare low."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18704,
																	"character": 23
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 5644,
															"name": "currentWindow",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether the tabs are in the <a href='windows#current-window'>current\nwindow</a>."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18710,
																	"character": 21
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 5642,
															"name": "discarded",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether the tabs are discarded. A discarded tab is one whose content has been\nunloaded from memory, but is still visible in the tab strip. Its content is\nreloaded the next time it is activated."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18698,
																	"character": 17
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 5649,
															"name": "groupId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The ID of the group that the tabs are in, or {@link\ntabGroups.TAB_GROUP_ID_NONE} for ungrouped tabs."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18739,
																	"character": 15
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 5641,
															"name": "highlighted",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether the tabs are highlighted."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18691,
																	"character": 19
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 5652,
															"name": "index",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The position of the tabs within their windows."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18755,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 5645,
															"name": "lastFocusedWindow",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether the tabs are in the last focused window."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18715,
																	"character": 25
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 5640,
															"name": "muted",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether the tabs are muted."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18686,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 5638,
															"name": "pinned",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether the tabs are pinned."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18676,
																	"character": 14
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 5646,
															"name": "status",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The tab loading status."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18720,
																	"character": 14
																}
															],
															"type": {
																"type": "reference",
																"id": 5886,
																"name": "TabStatus"
															}
														},
														{
															"id": 5647,
															"name": "title",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Match page titles against a pattern. This property is ignored if the\nextension does not have the <code>\"tabs\"</code> permission."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18726,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 5648,
															"name": "url",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Match tabs against one or more <a href='match_patterns'>URL patterns</a>.\nFragment identifiers are not matched. This property is ignored if the\nextension does not have the <code>\"tabs\"</code> permission."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18733,
																	"character": 11
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "string"
																		}
																	}
																]
															}
														},
														{
															"id": 5650,
															"name": "windowId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The ID of the parent window, or {@link windows.WINDOW_ID_CURRENT} for the <a\nhref='windows#current-window'>current window</a>."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18745,
																	"character": 16
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 5651,
															"name": "windowType",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The type of window the tabs are in."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18750,
																	"character": 18
																}
															],
															"type": {
																"type": "reference",
																"id": 5921,
																"name": "WindowType"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																5637,
																5639,
																5643,
																5644,
																5642,
																5649,
																5641,
																5652,
																5645,
																5640,
																5638,
																5646,
																5647,
																5648,
																5650,
																5651
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 18667,
															"character": 16
														}
													]
												}
											}
										},
										{
											"id": 5653,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5654,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 18757,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 5655,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5656,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 5892,
																			"name": "Tab"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 5710,
							"name": "reload",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 18947,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 5711,
									"name": "reload",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Reload a tab."
									},
									"parameters": [
										{
											"id": 5712,
											"name": "tabId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The ID of the tab to reload; defaults to the selected tab of the current window."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5713,
											"name": "reloadProperties",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5714,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 5715,
															"name": "bypassCache",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether to bypass local caching. Defaults to <code>false</code>."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18953,
																	"character": 19
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																5715
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 18949,
															"character": 24
														}
													]
												}
											}
										},
										{
											"id": 5716,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5717,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 18955,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 5718,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 5719,
							"name": "remove",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 18964,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 5720,
									"name": "remove",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Closes one or more tabs."
									},
									"parameters": [
										{
											"id": 5721,
											"name": "tabIds",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The tab ID or list of tab IDs to close."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "number"
														}
													}
												]
											}
										},
										{
											"id": 5722,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5723,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 18966,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 5724,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 5807,
							"name": "removeCSS",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19202,
									"character": 29
								}
							],
							"signatures": [
								{
									"id": 5808,
									"name": "removeCSS",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Removes from a page CSS that was previously injected by a call to {@link\ntabs.insertCSS}."
									},
									"parameters": [
										{
											"id": 5809,
											"name": "tabId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ID of the tab from which to remove the CSS; defaults to the active tab of the current window."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5810,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Details of the CSS text to remove. Either the code or the file property must be set, but both may not be set at the same time."
											},
											"type": {
												"type": "reference",
												"id": 2619,
												"name": "extensionTypes.DeleteInjectionDetails"
											}
										},
										{
											"id": 5811,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called when all the CSS has been removed.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5812,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 19205,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 5813,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								},
								{
									"id": 5814,
									"name": "removeCSS",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Removes from a page CSS that was previously injected by a call to {@link\ntabs.insertCSS}."
									},
									"parameters": [
										{
											"id": 5815,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Details of the CSS text to remove. Either the code or the file property must be set, but both may not be set at the same time."
											},
											"type": {
												"type": "reference",
												"id": 2619,
												"name": "extensionTypes.DeleteInjectionDetails"
											}
										},
										{
											"id": 5816,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called when all the CSS has been removed.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5817,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 19217,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 5818,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 5576,
							"name": "sendMessage",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 18513,
									"character": 31
								}
							],
							"signatures": [
								{
									"id": 5577,
									"name": "sendMessage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sends a single message to the content script(s) in the specified tab, with an\noptional callback to run when a response is sent back.  The {@link\nruntime.onMessage} event is fired in each content script running in the\nspecified tab for the current extension."
									},
									"parameters": [
										{
											"id": 5578,
											"name": "tabId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5579,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The message to send. This message should be a JSON-ifiable object."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 5580,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5581,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 5582,
															"name": "frameId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Send a message to a specific <a href='webNavigation#frame_ids'>frame</a>\nidentified by <code>frameId</code> instead of all frames in the tab."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18521,
																	"character": 15
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																5582
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 18516,
															"character": 15
														}
													]
												}
											}
										},
										{
											"id": 5583,
											"name": "responseCallback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5584,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 18523,
															"character": 24
														}
													],
													"signatures": [
														{
															"id": 5585,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5586,
																	"name": "response",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "The JSON response object sent by the handler of the message. If an error occurs while connecting to the specified tab, the callback is called with no arguments and {@link runtime.lastError} is set to the error message.\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 5568,
							"name": "sendRequest",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 18493,
									"character": 31
								}
							],
							"signatures": [
								{
									"id": 5569,
									"name": "sendRequest",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sends a single request to the content script(s) in the specified tab, with an\noptional callback to run when a response is sent back.  The {@link\nextension.onRequest} event is fired in each content script running in the\nspecified tab for the current extension.",
										"tags": [
											{
												"tag": "deprecated",
												"text": "Please use {@link runtime.sendMessage}.\n"
											}
										]
									},
									"parameters": [
										{
											"id": 5570,
											"name": "tabId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5571,
											"name": "request",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 5572,
											"name": "responseCallback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5573,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 18496,
															"character": 24
														}
													],
													"signatures": [
														{
															"id": 5574,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5575,
																	"name": "response",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "The JSON response object sent by the handler of the request. If an error occurs while connecting to the specified tab, the callback is called with no arguments and {@link runtime.lastError} is set to the error message."
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 5819,
							"name": "setZoom",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19227,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 5820,
									"name": "setZoom",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Zooms a specified tab."
									},
									"parameters": [
										{
											"id": 5821,
											"name": "tabId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ID of the tab to zoom; defaults to the active tab of the current window."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5822,
											"name": "zoomFactor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The new zoom factor. A value of <code>0</code> sets the tab to its current default zoom factor. Values greater than <code>0</code> specify a (possibly non-default) zoom factor for the tab."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5823,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called after the zoom factor has been changed.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5824,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 19230,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 5825,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								},
								{
									"id": 5826,
									"name": "setZoom",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Zooms a specified tab."
									},
									"parameters": [
										{
											"id": 5827,
											"name": "zoomFactor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The new zoom factor. A value of <code>0</code> sets the tab to its current default zoom factor. Values greater than <code>0</code> specify a (possibly non-default) zoom factor for the tab."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5828,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called after the zoom factor has been changed.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5829,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 19241,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 5830,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 5843,
							"name": "setZoomSettings",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19278,
									"character": 35
								}
							],
							"signatures": [
								{
									"id": 5844,
									"name": "setZoomSettings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the zoom settings for a specified tab, which define how zoom changes are\nhandled. These settings are reset to defaults upon navigating the tab."
									},
									"parameters": [
										{
											"id": 5845,
											"name": "tabId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ID of the tab to change the zoom settings for; defaults to the active tab of the current window."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5846,
											"name": "zoomSettings",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Defines how zoom changes are handled and at what scope."
											},
											"type": {
												"type": "reference",
												"id": 5917,
												"name": "ZoomSettings"
											}
										},
										{
											"id": 5847,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called after the zoom settings are changed.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5848,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 19281,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 5849,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								},
								{
									"id": 5850,
									"name": "setZoomSettings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the zoom settings for a specified tab, which define how zoom changes are\nhandled. These settings are reset to defaults upon navigating the tab."
									},
									"parameters": [
										{
											"id": 5851,
											"name": "zoomSettings",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Defines how zoom changes are handled and at what scope."
											},
											"type": {
												"type": "reference",
												"id": 5917,
												"name": "ZoomSettings"
											}
										},
										{
											"id": 5852,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called after the zoom settings are changed.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5853,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 19293,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 5854,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 5738,
							"name": "ungroup",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19013,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 5739,
									"name": "ungroup",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Removes one or more tabs from their respective groups. If any groups become\nempty, they are deleted."
									},
									"parameters": [
										{
											"id": 5740,
											"name": "tabIds",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The tab ID or list of tab IDs to remove from their respective groups."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intersection",
														"types": [
															{
																"type": "tuple",
																"elements": [
																	{
																		"type": "intrinsic",
																		"name": "number"
																	}
																]
															},
															{
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "number"
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 5741,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5742,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 19015,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 5743,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 5667,
							"name": "update",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 18796,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 5668,
									"name": "update",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Modifies the properties of a tab. Properties that are not specified in\n<var>updateProperties</var> are not modified."
									},
									"parameters": [
										{
											"id": 5669,
											"name": "tabId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Defaults to the selected tab of the <a href='windows#current-window'>current window</a>."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5670,
											"name": "updateProperties",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5671,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 5673,
															"name": "active",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether the tab should be active. Does not affect whether the window is\nfocused (see {@link windows.update})."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18809,
																	"character": 14
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 5679,
															"name": "autoDiscardable",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether the tab should be discarded automatically by the browser when\nresources are low."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18843,
																	"character": 23
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 5674,
															"name": "highlighted",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Adds or removes the tab from the current selection."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18814,
																	"character": 19
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 5677,
															"name": "muted",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether the tab should be muted."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18831,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 5678,
															"name": "openerTabId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The ID of the tab that opened this tab. If specified, the opener tab must be\nin the same window as this tab."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18837,
																	"character": 19
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 5676,
															"name": "pinned",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether the tab should be pinned."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18826,
																	"character": 14
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 5675,
															"name": "selected",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether the tab should be selected.",
																"tags": [
																	{
																		"tag": "deprecated",
																		"text": "Please use <em>highlighted</em>.\n"
																	}
																]
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18821,
																	"character": 16
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 5672,
															"name": "url",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "A URL to navigate the tab to. JavaScript URLs are not supported; use {@link\ntabs.executeScript} instead."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18803,
																	"character": 11
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																5673,
																5679,
																5674,
																5677,
																5678,
																5676,
																5675,
																5672
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 18798,
															"character": 23
														}
													]
												}
											}
										},
										{
											"id": 5680,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5681,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 18845,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 5682,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5683,
																	"name": "tab",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"text": "Details about the updated tab. The {@link tabs.Tab} object does not contain <code>url</code>, <code>pendingUrl</code>, <code>title</code>, and <code>favIconUrl</code> if the <code>\"tabs\"</code> permission has not been requested.\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 5892,
																		"name": "Tab"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								},
								{
									"id": 5684,
									"name": "update",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Modifies the properties of a tab. Properties that are not specified in\n<var>updateProperties</var> are not modified."
									},
									"parameters": [
										{
											"id": 5685,
											"name": "updateProperties",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5686,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 5688,
															"name": "active",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether the tab should be active. Does not affect whether the window is\nfocused (see {@link windows.update})."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18870,
																	"character": 14
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 5694,
															"name": "autoDiscardable",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether the tab should be discarded automatically by the browser when\nresources are low."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18904,
																	"character": 23
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 5689,
															"name": "highlighted",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Adds or removes the tab from the current selection."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18875,
																	"character": 19
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 5692,
															"name": "muted",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether the tab should be muted."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18892,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 5693,
															"name": "openerTabId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The ID of the tab that opened this tab. If specified, the opener tab must be\nin the same window as this tab."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18898,
																	"character": 19
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 5691,
															"name": "pinned",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether the tab should be pinned."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18887,
																	"character": 14
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 5690,
															"name": "selected",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether the tab should be selected.",
																"tags": [
																	{
																		"tag": "deprecated",
																		"text": "Please use <em>highlighted</em>.\n"
																	}
																]
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18882,
																	"character": 16
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 5687,
															"name": "url",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "A URL to navigate the tab to. JavaScript URLs are not supported; use {@link\ntabs.executeScript} instead."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 18864,
																	"character": 11
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																5688,
																5694,
																5689,
																5692,
																5693,
																5691,
																5690,
																5687
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 18859,
															"character": 23
														}
													]
												}
											}
										},
										{
											"id": 5695,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5696,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 18906,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 5697,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5698,
																	"name": "tab",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"text": "Details about the updated tab. The {@link tabs.Tab} object does not contain <code>url</code>, <code>pendingUrl</code>, <code>title</code>, and <code>favIconUrl</code> if the <code>\"tabs\"</code> permission has not been requested.\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 5892,
																		"name": "Tab"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								5888,
								5892,
								5917
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								5887,
								5886,
								5921,
								5915,
								5916
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								5922,
								5967,
								5960,
								5996,
								5923,
								5988,
								5974,
								5981,
								5944,
								6004,
								6012,
								5953,
								5927,
								6017
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								5756,
								5561,
								5611,
								5744,
								5867,
								5626,
								5781,
								5548,
								5599,
								5555,
								5587,
								5831,
								5855,
								5880,
								5874,
								5725,
								5657,
								5795,
								5699,
								5633,
								5710,
								5719,
								5807,
								5576,
								5568,
								5819,
								5843,
								5738,
								5667
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 18211,
							"character": 23
						}
					]
				},
				{
					"id": 6026,
					"name": "topSites",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.topSites</code> API to access the top sites (i.e. most\nvisited sites) that are displayed on the new tab page. These do not include\nshortcuts customized by the user.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "topSites"
							},
							{
								"tag": "chrome-permission",
								"text": "topSites\n"
							}
						]
					},
					"children": [
						{
							"id": 6033,
							"name": "MostVisitedURL",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "An object encapsulating a most visited URL, such as the default shortcuts on\nthe new tab page."
							},
							"children": [
								{
									"id": 6035,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The title of the page"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 19691,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 6034,
									"name": "url",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The most visited URL."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 19686,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										6035,
										6034
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19682,
									"character": 35
								}
							]
						},
						{
							"id": 6027,
							"name": "get",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19700,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 6028,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a list of top sites."
									},
									"parameters": [
										{
											"id": 6029,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6030,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 19701,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 6031,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 6032,
																	"name": "data",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 6033,
																			"name": "MostVisitedURL"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								6033
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								6027
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 19677,
							"character": 27
						}
					]
				},
				{
					"id": 6066,
					"name": "tts",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.tts</code> API to play synthesized text-to-speech (TTS).\nSee also the related <a\nhref='http://developer.chrome.com/extensions/ttsEngine'>ttsEngine</a> API,\nwhich allows an extension to implement a speech engine.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "tts"
							},
							{
								"tag": "chrome-permission",
								"text": "tts\n"
							}
						]
					},
					"children": [
						{
							"id": 6109,
							"name": "TtsEvent",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "An event from the TTS engine to communicate the status of an utterance."
							},
							"children": [
								{
									"id": 6111,
									"name": "charIndex",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The index of the current character in the utterance. For word events, the\nevent fires at the end of one word and before the beginning of the next. The\n<code>charIndex</code> represents a point in the text at the beginning of the\nnext word to be spoken."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 19940,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6112,
									"name": "errorMessage",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The error description, if the event type is <code>error</code>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 19945,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 6113,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The length of the next part of the utterance. For example, in a\n<code>word</code> event, this is the length of the word which will be spoken\nnext. It will be set to -1 if not set by the speech engine."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 19952,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6110,
									"name": "type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The type can be <code>start</code> as soon as speech has started,\n<code>word</code> when a word boundary is reached, <code>sentence</code> when\na sentence boundary is reached, <code>marker</code> when an SSML mark element\nis reached, <code>end</code> when the end of the utterance is reached,\n<code>interrupted</code> when the utterance is stopped or interrupted before\nreaching the end, <code>cancelled</code> when it's removed from the queue\nbefore ever being synthesized, or <code>error</code> when any other error\noccurs. When pausing speech, a <code>pause</code> event is fired if a\nparticular utterance is paused in the middle, and <code>resume</code> if an\nutterance resumes speech. Note that pause and resume events may not fire if\nspeech is paused in-between utterances."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 19932,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 6092,
										"name": "EventType"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										6111,
										6112,
										6113,
										6110
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19918,
									"character": 29
								}
							]
						},
						{
							"id": 6094,
							"name": "TtsOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "The speech options for the TTS engine."
							},
							"children": [
								{
									"id": 6104,
									"name": "desiredEventTypes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The TTS event types that you are interested in listening to. If missing, all\nevent types may be sent."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 19902,
											"character": 23
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 6095,
									"name": "enqueue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "If true, enqueues this utterance if TTS is already in progress. If false (the\ndefault), interrupts any current speech and flushes the speech queue before\nspeaking this new utterance."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 19845,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 6097,
									"name": "extensionId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The extension ID of the speech engine to use, if known."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 19856,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 6099,
									"name": "gender",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Gender of voice for synthesized speech.",
										"tags": [
											{
												"tag": "deprecated",
												"text": "Gender is deprecated and will be ignored.\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 19869,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 6040,
										"name": "VoiceGender"
									}
								},
								{
									"id": 6098,
									"name": "lang",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The language to be used for synthesis, in the form\n<em>language</em>-<em>region</em>. Examples: 'en', 'en-US', 'en-GB', 'zh-CN'."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 19862,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 6105,
									"name": "onEvent",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "This function is called with events that occur in the process of speaking the\nutterance.",
										"tags": [
											{
												"tag": "param",
												"text": "The update event from the text-to-speech engine indicating the status of this utterance.\n",
												"param": "onEvent.event"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 19910,
											"character": 13
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 6106,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 6107,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 6108,
															"name": "event",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"id": 6109,
																"name": "TtsEvent"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 6101,
									"name": "pitch",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Speaking pitch between 0 and 2 inclusive, with 0 being lowest and 2 being\nhighest. 1.0 corresponds to a voice's default pitch."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 19885,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6100,
									"name": "rate",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Speaking rate relative to the default rate for this voice. 1.0 is the default\nrate, normally around 180 to 220 words per minute. 2.0 is twice as fast, and\n0.5 is half as fast. Values below 0.1 or above 10.0 are strictly disallowed,\nbut many voices will constrain the minimum and maximum rates\nfurther&mdash;for example a particular voice may not actually speak faster\nthan 3 times normal even if you specify a value larger than 3.0."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 19879,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6103,
									"name": "requiredEventTypes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The TTS event types the voice must support."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 19896,
											"character": 24
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 6096,
									"name": "voiceName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The name of the voice to use for synthesis. If empty, uses any available\nvoice."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 19851,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 6102,
									"name": "volume",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Speaking volume between 0 and 1 inclusive, with 0 being lowest and 1 being\nhighest, with a default of 1.0."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 19891,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										6104,
										6095,
										6097,
										6099,
										6098,
										6105,
										6101,
										6100,
										6103,
										6096,
										6102
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19839,
									"character": 31
								}
							]
						},
						{
							"id": 6114,
							"name": "TtsVoice",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "A description of a voice available for speech synthesis."
							},
							"children": [
								{
									"id": 6120,
									"name": "eventTypes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "All of the callback event types that this voice is capable of sending."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 19991,
											"character": 16
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 6092,
											"name": "EventType"
										}
									}
								},
								{
									"id": 6119,
									"name": "extensionId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The ID of the extension providing this voice."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 19986,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 6117,
									"name": "gender",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "This voice's gender.",
										"tags": [
											{
												"tag": "deprecated",
												"text": "Gender is deprecated and will be ignored.\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 19975,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 6040,
										"name": "VoiceGender"
									}
								},
								{
									"id": 6116,
									"name": "lang",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The language that this voice supports, in the form\n<em>language</em>-<em>region</em>. Examples: 'en', 'en-US', 'en-GB', 'zh-CN'."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 19968,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 6118,
									"name": "remote",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "If true, the synthesis engine is a remote network resource. It may be higher\nlatency and may incur bandwidth costs."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 19981,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 6115,
									"name": "voiceName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The name of the voice."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 19962,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										6120,
										6119,
										6117,
										6116,
										6118,
										6115
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19958,
									"character": 29
								}
							]
						},
						{
							"id": 6092,
							"name": "EventType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19832,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "start"
									},
									{
										"type": "literal",
										"value": "end"
									},
									{
										"type": "literal",
										"value": "word"
									},
									{
										"type": "literal",
										"value": "sentence"
									},
									{
										"type": "literal",
										"value": "marker"
									},
									{
										"type": "literal",
										"value": "interrupted"
									},
									{
										"type": "literal",
										"value": "cancelled"
									},
									{
										"type": "literal",
										"value": "error"
									},
									{
										"type": "literal",
										"value": "pause"
									},
									{
										"type": "literal",
										"value": "resume"
									}
								]
							}
						},
						{
							"id": 6093,
							"name": "VoiceGender",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19834,
									"character": 27
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "male"
									},
									{
										"type": "literal",
										"value": "female"
									}
								]
							}
						},
						{
							"id": 6086,
							"name": "getVoices",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20045,
									"character": 29
								}
							],
							"signatures": [
								{
									"id": 6087,
									"name": "getVoices",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets an array of all available voices."
									},
									"parameters": [
										{
											"id": 6088,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6089,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 20046,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 6090,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 6091,
																	"name": "voices",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "Array of {@link tts.TtsVoice} objects representing the available voices for speech synthesis.\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 6114,
																			"name": "TtsVoice"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 6080,
							"name": "isSpeaking",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20033,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 6081,
									"name": "isSpeaking",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Checks whether the engine is currently speaking. On Mac OS X, the result is\ntrue whenever the system speech engine is speaking, even if the speech wasn't\ninitiated by Chrome."
									},
									"parameters": [
										{
											"id": 6082,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6083,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 20034,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 6084,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 6085,
																	"name": "speaking",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "True if speaking, false otherwise.\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "boolean"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 6076,
							"name": "pause",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20018,
									"character": 25
								}
							],
							"signatures": [
								{
									"id": 6077,
									"name": "pause",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Pauses speech synthesis, potentially in the middle of an utterance. A call to\nresume or stop will un-pause speech."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 6078,
							"name": "resume",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20023,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 6079,
									"name": "resume",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "If speech was paused, resumes speaking where it left off."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 6067,
							"name": "speak",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20001,
									"character": 25
								}
							],
							"signatures": [
								{
									"id": 6068,
									"name": "speak",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Speaks text using a text-to-speech engine."
									},
									"parameters": [
										{
											"id": 6069,
											"name": "utterance",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The text to speak, either plain text or a complete, well-formed SSML document. Speech engines that do not support SSML will strip away the tags and speak the text. The maximum length of the text is 32,768 characters."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 6070,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The speech options."
											},
											"type": {
												"type": "reference",
												"id": 6094,
												"name": "TtsOptions"
											}
										},
										{
											"id": 6071,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called right away, before speech finishes. Check {@link runtime.lastError} to make sure there were no errors. Use options.onEvent to get more detailed feedback.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6072,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 20004,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 6073,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 6074,
							"name": "stop",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20012,
									"character": 24
								}
							],
							"signatures": [
								{
									"id": 6075,
									"name": "stop",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Stops any current speech and flushes the queue of any pending utterances. In\naddition, if speech was paused, it will now be un-paused for the next call to\nspeak."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								6109,
								6094,
								6114
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								6092,
								6093
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								6086,
								6080,
								6076,
								6078,
								6067,
								6074
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 19831,
							"character": 22
						}
					]
				},
				{
					"id": 6036,
					"name": "ttsEngine",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.ttsEngine</code> API to implement a text-to-speech(TTS)\nengine using an extension. If your extension registers using this API, it\nwill receive events containing an utterance to be spoken and other parameters\nwhen any extension or Chrome App uses the <a href='tts'>tts</a> API to\ngenerate speech. Your extension can then use any available web technology to\nsynthesize and output the speech, and send events back to the calling\nfunction to report the status.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "ttsEngine"
							},
							{
								"tag": "chrome-permission",
								"text": "ttsEngine\n"
							}
						]
					},
					"children": [
						{
							"id": 6040,
							"name": "VoiceGender",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19722,
									"character": 27
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "male"
									},
									{
										"type": "literal",
										"value": "female"
									}
								]
							}
						},
						{
							"id": 6060,
							"name": "onPause",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Optional: if an engine supports the pause event, it should pause the current\nutterance being spoken, if any, until it receives a resume event or stop\nevent. Note that a stop event should also clear the paused state."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19806,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6061,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 19806,
													"character": 46
												}
											],
											"signatures": [
												{
													"id": 6062,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 6063,
							"name": "onResume",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Optional: if an engine supports the pause event, it should also support the\nresume event, to continue speaking the current utterance, if any. Note that a\nstop event should also clear the paused state."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19815,
									"character": 25
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6064,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 19815,
													"character": 47
												}
											],
											"signatures": [
												{
													"id": 6065,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 6041,
							"name": "onSpeak",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Called when the user makes a call to tts.speak() and one of the voices from\nthis extension's manifest is the first to match the options object."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19738,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6042,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 19738,
													"character": 46
												}
											],
											"signatures": [
												{
													"id": 6043,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 6044,
															"name": "utterance",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "The text to speak, specified as either plain text or an SSML document. If your engine does not support SSML, you should strip out all XML markup and synthesize only the underlying text content. The value of this parameter is guaranteed to be no more than 32,768 characters. If this engine does not support speaking that many characters at a time, the utterance should be split into smaller chunks and queued internally without returning an error."
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 6045,
															"name": "options",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Options specified to the tts.speak() method.\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 6046,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 6049,
																			"name": "gender",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "Gender of voice for synthesized speech.",
																				"tags": [
																					{
																						"tag": "deprecated",
																						"text": "Gender is deprecated and will be ignored.\n"
																					}
																				]
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 19762,
																					"character": 16
																				}
																			],
																			"type": {
																				"type": "reference",
																				"id": 6040,
																				"name": "VoiceGender"
																			}
																		},
																		{
																			"id": 6048,
																			"name": "lang",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The language to be used for synthesis, in the form\n<em>language</em>-<em>region</em>. Examples: 'en', 'en-US', 'en-GB', 'zh-CN'."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 19755,
																					"character": 14
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6051,
																			"name": "pitch",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "Speaking pitch between 0 and 2 inclusive, with 0 being lowest and 2 being\nhighest. 1.0 corresponds to this voice's default pitch."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 19777,
																					"character": 15
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6050,
																			"name": "rate",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "Speaking rate relative to the default rate for this voice. 1.0 is the default\nrate, normally around 180 to 220 words per minute. 2.0 is twice as fast, and\n0.5 is half as fast. This value is guaranteed to be between 0.1 and 10.0,\ninclusive. When a voice does not support this full range of rates, don't\nreturn an error. Instead, clip the rate to the range the voice supports."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 19771,
																					"character": 14
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6047,
																			"name": "voiceName",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The name of the voice to use for synthesis."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 19749,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6052,
																			"name": "volume",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "Speaking volume between 0 and 1 inclusive, with 0 being lowest and 1 being\nhighest, with a default of 1.0."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 19783,
																					"character": 16
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				6049,
																				6048,
																				6051,
																				6050,
																				6047,
																				6052
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 19745,
																			"character": 16
																		}
																	]
																}
															}
														},
														{
															"id": 6053,
															"name": "sendTtsEvent",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 6054,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 19785,
																			"character": 21
																		}
																	],
																	"signatures": [
																		{
																			"id": 6055,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 6056,
																					"name": "event",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"id": 6109,
																						"name": "tts.TtsEvent"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 6057,
							"name": "onStop",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a call is made to tts.stop and this extension may be in the middle\nof speaking. If an extension receives a call to onStop and speech is already\nstopped, it should do nothing (not raise an error). If speech is in the\npaused state, this should cancel the paused state."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19797,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6058,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 19797,
													"character": 45
												}
											],
											"signatures": [
												{
													"id": 6059,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 6037,
							"name": "updateVoices",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 19730,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 6038,
									"name": "updateVoices",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called by an engine to update its list of voices. This list overrides any\nvoices declared in this extension's manifest."
									},
									"parameters": [
										{
											"id": 6039,
											"name": "voices",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Array of {@link tts.TtsVoice} objects representing the available voices for speech synthesis.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 6114,
													"name": "tts.TtsVoice"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								6040
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								6060,
								6063,
								6041,
								6057
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								6037
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 19721,
							"character": 28
						}
					]
				},
				{
					"id": 6121,
					"name": "types",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "The <code>chrome.types</code> API contains type declarations for Chrome.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "types\n"
							}
						]
					},
					"children": [
						{
							"id": 6124,
							"name": "ChromeSetting",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "An interface that allows access to a Chrome browser setting. See {@link\naccessibilityFeatures} for an example."
							},
							"children": [
								{
									"id": 6155,
									"name": "onChange",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Fired after the setting changes."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20168,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"id": 2537,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 6156,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 6157,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"comment": {},
															"parameters": [
																{
																	"id": 6158,
																	"name": "details",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 6159,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 6162,
																					"name": "incognitoSpecific",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {
																						"isOptional": true
																					},
																					"comment": {
																						"shortText": "Whether the value that has changed is specific to the incognito\nsession.<br/>This property will <em>only</em> be present if the user has\nenabled the extension in incognito mode."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 20189,
																							"character": 29
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "boolean"
																					}
																				},
																				{
																					"id": 6161,
																					"name": "levelOfControl",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"comment": {
																						"shortText": "The level of control of the setting."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 20182,
																							"character": 26
																						}
																					],
																					"type": {
																						"type": "reference",
																						"id": 3285,
																						"name": "LevelOfControl"
																					}
																				},
																				{
																					"id": 6160,
																					"name": "value",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"comment": {
																						"shortText": "The value of the setting after the change."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 20177,
																							"character": 17
																						}
																					],
																					"type": {
																						"type": "reference",
																						"name": "T"
																					}
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						6162,
																						6161,
																						6160
																					]
																				}
																			]
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										],
										"name": "Event"
									}
								},
								{
									"id": 6147,
									"name": "clear",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 6148,
											"name": "clear",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Clears the setting, restoring any default value."
											},
											"parameters": [
												{
													"id": 6149,
													"name": "details",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Which setting to clear."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 6150,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 6151,
																	"name": "scope",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"shortText": "Where to clear the setting (default: regular)."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 20160,
																			"character": 15
																		}
																	],
																	"type": {
																		"type": "reference",
																		"id": 6122,
																		"name": "ChromeSettingScope"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"kind": 1024,
																	"children": [
																		6151
																	]
																}
															]
														}
													}
												},
												{
													"id": 6152,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "Called at the completion of the clear operation.\n"
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 6153,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 6154,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 6125,
									"name": "get",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 6126,
											"name": "get",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Gets the value of a setting."
											},
											"parameters": [
												{
													"id": 6127,
													"name": "details",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Which setting to consider."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 6128,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 6129,
																	"name": "incognito",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"shortText": "Whether to return the value that applies to the incognito session (default\nfalse)."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 20102,
																			"character": 19
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "boolean"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"kind": 1024,
																	"children": [
																		6129
																	]
																}
															]
														}
													}
												},
												{
													"id": 6130,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 6131,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 6132,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 6133,
																			"name": "details",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"comment": {
																				"text": "Details of the currently effective value.\n"
																			},
																			"type": {
																				"type": "reflection",
																				"declaration": {
																					"id": 6134,
																					"name": "__type",
																					"kind": 65536,
																					"kindString": "Type literal",
																					"flags": {},
																					"children": [
																						{
																							"id": 6137,
																							"name": "incognitoSpecific",
																							"kind": 1024,
																							"kindString": "Property",
																							"flags": {
																								"isOptional": true
																							},
																							"comment": {
																								"shortText": "Whether the effective value is specific to the incognito session.<br/>This\nproperty will <em>only</em> be present if the <var>incognito</var> property\nin the <var>details</var> parameter of <code>get()</code> was true."
																							},
																							"sources": [
																								{
																									"fileName": "npm/index.d.ts",
																									"line": 20121,
																									"character": 29
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "boolean"
																							}
																						},
																						{
																							"id": 6136,
																							"name": "levelOfControl",
																							"kind": 1024,
																							"kindString": "Property",
																							"flags": {},
																							"comment": {
																								"shortText": "The level of control of the setting."
																							},
																							"sources": [
																								{
																									"fileName": "npm/index.d.ts",
																									"line": 20114,
																									"character": 26
																								}
																							],
																							"type": {
																								"type": "reference",
																								"id": 3285,
																								"name": "LevelOfControl"
																							}
																						},
																						{
																							"id": 6135,
																							"name": "value",
																							"kind": 1024,
																							"kindString": "Property",
																							"flags": {},
																							"comment": {
																								"shortText": "The value of the setting."
																							},
																							"sources": [
																								{
																									"fileName": "npm/index.d.ts",
																									"line": 20109,
																									"character": 17
																								}
																							],
																							"type": {
																								"type": "reference",
																								"name": "T"
																							}
																						}
																					],
																					"groups": [
																						{
																							"title": "Properties",
																							"kind": 1024,
																							"children": [
																								6137,
																								6136,
																								6135
																							]
																						}
																					]
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 6138,
									"name": "set",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 6139,
											"name": "set",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Sets the value of a setting."
											},
											"parameters": [
												{
													"id": 6140,
													"name": "details",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Which setting to change."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 6141,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 6143,
																	"name": "scope",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"shortText": "Where to set the setting (default: regular)."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 20144,
																			"character": 15
																		}
																	],
																	"type": {
																		"type": "reference",
																		"id": 6122,
																		"name": "ChromeSettingScope"
																	}
																},
																{
																	"id": 6142,
																	"name": "value",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"comment": {
																		"shortText": "The value of the setting. <br/>Note that every setting has a specific value\ntype, which is described together with the setting. An extension should\n<em>not</em> set a value of a different type."
																	},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 20139,
																			"character": 15
																		}
																	],
																	"type": {
																		"type": "reference",
																		"name": "T"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"kind": 1024,
																	"children": [
																		6143,
																		6142
																	]
																}
															]
														}
													}
												},
												{
													"id": 6144,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "Called at the completion of the set operation.\n"
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 6145,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 6146,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										6155
									]
								},
								{
									"title": "Methods",
									"kind": 2048,
									"children": [
										6147,
										6125,
										6138
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20088,
									"character": 34
								}
							],
							"typeParameter": [
								{
									"id": 6163,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							]
						},
						{
							"id": 6122,
							"name": "ChromeSettingScope",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The scope of the ChromeSetting. One of<ul><li><var>regular</var>: setting for\nthe regular profile (which is inherited by the incognito profile if not\noverridden elsewhere),</li><li><var>regular_only</var>: setting for the\nregular profile only (not inherited by the incognito\nprofile),</li><li><var>incognito_persistent</var>: setting for the incognito\nprofile that survives browser restarts (overrides regular\npreferences),</li><li><var>incognito_session_only</var>: setting for the\nincognito profile that can only be set during an incognito session and is\ndeleted when the incognito session ends (overrides regular and\nincognito_persistent preferences).</li></ul>"
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20072,
									"character": 34
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "regular"
									},
									{
										"type": "literal",
										"value": "regular_only"
									},
									{
										"type": "literal",
										"value": "incognito_persistent"
									},
									{
										"type": "literal",
										"value": "incognito_session_only"
									}
								]
							}
						},
						{
							"id": 6123,
							"name": "LevelOfControl",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "One of<ul><li><var>not_controllable</var>: cannot be controlled by any\nextension</li><li><var>controlled_by_other_extensions</var>: controlled by\nextensions with higher\nprecedence</li><li><var>controllable_by_this_extension</var>: can be\ncontrolled by this extension</li><li><var>controlled_by_this_extension</var>:\ncontrolled by this extension</li></ul>"
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20082,
									"character": 30
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "not_controllable"
									},
									{
										"type": "literal",
										"value": "controlled_by_other_extensions"
									},
									{
										"type": "literal",
										"value": "controllable_by_this_extension"
									},
									{
										"type": "literal",
										"value": "controlled_by_this_extension"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								6124
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								6122,
								6123
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 20059,
							"character": 24
						}
					]
				},
				{
					"id": 6164,
					"name": "usb",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.usb</code> API to interact with connected USB\ndevices.\nThis API provides access to USB operations from within the context\nof an\napp. Using this API, apps can function as drivers for hardware devices.\nErrors generated by this API are reported by setting\n{@link\nruntime.lastError} and executing the function's regular callback. The\ncallback's regular parameters will be undefined in this case.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "usb"
							},
							{
								"tag": "chrome-permission",
								"text": "usb\n"
							}
						]
					},
					"children": [
						{
							"id": 6332,
							"name": "ConfigDescriptor",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 6333,
									"name": "active",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Is this the active configuration?"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20379,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 6334,
									"name": "configurationValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The configuration number."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20384,
											"character": 24
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6335,
									"name": "description",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Description of the configuration."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20389,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 6340,
									"name": "extra_data",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Extra descriptor data associated with this configuration."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20414,
											"character": 16
										}
									],
									"type": {
										"type": "reference",
										"name": "ArrayBuffer"
									}
								},
								{
									"id": 6339,
									"name": "interfaces",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Available interfaces."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20409,
											"character": 16
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 6323,
											"name": "InterfaceDescriptor"
										}
									}
								},
								{
									"id": 6338,
									"name": "maxPower",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The maximum power needed by this device in milliamps (mA)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20404,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6337,
									"name": "remoteWakeup",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The device supports remote wakeup."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20399,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 6336,
									"name": "selfPowered",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The device is self-powered."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20394,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										6333,
										6334,
										6335,
										6340,
										6339,
										6338,
										6337,
										6336
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20375,
									"character": 37
								}
							]
						},
						{
							"id": 6310,
							"name": "ConnectionHandle",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 6311,
									"name": "handle",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "An opaque handle representing this connection to the USB device and all\nassociated claimed interfaces and pending transfers. A new handle is created\neach time the device is opened. The connection handle is different from\n{@link Device.device}."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20278,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6313,
									"name": "productId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The product ID."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20288,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6312,
									"name": "vendorId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The device vendor ID."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20283,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										6311,
										6313,
										6312
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20271,
									"character": 37
								}
							]
						},
						{
							"id": 6341,
							"name": "ControlTransferInfo",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 6349,
									"name": "data",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The data to transmit (required only by output transfers)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20458,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "ArrayBuffer"
									}
								},
								{
									"id": 6342,
									"name": "direction",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The transfer direction (<code>\"in\"</code> or <code>\"out\"</code>)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20421,
											"character": 15
										}
									],
									"type": {
										"type": "reference",
										"id": 6296,
										"name": "Direction"
									}
								},
								{
									"id": 6347,
									"name": "index",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The <code>wIndex</code> field, see <i>Ibid</i>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20448,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6348,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The maximum number of bytes to receive (required only by input transfers)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20453,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6343,
									"name": "recipient",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The transfer target. The target given by <code>index</code> must be claimed\nif <code>\"interface\"</code> or <code>\"endpoint\"</code>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20427,
											"character": 15
										}
									],
									"type": {
										"type": "reference",
										"id": 6297,
										"name": "Recipient"
									}
								},
								{
									"id": 6345,
									"name": "request",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The <code>bRequest</code> field, see <i>Universal Serial Bus Specification\nRevision 1.1</i> &sect; 9.3."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20438,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6344,
									"name": "requestType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The request type."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20432,
											"character": 17
										}
									],
									"type": {
										"type": "reference",
										"id": 6298,
										"name": "RequestType"
									}
								},
								{
									"id": 6350,
									"name": "timeout",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Request timeout (in milliseconds). The default value <code>0</code> indicates\nno timeout."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20464,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6346,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The <code>wValue</code> field, see <i>Ibid</i>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20443,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										6349,
										6342,
										6347,
										6348,
										6343,
										6345,
										6344,
										6350,
										6346
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20417,
									"character": 40
								}
							]
						},
						{
							"id": 6302,
							"name": "Device",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 6303,
									"name": "device",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "An opaque ID for the USB device. It remains unchanged until the device is\nunplugged."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20238,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6308,
									"name": "manufacturerName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The iManufacturer string read from the device, if available."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20263,
											"character": 22
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 6305,
									"name": "productId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The product ID."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20248,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6307,
									"name": "productName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The iProduct string read from the device, if available."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20258,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 6309,
									"name": "serialNumber",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The iSerialNumber string read from the device, if available."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20268,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 6304,
									"name": "vendorId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The device vendor ID."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20243,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6306,
									"name": "version",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The device version (bcdDevice field)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20253,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										6303,
										6308,
										6305,
										6307,
										6309,
										6304,
										6306
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20233,
									"character": 27
								}
							]
						},
						{
							"id": 6364,
							"name": "DeviceFilter",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 6367,
									"name": "interfaceClass",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "USB interface class, matches any interface on the device."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20543,
											"character": 20
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6369,
									"name": "interfaceProtocol",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "USB interface protocol, checked only if the interface sub-class matches."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20553,
											"character": 23
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6368,
									"name": "interfaceSubclass",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "USB interface sub-class, checked only if the interface class matches."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20548,
											"character": 23
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6366,
									"name": "productId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Device product ID, checked only if the vendor ID matches."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20538,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6365,
									"name": "vendorId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Device vendor ID."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20533,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										6367,
										6369,
										6368,
										6366,
										6365
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20529,
									"character": 33
								}
							]
						},
						{
							"id": 6378,
							"name": "DevicePromptOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 6380,
									"name": "filters",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Filter the list of devices presented to the user. If multiple filters are\nprovided devices matching any filter will be displayed."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20602,
											"character": 13
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 6364,
											"name": "DeviceFilter"
										}
									}
								},
								{
									"id": 6379,
									"name": "multiple",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Allow the user to select multiple devices."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20596,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										6380,
										6379
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20592,
									"character": 40
								}
							]
						},
						{
							"id": 6314,
							"name": "EndpointDescriptor",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 6315,
									"name": "address",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Endpoint address."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20295,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6317,
									"name": "direction",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Transfer direction."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20305,
											"character": 15
										}
									],
									"type": {
										"type": "reference",
										"id": 6296,
										"name": "Direction"
									}
								},
								{
									"id": 6322,
									"name": "extra_data",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Extra descriptor data associated with this endpoint."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20330,
											"character": 16
										}
									],
									"type": {
										"type": "reference",
										"name": "ArrayBuffer"
									}
								},
								{
									"id": 6318,
									"name": "maximumPacketSize",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Maximum packet size."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20310,
											"character": 23
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6321,
									"name": "pollingInterval",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Polling interval (interrupt and isochronous only)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20325,
											"character": 21
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6319,
									"name": "synchronization",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Transfer synchronization mode (isochronous only)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20315,
											"character": 21
										}
									],
									"type": {
										"type": "reference",
										"id": 6300,
										"name": "SynchronizationType"
									}
								},
								{
									"id": 6316,
									"name": "type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Transfer type."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20300,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 6299,
										"name": "TransferType"
									}
								},
								{
									"id": 6320,
									"name": "usage",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Endpoint usage hint."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20320,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"id": 6301,
										"name": "UsageType"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										6315,
										6317,
										6322,
										6318,
										6321,
										6319,
										6316,
										6320
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20291,
									"character": 39
								}
							]
						},
						{
							"id": 6374,
							"name": "EnumerateDevicesAndRequestAccessOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 6377,
									"name": "interfaceId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The interface ID to request access to. Only available on Chrome OS. It has no\neffect on other platforms."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20589,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6376,
									"name": "productId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The product ID."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20583,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6375,
									"name": "vendorId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The device vendor ID."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20578,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										6377,
										6376,
										6375
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20574,
									"character": 60
								}
							]
						},
						{
							"id": 6370,
							"name": "EnumerateDevicesOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 6373,
									"name": "filters",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "A device matching any given filter will be returned. An empty filter list\nwill return all devices the app has permission for."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20571,
											"character": 13
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 6364,
											"name": "DeviceFilter"
										}
									}
								},
								{
									"id": 6372,
									"name": "productId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"tags": [
											{
												"tag": "deprecated",
												"text": "Equivalent to setting {@link DeviceFilter.productId}.\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20565,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6371,
									"name": "vendorId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"tags": [
											{
												"tag": "deprecated",
												"text": "Equivalent to setting {@link DeviceFilter.vendorId}.\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20560,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										6373,
										6372,
										6371
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20556,
									"character": 44
								}
							]
						},
						{
							"id": 6351,
							"name": "GenericTransferInfo",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 6355,
									"name": "data",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The data to transmit (required only by output transfers)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20487,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "ArrayBuffer"
									}
								},
								{
									"id": 6352,
									"name": "direction",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The transfer direction (<code>\"in\"</code> or <code>\"out\"</code>)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20471,
											"character": 15
										}
									],
									"type": {
										"type": "reference",
										"id": 6296,
										"name": "Direction"
									}
								},
								{
									"id": 6353,
									"name": "endpoint",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The target endpoint address. The interface containing this endpoint must be\nclaimed."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20477,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6354,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The maximum number of bytes to receive (required only by input transfers)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20482,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6356,
									"name": "timeout",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Request timeout (in milliseconds). The default value <code>0</code> indicates\nno timeout."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20493,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										6355,
										6352,
										6353,
										6354,
										6356
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20467,
									"character": 40
								}
							]
						},
						{
							"id": 6323,
							"name": "InterfaceDescriptor",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 6325,
									"name": "alternateSetting",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The interface alternate setting number (defaults to <code>0</code)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20342,
											"character": 22
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6329,
									"name": "description",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Description of the interface."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20362,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 6330,
									"name": "endpoints",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Available endpoints."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20367,
											"character": 15
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 6314,
											"name": "EndpointDescriptor"
										}
									}
								},
								{
									"id": 6331,
									"name": "extra_data",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Extra descriptor data associated with this interface."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20372,
											"character": 16
										}
									],
									"type": {
										"type": "reference",
										"name": "ArrayBuffer"
									}
								},
								{
									"id": 6326,
									"name": "interfaceClass",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The USB interface class."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20347,
											"character": 20
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6324,
									"name": "interfaceNumber",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The interface number."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20337,
											"character": 21
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6328,
									"name": "interfaceProtocol",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The USB interface protocol."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20357,
											"character": 23
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6327,
									"name": "interfaceSubclass",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The USB interface sub-class."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20352,
											"character": 23
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										6325,
										6329,
										6330,
										6331,
										6326,
										6324,
										6328,
										6327
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20333,
									"character": 40
								}
							]
						},
						{
							"id": 6357,
							"name": "IsochronousTransferInfo",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 6360,
									"name": "packetLength",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The length of each of the packets in this transfer."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20512,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6359,
									"name": "packets",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The total number of packets in this transfer."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20507,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6358,
									"name": "transferInfo",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Transfer parameters. The transfer length or data buffer specified in this\nparameter block is split along <code>packetLength</code> boundaries to form\nthe individual packets of the transfer."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20502,
											"character": 18
										}
									],
									"type": {
										"type": "reference",
										"id": 6351,
										"name": "GenericTransferInfo"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										6360,
										6359,
										6358
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20496,
									"character": 44
								}
							]
						},
						{
							"id": 6361,
							"name": "TransferResultInfo",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 6363,
									"name": "data",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The data returned by an input transfer. <code>undefined</code> for output\ntransfers."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20526,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "ArrayBuffer"
									}
								},
								{
									"id": 6362,
									"name": "resultCode",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "A value of <code>0</code> indicates that the transfer was a success. Other\nvalues indicate failure."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20520,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										6363,
										6362
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20515,
									"character": 39
								}
							]
						},
						{
							"id": 6296,
							"name": "Direction",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "Direction, Recipient, RequestType, and TransferType all map to their\nnamesakes within the USB specification."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20217,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "in"
									},
									{
										"type": "literal",
										"value": "out"
									}
								]
							}
						},
						{
							"id": 6297,
							"name": "Recipient",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20219,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "device"
									},
									{
										"type": "literal",
										"value": "interface"
									},
									{
										"type": "literal",
										"value": "endpoint"
									},
									{
										"type": "literal",
										"value": "other"
									}
								]
							}
						},
						{
							"id": 6298,
							"name": "RequestType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20221,
									"character": 27
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "standard"
									},
									{
										"type": "literal",
										"value": "class"
									},
									{
										"type": "literal",
										"value": "vendor"
									},
									{
										"type": "literal",
										"value": "reserved"
									}
								]
							}
						},
						{
							"id": 6300,
							"name": "SynchronizationType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "For interrupt and isochronous modes, SynchronizationType and UsageType map to\ntheir namesakes within the USB specification."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20229,
									"character": 35
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "asynchronous"
									},
									{
										"type": "literal",
										"value": "adaptive"
									},
									{
										"type": "literal",
										"value": "synchronous"
									}
								]
							}
						},
						{
							"id": 6299,
							"name": "TransferType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20223,
									"character": 28
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "control"
									},
									{
										"type": "literal",
										"value": "interrupt"
									},
									{
										"type": "literal",
										"value": "isochronous"
									},
									{
										"type": "literal",
										"value": "bulk"
									}
								]
							}
						},
						{
							"id": 6301,
							"name": "UsageType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20231,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "data"
									},
									{
										"type": "literal",
										"value": "feedback"
									},
									{
										"type": "literal",
										"value": "explicitFeedback"
									},
									{
										"type": "literal",
										"value": "periodic"
									},
									{
										"type": "literal",
										"value": "notification"
									}
								]
							}
						},
						{
							"id": 6381,
							"name": "onDeviceAdded",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Event generated when a device is added to the system. Events are only\nbroadcast to apps and extensions that have permission to access the device.\nPermission may have been granted at install time, when the user accepted an\noptional permission (see {@link permissions.request}), or through {@link\ngetUserSelectedDevices}."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20896,
									"character": 30
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6382,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 20896,
													"character": 52
												}
											],
											"signatures": [
												{
													"id": 6383,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 6384,
															"name": "device",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reference",
																"id": 6302,
																"name": "Device"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 6385,
							"name": "onDeviceRemoved",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Event generated when a device is removed from the system. See {@link\nonDeviceAdded} for which events are delivered."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20909,
									"character": 32
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6386,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 20909,
													"character": 54
												}
											],
											"signatures": [
												{
													"id": 6387,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 6388,
															"name": "device",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reference",
																"id": 6302,
																"name": "Device"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 6265,
							"name": "bulkTransfer",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20832,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 6266,
									"name": "bulkTransfer",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs a bulk transfer on the specified device."
									},
									"parameters": [
										{
											"id": 6267,
											"name": "handle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An open connection to the device."
											},
											"type": {
												"type": "reference",
												"id": 6310,
												"name": "ConnectionHandle"
											}
										},
										{
											"id": 6268,
											"name": "transferInfo",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The transfer parameters."
											},
											"type": {
												"type": "reference",
												"id": 6351,
												"name": "GenericTransferInfo"
											}
										},
										{
											"id": 6269,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6270,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 20835,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 6271,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 6272,
																	"name": "info",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 6361,
																		"name": "TransferResultInfo"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 6235,
							"name": "claimInterface",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20772,
									"character": 34
								}
							],
							"signatures": [
								{
									"id": 6236,
									"name": "claimInterface",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "<p>Claims an interface on a USB device. Before data can be transfered to an\ninterface or associated endpoints the interface must be claimed. Only one\nconnection handle can claim an interface at any given time. If the interface\nis already claimed, this call will fail.</p><p>{@link releaseInterface}\nshould be called when the interface is no longer needed.</p>"
									},
									"parameters": [
										{
											"id": 6237,
											"name": "handle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An open connection to the device."
											},
											"type": {
												"type": "reference",
												"id": 6310,
												"name": "ConnectionHandle"
											}
										},
										{
											"id": 6238,
											"name": "interfaceNumber",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The interface to be claimed."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 6239,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6240,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 20775,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 6241,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 6208,
							"name": "closeDevice",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20711,
									"character": 31
								}
							],
							"signatures": [
								{
									"id": 6209,
									"name": "closeDevice",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Closes a connection handle. Invoking operations on a handle after it has been\nclosed is a safe operation but causes no action to be taken."
									},
									"parameters": [
										{
											"id": 6210,
											"name": "handle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The {@link ConnectionHandle} to close."
											},
											"type": {
												"type": "reference",
												"id": 6310,
												"name": "ConnectionHandle"
											}
										},
										{
											"id": 6211,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6212,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 20713,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 6213,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 6257,
							"name": "controlTransfer",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20816,
									"character": 35
								}
							],
							"signatures": [
								{
									"id": 6258,
									"name": "controlTransfer",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "<p>Performs a control transfer on the specified device.</p><p>Control\ntransfers refer to either the device, an interface or an endpoint. Transfers\nto an interface or endpoint require the interface to be claimed.</p>"
									},
									"parameters": [
										{
											"id": 6259,
											"name": "handle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An open connection to the device."
											},
											"type": {
												"type": "reference",
												"id": 6310,
												"name": "ConnectionHandle"
											}
										},
										{
											"id": 6260,
											"name": "transferInfo",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 6341,
												"name": "ControlTransferInfo"
											}
										},
										{
											"id": 6261,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6262,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 20819,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 6263,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 6264,
																	"name": "info",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 6361,
																		"name": "TransferResultInfo"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 6201,
							"name": "findDevices",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20697,
									"character": 31
								}
							],
							"signatures": [
								{
									"id": 6202,
									"name": "findDevices",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "<p>Finds USB devices specified by the vendor, product and (optionally)\ninterface IDs and if permissions allow opens them for use.</p><p>If the\naccess request is rejected or the device fails to be opened a connection\nhandle will not be created or returned.</p><p>Calling this method is\nequivalent to calling {@link getDevices} followed by {@link openDevice} for\neach device.</p>"
									},
									"parameters": [
										{
											"id": 6203,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The properties to search for on target devices."
											},
											"type": {
												"type": "reference",
												"id": 6374,
												"name": "EnumerateDevicesAndRequestAccessOptions"
											}
										},
										{
											"id": 6204,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6205,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 20699,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 6206,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 6207,
																	"name": "handles",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 6310,
																			"name": "ConnectionHandle"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 6221,
							"name": "getConfiguration",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20740,
									"character": 36
								}
							],
							"signatures": [
								{
									"id": 6222,
									"name": "getConfiguration",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the configuration descriptor for the currently selected configuration."
									},
									"parameters": [
										{
											"id": 6223,
											"name": "handle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An open connection to the device."
											},
											"type": {
												"type": "reference",
												"id": 6310,
												"name": "ConnectionHandle"
											}
										},
										{
											"id": 6224,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6225,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 20742,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 6226,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 6227,
																	"name": "config",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 6332,
																		"name": "ConfigDescriptor"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 6179,
							"name": "getConfigurations",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20643,
									"character": 37
								}
							],
							"signatures": [
								{
									"id": 6180,
									"name": "getConfigurations",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the full set of device configuration descriptors."
									},
									"parameters": [
										{
											"id": 6181,
											"name": "device",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The {@link Device} to fetch descriptors from."
											},
											"type": {
												"type": "reference",
												"id": 6302,
												"name": "Device"
											}
										},
										{
											"id": 6182,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6183,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 20645,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 6184,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 6185,
																	"name": "configs",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 6332,
																			"name": "ConfigDescriptor"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 6165,
							"name": "getDevices",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20612,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 6166,
									"name": "getDevices",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Enumerates connected USB devices."
									},
									"parameters": [
										{
											"id": 6167,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The properties to search for on target devices."
											},
											"type": {
												"type": "reference",
												"id": 6370,
												"name": "EnumerateDevicesOptions"
											}
										},
										{
											"id": 6168,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6169,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 20614,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 6170,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 6171,
																	"name": "devices",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 6302,
																			"name": "Device"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 6172,
							"name": "getUserSelectedDevices",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20629,
									"character": 42
								}
							],
							"signatures": [
								{
									"id": 6173,
									"name": "getUserSelectedDevices",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Presents a device picker to the user and returns the {@link Device}s\nselected. If the user cancels the picker devices will be empty. A user\ngesture is required for the dialog to display. Without a user gesture, the\ncallback will run as though the user cancelled."
									},
									"parameters": [
										{
											"id": 6174,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Configuration of the device picker dialog box."
											},
											"type": {
												"type": "reference",
												"id": 6378,
												"name": "DevicePromptOptions"
											}
										},
										{
											"id": 6175,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Invoked with a list of chosen {@link Device}s."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6176,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 20631,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 6177,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 6178,
																	"name": "devices",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 6302,
																			"name": "Device"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 6273,
							"name": "interruptTransfer",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20848,
									"character": 37
								}
							],
							"signatures": [
								{
									"id": 6274,
									"name": "interruptTransfer",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs an interrupt transfer on the specified device."
									},
									"parameters": [
										{
											"id": 6275,
											"name": "handle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An open connection to the device."
											},
											"type": {
												"type": "reference",
												"id": 6310,
												"name": "ConnectionHandle"
											}
										},
										{
											"id": 6276,
											"name": "transferInfo",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The transfer parameters."
											},
											"type": {
												"type": "reference",
												"id": 6351,
												"name": "GenericTransferInfo"
											}
										},
										{
											"id": 6277,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6278,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 20851,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 6279,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 6280,
																	"name": "info",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 6361,
																		"name": "TransferResultInfo"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 6281,
							"name": "isochronousTransfer",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20864,
									"character": 39
								}
							],
							"signatures": [
								{
									"id": 6282,
									"name": "isochronousTransfer",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs an isochronous transfer on the specific device."
									},
									"parameters": [
										{
											"id": 6283,
											"name": "handle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An open connection to the device."
											},
											"type": {
												"type": "reference",
												"id": 6310,
												"name": "ConnectionHandle"
											}
										},
										{
											"id": 6284,
											"name": "transferInfo",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 6357,
												"name": "IsochronousTransferInfo"
											}
										},
										{
											"id": 6285,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6286,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 20867,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 6287,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 6288,
																	"name": "info",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 6361,
																		"name": "TransferResultInfo"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 6228,
							"name": "listInterfaces",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20754,
									"character": 34
								}
							],
							"signatures": [
								{
									"id": 6229,
									"name": "listInterfaces",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Lists all interfaces on a USB device."
									},
									"parameters": [
										{
											"id": 6230,
											"name": "handle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An open connection to the device."
											},
											"type": {
												"type": "reference",
												"id": 6310,
												"name": "ConnectionHandle"
											}
										},
										{
											"id": 6231,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6232,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 20756,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 6233,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 6234,
																	"name": "descriptors",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 6323,
																			"name": "InterfaceDescriptor"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 6194,
							"name": "openDevice",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20678,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 6195,
									"name": "openDevice",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Opens a USB device returned by {@link getDevices}."
									},
									"parameters": [
										{
											"id": 6196,
											"name": "device",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The {@link Device} to open."
											},
											"type": {
												"type": "reference",
												"id": 6302,
												"name": "Device"
											}
										},
										{
											"id": 6197,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6198,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 20680,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 6199,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 6200,
																	"name": "handle",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 6310,
																		"name": "ConnectionHandle"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 6242,
							"name": "releaseInterface",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20785,
									"character": 36
								}
							],
							"signatures": [
								{
									"id": 6243,
									"name": "releaseInterface",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Releases a claimed interface."
									},
									"parameters": [
										{
											"id": 6244,
											"name": "handle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An open connection to the device."
											},
											"type": {
												"type": "reference",
												"id": 6310,
												"name": "ConnectionHandle"
											}
										},
										{
											"id": 6245,
											"name": "interfaceNumber",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The interface to be released."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 6246,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6247,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 20788,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 6248,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 6186,
							"name": "requestAccess",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20663,
									"character": 33
								}
							],
							"signatures": [
								{
									"id": 6187,
									"name": "requestAccess",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Requests access from the permission broker to a device claimed by Chrome OS\nif the given interface on the device is not claimed.",
										"tags": [
											{
												"tag": "deprecated",
												"text": "This function was Chrome OS specific and calling it on other\nplatforms would fail. This operation is now implicitly performed as part of\n{@link openDevice} and this function will return <code>true</code> on all\nplatforms.\n"
											}
										]
									},
									"parameters": [
										{
											"id": 6188,
											"name": "device",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The {@link Device} to request access to."
											},
											"type": {
												"type": "reference",
												"id": 6302,
												"name": "Device"
											}
										},
										{
											"id": 6189,
											"name": "interfaceId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The particular interface requested."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 6190,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6191,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 20666,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 6192,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 6193,
																	"name": "success",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "boolean"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 6289,
							"name": "resetDevice",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20882,
									"character": 31
								}
							],
							"signatures": [
								{
									"id": 6290,
									"name": "resetDevice",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Tries to reset the USB device. If the reset fails, the given connection\nhandle will be closed and the  USB device will appear to be disconnected then\nreconnected.  In this case {@link getDevices} or {@link findDevices} must be\ncalled again to acquire the device."
									},
									"parameters": [
										{
											"id": 6291,
											"name": "handle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A connection handle to reset."
											},
											"type": {
												"type": "reference",
												"id": 6310,
												"name": "ConnectionHandle"
											}
										},
										{
											"id": 6292,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6293,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 20884,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 6294,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 6295,
																	"name": "success",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "boolean"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 6214,
							"name": "setConfiguration",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20727,
									"character": 36
								}
							],
							"signatures": [
								{
									"id": 6215,
									"name": "setConfiguration",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "<p>Select a device configuration.</p><p>This function effectively resets the\ndevice by selecting one of the device's available configurations. Only\nconfiguration values greater than <code>0</code> are valid however some buggy\ndevices have a working configuration <code>0</code> and so this value is\nallowed.</p>"
									},
									"parameters": [
										{
											"id": 6216,
											"name": "handle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An open connection to the device."
											},
											"type": {
												"type": "reference",
												"id": 6310,
												"name": "ConnectionHandle"
											}
										},
										{
											"id": 6217,
											"name": "configurationValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 6218,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6219,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 20730,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 6220,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 6249,
							"name": "setInterfaceAlternateSetting",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20799,
									"character": 48
								}
							],
							"signatures": [
								{
									"id": 6250,
									"name": "setInterfaceAlternateSetting",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Selects an alternate setting on a previously claimed interface."
									},
									"parameters": [
										{
											"id": 6251,
											"name": "handle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An open connection to the device where this interface has been     claimed."
											},
											"type": {
												"type": "reference",
												"id": 6310,
												"name": "ConnectionHandle"
											}
										},
										{
											"id": 6252,
											"name": "interfaceNumber",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The interface to configure."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 6253,
											"name": "alternateSetting",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The alternate setting to configure."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 6254,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6255,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 20803,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 6256,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								6332,
								6310,
								6341,
								6302,
								6364,
								6378,
								6314,
								6374,
								6370,
								6351,
								6323,
								6357,
								6361
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								6296,
								6297,
								6298,
								6300,
								6299,
								6301
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								6381,
								6385
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								6265,
								6235,
								6208,
								6257,
								6201,
								6221,
								6179,
								6165,
								6172,
								6273,
								6281,
								6228,
								6194,
								6242,
								6186,
								6289,
								6214,
								6249
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 20212,
							"character": 22
						}
					]
				},
				{
					"id": 6389,
					"name": "vpnProvider",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.vpnProvider</code> API to implement a VPN\nclient.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "vpnProvider"
							},
							{
								"tag": "chrome-platform",
								"text": "chromeos"
							},
							{
								"tag": "chrome-permission",
								"text": "vpnProvider\n"
							}
						]
					},
					"children": [
						{
							"id": 6421,
							"name": "Parameters",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 6422,
									"name": "address",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "IP address for the VPN interface in CIDR notation. IPv4 is currently the only\nsupported mode."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20935,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 6423,
									"name": "broadcastAddress",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Broadcast address for the VPN interface. (default: deduced from IP address\nand mask)"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20941,
											"character": 22
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 6428,
									"name": "dnsServers",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "A list of IPs for the DNS servers."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20979,
											"character": 16
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 6427,
									"name": "domainSearch",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "A list of search domains. (default: no search domain)"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20974,
											"character": 18
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 6425,
									"name": "exclusionList",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Exclude network traffic to the list of IP blocks in CIDR notation from the\ntunnel. This can be used to bypass traffic to and from the VPN server. When\nmany rules match a destination, the rule with the longest matching prefix\nwins. Entries that correspond to the same CIDR block are treated as\nduplicates. Such duplicates in the collated (exclusionList + inclusionList)\nlist are eliminated and the exact duplicate entry that will be eliminated is\nundefined."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20957,
											"character": 19
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 6426,
									"name": "inclusionList",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Include network traffic to the list of IP blocks in CIDR notation to the\ntunnel. This parameter can be used to set up a split tunnel. By default no\ntraffic is directed to the tunnel. Adding the entry \"0.0.0.0/0\" to this list\ngets all the user traffic redirected to the tunnel. When many rules match a\ndestination, the rule with the longest matching prefix wins. Entries that\ncorrespond to the same CIDR block are treated as duplicates. Such duplicates\nin the collated (exclusionList + inclusionList) list are eliminated and the\nexact duplicate entry that will be eliminated is undefined."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20969,
											"character": 19
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 6424,
									"name": "mtu",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "MTU setting for the VPN interface. (default: 1500 bytes)"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20946,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 6429,
									"name": "reconnect",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "<p>Whether or not the VPN extension implements auto-reconnection.</p><p>If\ntrue, the <code>linkDown</code>, <code>linkUp</code>,\n<code>linkChanged</code>, <code>suspend</code>, and <code>resume</code>\nplatform messages will be used to signal the respective events. If false, the\nsystem will forcibly disconnect the VPN if the network topology changes, and\nthe user will need to reconnect manually. (default: false)</p><p>This\nproperty is new in Chrome 51; it will generate an exception in earlier\nversions. try/catch can be used to conditionally enable the feature based on\nbrowser support.</p>"
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 20992,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										6422,
										6423,
										6428,
										6427,
										6425,
										6426,
										6424,
										6429
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20930,
									"character": 31
								}
							]
						},
						{
							"id": 6430,
							"name": "PlatformMessage",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The enum is used by the platform to notify the client of the VPN session\nstatus."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 20999,
									"character": 31
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "connected"
									},
									{
										"type": "literal",
										"value": "disconnected"
									},
									{
										"type": "literal",
										"value": "error"
									},
									{
										"type": "literal",
										"value": "linkDown"
									},
									{
										"type": "literal",
										"value": "linkUp"
									},
									{
										"type": "literal",
										"value": "linkChanged"
									},
									{
										"type": "literal",
										"value": "suspend"
									},
									{
										"type": "literal",
										"value": "resume"
									}
								]
							}
						},
						{
							"id": 6432,
							"name": "UIEvent",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The enum is used by the platform to indicate the event that triggered\n<code>onUIEvent</code>."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21011,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "showAddDialog"
									},
									{
										"type": "literal",
										"value": "showConfigureDialog"
									}
								]
							}
						},
						{
							"id": 6431,
							"name": "VpnConnectionState",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The enum is used by the VPN client to inform the platform of its current\nstate. This helps provide meaningful messages to the user."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21005,
									"character": 34
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "connected"
									},
									{
										"type": "literal",
										"value": "failure"
									}
								]
							}
						},
						{
							"id": 6447,
							"name": "onConfigCreated",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Triggered when a configuration is created by the platform for the extension."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21122,
									"character": 32
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6448,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 21122,
													"character": 54
												}
											],
											"signatures": [
												{
													"id": 6449,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 6450,
															"name": "id",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "ID of the configuration created."
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 6451,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Name of the configuration created."
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 6452,
															"name": "data",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Configuration data provided by the administrator.\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 6453,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 21131,
																			"character": 13
																		}
																	],
																	"indexSignature": {
																		"id": 6454,
																		"name": "__index",
																		"kind": 8192,
																		"kindString": "Index signature",
																		"flags": {},
																		"parameters": [
																			{
																				"id": 6455,
																				"name": "name",
																				"kind": 32768,
																				"flags": {},
																				"type": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			}
																		],
																		"type": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 6443,
							"name": "onConfigRemoved",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Triggered when a configuration created by the extension is removed by the\nplatform."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21110,
									"character": 32
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6444,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 21110,
													"character": 54
												}
											],
											"signatures": [
												{
													"id": 6445,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 6446,
															"name": "id",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "ID of the removed configuration.\n"
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 6439,
							"name": "onPacketReceived",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Triggered when an IP packet is received via the tunnel for the VPN session\nowned by the extension."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21097,
									"character": 33
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6440,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 21097,
													"character": 55
												}
											],
											"signatures": [
												{
													"id": 6441,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 6442,
															"name": "data",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "The IP packet received from the platform.\n"
															},
															"type": {
																"type": "reference",
																"name": "ArrayBuffer"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 6433,
							"name": "onPlatformMessage",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Triggered when a message is received from the platform for a VPN\nconfiguration owned by the extension."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21080,
									"character": 34
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6434,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 21080,
													"character": 56
												}
											],
											"signatures": [
												{
													"id": 6435,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 6436,
															"name": "id",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "ID of the configuration the message is intended for."
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 6437,
															"name": "message",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "The message received from the platform.  Note that new message types may be added in future Chrome versions to support new features."
															},
															"type": {
																"type": "reference",
																"id": 6430,
																"name": "PlatformMessage"
															}
														},
														{
															"id": 6438,
															"name": "error",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Error message when there is an error.\n"
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 6456,
							"name": "onUIEvent",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Triggered when there is a UI event for the extension. UI events are signals\nfrom the platform that indicate to the app that a UI dialog needs to be shown\nto the user."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21140,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6457,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 21140,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 6458,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 6459,
															"name": "event",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "The UI event that is triggered."
															},
															"type": {
																"type": "reference",
																"id": 6432,
																"name": "UIEvent"
															}
														},
														{
															"id": 6460,
															"name": "id",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "ID of the configuration for which the UI event was triggered.\n"
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 6390,
							"name": "createConfig",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21021,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 6391,
									"name": "createConfig",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a new VPN configuration that persists across multiple login sessions\nof the user."
									},
									"parameters": [
										{
											"id": 6392,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the VPN configuration."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 6393,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Called when the configuration is created or if there is an error."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6394,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 21023,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 6395,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 6396,
																	"name": "id",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "A unique ID for the created configuration, or <code>undefined</code> on failure.\n"
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 6397,
							"name": "destroyConfig",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21034,
									"character": 33
								}
							],
							"signatures": [
								{
									"id": 6398,
									"name": "destroyConfig",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Destroys a VPN configuration created by the extension."
									},
									"parameters": [
										{
											"id": 6399,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "ID of the VPN configuration to destroy."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 6400,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called when the configuration is destroyed or if there is an error.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6401,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 21036,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 6402,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 6415,
							"name": "notifyConnectionStateChanged",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21071,
									"character": 48
								}
							],
							"signatures": [
								{
									"id": 6416,
									"name": "notifyConnectionStateChanged",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Notifies the VPN session state to the platform. This will succeed only when\nthe VPN session is owned by the extension."
									},
									"parameters": [
										{
											"id": 6417,
											"name": "state",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The VPN session state of the VPN client."
											},
											"type": {
												"type": "reference",
												"id": 6431,
												"name": "VpnConnectionState"
											}
										},
										{
											"id": 6418,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called when the notification is complete or if there is an error.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6419,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 21073,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 6420,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 6409,
							"name": "sendPacket",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21059,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 6410,
									"name": "sendPacket",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sends an IP packet through the tunnel created for the VPN session. This will\nsucceed only when the VPN session is owned by the extension."
									},
									"parameters": [
										{
											"id": 6411,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The IP packet to be sent to the platform."
											},
											"type": {
												"type": "reference",
												"name": "ArrayBuffer"
											}
										},
										{
											"id": 6412,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Called when the packet is sent or if there is an error.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6413,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 21061,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 6414,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 6403,
							"name": "setParameters",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21047,
									"character": 33
								}
							],
							"signatures": [
								{
									"id": 6404,
									"name": "setParameters",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the parameters for the VPN session. This should be called immediately\nafter <code>\"connected\"</code> is received from the platform. This will\nsucceed only when the VPN session is owned by the extension."
									},
									"parameters": [
										{
											"id": 6405,
											"name": "parameters",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The parameters for the VPN session."
											},
											"type": {
												"type": "reference",
												"id": 6421,
												"name": "Parameters"
											}
										},
										{
											"id": 6406,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Called when the parameters are set or if there is an error.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6407,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 21049,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 6408,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								6421
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								6430,
								6432,
								6431
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								6447,
								6443,
								6439,
								6433,
								6456
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								6390,
								6397,
								6415,
								6409,
								6403
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 20929,
							"character": 30
						}
					]
				},
				{
					"id": 6461,
					"name": "wallpaper",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.wallpaper</code> API to change the ChromeOS wallpaper.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "wallpaper"
							},
							{
								"tag": "chrome-platform",
								"text": "chromeos"
							},
							{
								"tag": "chrome-permission",
								"text": "wallpaper\n"
							}
						]
					},
					"children": [
						{
							"id": 6475,
							"name": "WallpaperLayout",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The supported wallpaper layouts."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21165,
									"character": 31
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "STRETCH"
									},
									{
										"type": "literal",
										"value": "CENTER"
									},
									{
										"type": "literal",
										"value": "CENTER_CROPPED"
									}
								]
							}
						},
						{
							"id": 6462,
							"name": "setWallpaper",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21175,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 6463,
									"name": "setWallpaper",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets wallpaper to the image at <em>url</em> or <em>wallpaperData</em> with\nthe specified <em>layout</em>"
									},
									"parameters": [
										{
											"id": 6464,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6465,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 6466,
															"name": "data",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The jpeg or png encoded wallpaper image as an ArrayBuffer."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 21180,
																	"character": 12
																}
															],
															"type": {
																"type": "reference",
																"name": "ArrayBuffer"
															}
														},
														{
															"id": 6469,
															"name": "filename",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "The file name of the saved wallpaper."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 21195,
																	"character": 16
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 6468,
															"name": "layout",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "The supported wallpaper layouts."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 21190,
																	"character": 14
																}
															],
															"type": {
																"type": "reference",
																"id": 6475,
																"name": "WallpaperLayout"
															}
														},
														{
															"id": 6470,
															"name": "thumbnail",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "True if a 128x60 thumbnail should be generated. Layout and ratio are not\nsupported yet."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 21201,
																	"character": 17
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 6467,
															"name": "url",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The URL of the wallpaper to be set (can be relative)."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 21185,
																	"character": 11
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																6466,
																6469,
																6468,
																6470,
																6467
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 21176,
															"character": 14
														}
													]
												}
											}
										},
										{
											"id": 6471,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6472,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 21203,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 6473,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 6474,
																	"name": "thumbnail",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"text": "The jpeg encoded wallpaper thumbnail. It is generated by resizing the wallpaper to 128x60.\n"
																	},
																	"type": {
																		"type": "reference",
																		"name": "ArrayBuffer"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								6475
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								6462
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 21161,
							"character": 28
						}
					]
				},
				{
					"id": 6476,
					"name": "webNavigation",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.webNavigation</code> API to receive notifications about\nthe status of navigation requests in-flight.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "webNavigation"
							},
							{
								"tag": "chrome-permission",
								"text": "webNavigation\n"
							}
						]
					},
					"children": [
						{
							"id": 6508,
							"name": "TransitionQualifier",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21228,
									"character": 35
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "client_redirect"
									},
									{
										"type": "literal",
										"value": "server_redirect"
									},
									{
										"type": "literal",
										"value": "forward_back"
									},
									{
										"type": "literal",
										"value": "from_address_bar"
									}
								]
							}
						},
						{
							"id": 6507,
							"name": "TransitionType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "Cause of the navigation. The same transition types as defined in the history\nAPI are used. These are the same transition types as defined in the <a\nhref=\"history#transition_types\">history API</a> except with\n<code>\"start_page\"</code> in place of <code>\"auto_toplevel\"</code> (for\nbackwards compatibility)."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21226,
									"character": 30
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "link"
									},
									{
										"type": "literal",
										"value": "typed"
									},
									{
										"type": "literal",
										"value": "auto_bookmark"
									},
									{
										"type": "literal",
										"value": "auto_subframe"
									},
									{
										"type": "literal",
										"value": "manual_subframe"
									},
									{
										"type": "literal",
										"value": "generated"
									},
									{
										"type": "literal",
										"value": "start_page"
									},
									{
										"type": "literal",
										"value": "form_submit"
									},
									{
										"type": "literal",
										"value": "reload"
									},
									{
										"type": "literal",
										"value": "keyword"
									},
									{
										"type": "literal",
										"value": "keyword_generated"
									}
								]
							}
						},
						{
							"id": 6509,
							"name": "onBeforeNavigate",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a navigation is about to occur."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21331,
									"character": 33
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6510,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 21331,
													"character": 55
												}
											],
											"signatures": [
												{
													"id": 6511,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 6512,
															"name": "details",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 6513,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 6517,
																			"name": "frameId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "0 indicates the navigation happens in the tab content window; a positive\nvalue indicates navigation in a subframe. Frame IDs are unique for a given\ntab and process."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21355,
																					"character": 17
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6518,
																			"name": "parentFrameId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the parent frame, or <code>-1</code> if this is the main frame."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21360,
																					"character": 23
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6516,
																			"name": "processId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The value of -1.",
																				"tags": [
																					{
																						"tag": "deprecated",
																						"text": "The processId is no longer set for this event, since the process which will render the resulting document is not known until onCommit.\n"
																					}
																				]
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21348,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6514,
																			"name": "tabId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the tab in which the navigation is about to occur."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21340,
																					"character": 15
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6519,
																			"name": "timeStamp",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The time when the browser was about to start the navigation, in milliseconds\nsince the epoch."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21366,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6515,
																			"name": "url",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21341,
																					"character": 13
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				6517,
																				6518,
																				6516,
																				6514,
																				6519,
																				6515
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 21336,
																			"character": 16
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 6520,
							"name": "onCommitted",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a navigation is committed. The document (and the resources it\nrefers to, such as images and subframes) might still be downloading, but at\nleast part of the document has been received from the server and the browser\nhas decided to switch to the new document."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21377,
									"character": 28
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6521,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 21377,
													"character": 50
												}
											],
											"signatures": [
												{
													"id": 6522,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 6523,
															"name": "details",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 6524,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 6528,
																			"name": "frameId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "0 indicates the navigation happens in the tab content window; a positive\nvalue indicates navigation in a subframe. Frame IDs are unique within a tab."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21398,
																					"character": 17
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6529,
																			"name": "parentFrameId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the parent frame, or <code>-1</code> if this is the main frame."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21403,
																					"character": 23
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6527,
																			"name": "processId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the process that runs the renderer for this frame."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21392,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6525,
																			"name": "tabId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the tab in which the navigation occurs."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21386,
																					"character": 15
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6532,
																			"name": "timeStamp",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The time when the navigation was committed, in milliseconds since the epoch."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21418,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6531,
																			"name": "transitionQualifiers",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "A list of transition qualifiers."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21413,
																					"character": 30
																				}
																			],
																			"type": {
																				"type": "array",
																				"elementType": {
																					"type": "reference",
																					"id": 6508,
																					"name": "TransitionQualifier"
																				}
																			}
																		},
																		{
																			"id": 6530,
																			"name": "transitionType",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "Cause of the navigation."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21408,
																					"character": 24
																				}
																			],
																			"type": {
																				"type": "reference",
																				"id": 6507,
																				"name": "TransitionType"
																			}
																		},
																		{
																			"id": 6526,
																			"name": "url",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21387,
																					"character": 13
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				6528,
																				6529,
																				6527,
																				6525,
																				6532,
																				6531,
																				6530,
																				6526
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 21382,
																			"character": 16
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 6544,
							"name": "onCompleted",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a document, including the resources it refers to, is completely\nloaded and initialized."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21468,
									"character": 28
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6545,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 21468,
													"character": 50
												}
											],
											"signatures": [
												{
													"id": 6546,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 6547,
															"name": "details",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 6548,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 6552,
																			"name": "frameId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "0 indicates the navigation happens in the tab content window; a positive\nvalue indicates navigation in a subframe. Frame IDs are unique within a tab."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21489,
																					"character": 17
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6553,
																			"name": "parentFrameId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the parent frame, or <code>-1</code> if this is the main frame."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21494,
																					"character": 23
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6551,
																			"name": "processId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the process that runs the renderer for this frame."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21483,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6549,
																			"name": "tabId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the tab in which the navigation occurs."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21477,
																					"character": 15
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6554,
																			"name": "timeStamp",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The time when the document finished loading, in milliseconds since the epoch."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21499,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6550,
																			"name": "url",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21478,
																					"character": 13
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				6552,
																				6553,
																				6551,
																				6549,
																				6554,
																				6550
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 21473,
																			"character": 16
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 6567,
							"name": "onCreatedNavigationTarget",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a new window, or a new tab in an existing window, is created to\nhost a navigation."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21555,
									"character": 42
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6568,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 21555,
													"character": 64
												}
											],
											"signatures": [
												{
													"id": 6569,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 6570,
															"name": "details",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 6571,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 6574,
																			"name": "sourceFrameId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the frame with sourceTabId in which the navigation is triggered. 0\nindicates the main frame."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21575,
																					"character": 23
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6573,
																			"name": "sourceProcessId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the process that runs the renderer for the source frame."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21569,
																					"character": 25
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6572,
																			"name": "sourceTabId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the tab in which the navigation is triggered."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21564,
																					"character": 21
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6576,
																			"name": "tabId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the tab in which the url is opened"
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21585,
																					"character": 15
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6577,
																			"name": "timeStamp",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The time when the browser was about to create a new view, in milliseconds\nsince the epoch."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21591,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6575,
																			"name": "url",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The URL to be opened in the new window."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21580,
																					"character": 13
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				6574,
																				6573,
																				6572,
																				6576,
																				6577,
																				6575
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 21560,
																			"character": 16
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 6533,
							"name": "onDOMContentLoaded",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when the page's DOM is fully constructed, but the referenced resources\nmay not finish loading."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21427,
									"character": 35
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6534,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 21427,
													"character": 57
												}
											],
											"signatures": [
												{
													"id": 6535,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 6536,
															"name": "details",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 6537,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 6541,
																			"name": "frameId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "0 indicates the navigation happens in the tab content window; a positive\nvalue indicates navigation in a subframe. Frame IDs are unique within a tab."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21448,
																					"character": 17
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6542,
																			"name": "parentFrameId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the parent frame, or <code>-1</code> if this is the main frame."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21453,
																					"character": 23
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6540,
																			"name": "processId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the process that runs the renderer for this frame."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21442,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6538,
																			"name": "tabId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the tab in which the navigation occurs."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21436,
																					"character": 15
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6543,
																			"name": "timeStamp",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The time when the page's DOM was fully constructed, in milliseconds since the\nepoch."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21459,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6539,
																			"name": "url",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21437,
																					"character": 13
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				6541,
																				6542,
																				6540,
																				6538,
																				6543,
																				6539
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 21432,
																			"character": 16
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 6555,
							"name": "onErrorOccurred",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when an error occurs and the navigation is aborted. This can happen if\neither a network error occurred, or the user aborted the navigation."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21508,
									"character": 32
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6556,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 21508,
													"character": 54
												}
											],
											"signatures": [
												{
													"id": 6557,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 6558,
															"name": "details",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 6559,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 6565,
																			"name": "error",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The error description."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21541,
																					"character": 15
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6563,
																			"name": "frameId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "0 indicates the navigation happens in the tab content window; a positive\nvalue indicates navigation in a subframe. Frame IDs are unique within a tab."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21531,
																					"character": 17
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6564,
																			"name": "parentFrameId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the parent frame, or <code>-1</code> if this is the main frame."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21536,
																					"character": 23
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6562,
																			"name": "processId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The value of -1.",
																				"tags": [
																					{
																						"tag": "deprecated",
																						"text": "The processId is no longer set for this event.\n"
																					}
																				]
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21525,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6560,
																			"name": "tabId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the tab in which the navigation occurs."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21517,
																					"character": 15
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6566,
																			"name": "timeStamp",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The time when the error occurred, in milliseconds since the epoch."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21546,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6561,
																			"name": "url",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21518,
																					"character": 13
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				6565,
																				6563,
																				6564,
																				6562,
																				6560,
																				6566,
																				6561
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 21513,
																			"character": 16
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 6599,
							"name": "onHistoryStateUpdated",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when the frame's history was updated to a new URL. All future events\nfor that frame will use the updated URL."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21678,
									"character": 38
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6600,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 21678,
													"character": 60
												}
											],
											"signatures": [
												{
													"id": 6601,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 6602,
															"name": "details",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 6603,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 6607,
																			"name": "frameId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "0 indicates the navigation happens in the tab content window; a positive\nvalue indicates navigation in a subframe. Frame IDs are unique within a tab."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21699,
																					"character": 17
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6608,
																			"name": "parentFrameId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the parent frame, or <code>-1</code> if this is the main frame."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21704,
																					"character": 23
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6606,
																			"name": "processId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the process that runs the renderer for this frame."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21693,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6604,
																			"name": "tabId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the tab in which the navigation occurs."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21687,
																					"character": 15
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6611,
																			"name": "timeStamp",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The time when the navigation was committed, in milliseconds since the epoch."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21719,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6610,
																			"name": "transitionQualifiers",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "A list of transition qualifiers."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21714,
																					"character": 30
																				}
																			],
																			"type": {
																				"type": "array",
																				"elementType": {
																					"type": "reference",
																					"id": 6508,
																					"name": "TransitionQualifier"
																				}
																			}
																		},
																		{
																			"id": 6609,
																			"name": "transitionType",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "Cause of the navigation."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21709,
																					"character": 24
																				}
																			],
																			"type": {
																				"type": "reference",
																				"id": 6507,
																				"name": "TransitionType"
																			}
																		},
																		{
																			"id": 6605,
																			"name": "url",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21688,
																					"character": 13
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				6607,
																				6608,
																				6606,
																				6604,
																				6611,
																				6610,
																				6609,
																				6605
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 21683,
																			"character": 16
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 6578,
							"name": "onReferenceFragmentUpdated",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when the reference fragment of a frame was updated. All future events\nfor that frame will use the updated URL."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21600,
									"character": 43
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6579,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 21600,
													"character": 65
												}
											],
											"signatures": [
												{
													"id": 6580,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 6581,
															"name": "details",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 6582,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 6586,
																			"name": "frameId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "0 indicates the navigation happens in the tab content window; a positive\nvalue indicates navigation in a subframe. Frame IDs are unique within a tab."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21621,
																					"character": 17
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6587,
																			"name": "parentFrameId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the parent frame, or <code>-1</code> if this is the main frame."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21626,
																					"character": 23
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6585,
																			"name": "processId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the process that runs the renderer for this frame."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21615,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6583,
																			"name": "tabId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the tab in which the navigation occurs."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21609,
																					"character": 15
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6590,
																			"name": "timeStamp",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The time when the navigation was committed, in milliseconds since the epoch."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21641,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6589,
																			"name": "transitionQualifiers",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "A list of transition qualifiers."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21636,
																					"character": 30
																				}
																			],
																			"type": {
																				"type": "array",
																				"elementType": {
																					"type": "reference",
																					"id": 6508,
																					"name": "TransitionQualifier"
																				}
																			}
																		},
																		{
																			"id": 6588,
																			"name": "transitionType",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "Cause of the navigation."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21631,
																					"character": 24
																				}
																			],
																			"type": {
																				"type": "reference",
																				"id": 6507,
																				"name": "TransitionType"
																			}
																		},
																		{
																			"id": 6584,
																			"name": "url",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21610,
																					"character": 13
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				6586,
																				6587,
																				6585,
																				6583,
																				6590,
																				6589,
																				6588,
																				6584
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 21605,
																			"character": 16
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 6591,
							"name": "onTabReplaced",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when the contents of the tab is replaced by a different (usually\npreviously pre-rendered) tab."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21650,
									"character": 30
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6592,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 21650,
													"character": 52
												}
											],
											"signatures": [
												{
													"id": 6593,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 6594,
															"name": "details",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 6595,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 6596,
																			"name": "replacedTabId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the tab that was replaced."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21659,
																					"character": 23
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6597,
																			"name": "tabId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the tab that replaced the old tab."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21664,
																					"character": 15
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6598,
																			"name": "timeStamp",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The time when the replacement happened, in milliseconds since the epoch."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21669,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				6596,
																				6597,
																				6598
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 21655,
																			"character": 16
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 6492,
							"name": "getAllFrames",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21289,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 6493,
									"name": "getAllFrames",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieves information about all frames of a given tab."
									},
									"parameters": [
										{
											"id": 6494,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Information about the tab to retrieve all frames from."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6495,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 6496,
															"name": "tabId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "The ID of the tab."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 21294,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																6496
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 21290,
															"character": 14
														}
													]
												}
											}
										},
										{
											"id": 6497,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6498,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 21296,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 6499,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 6500,
																	"name": "details",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"text": "A list of frames in the given tab, null if the specified tab ID is invalid.\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reflection",
																			"declaration": {
																				"id": 6501,
																				"name": "__type",
																				"kind": 65536,
																				"kindString": "Type literal",
																				"flags": {},
																				"children": [
																					{
																						"id": 6502,
																						"name": "errorOccurred",
																						"kind": 1024,
																						"kindString": "Property",
																						"flags": {},
																						"comment": {
																							"shortText": "True if the last navigation in this frame was interrupted by an error, i.e.\nthe onErrorOccurred event fired."
																						},
																						"sources": [
																							{
																								"fileName": "npm/index.d.ts",
																								"line": 21302,
																								"character": 23
																							}
																						],
																						"type": {
																							"type": "intrinsic",
																							"name": "boolean"
																						}
																					},
																					{
																						"id": 6504,
																						"name": "frameId",
																						"kind": 1024,
																						"kindString": "Property",
																						"flags": {},
																						"comment": {
																							"shortText": "The ID of the frame. 0 indicates that this is the main frame; a positive\nvalue indicates the ID of a subframe."
																						},
																						"sources": [
																							{
																								"fileName": "npm/index.d.ts",
																								"line": 21313,
																								"character": 17
																							}
																						],
																						"type": {
																							"type": "intrinsic",
																							"name": "number"
																						}
																					},
																					{
																						"id": 6505,
																						"name": "parentFrameId",
																						"kind": 1024,
																						"kindString": "Property",
																						"flags": {},
																						"comment": {
																							"shortText": "The ID of the parent frame, or <code>-1</code> if this is the main frame."
																						},
																						"sources": [
																							{
																								"fileName": "npm/index.d.ts",
																								"line": 21318,
																								"character": 23
																							}
																						],
																						"type": {
																							"type": "intrinsic",
																							"name": "number"
																						}
																					},
																					{
																						"id": 6503,
																						"name": "processId",
																						"kind": 1024,
																						"kindString": "Property",
																						"flags": {},
																						"comment": {
																							"shortText": "The ID of the process that runs the renderer for this frame."
																						},
																						"sources": [
																							{
																								"fileName": "npm/index.d.ts",
																								"line": 21307,
																								"character": 19
																							}
																						],
																						"type": {
																							"type": "intrinsic",
																							"name": "number"
																						}
																					},
																					{
																						"id": 6506,
																						"name": "url",
																						"kind": 1024,
																						"kindString": "Property",
																						"flags": {},
																						"comment": {
																							"shortText": "The URL currently associated with this frame."
																						},
																						"sources": [
																							{
																								"fileName": "npm/index.d.ts",
																								"line": 21323,
																								"character": 13
																							}
																						],
																						"type": {
																							"type": "intrinsic",
																							"name": "string"
																						}
																					}
																				],
																				"groups": [
																					{
																						"title": "Properties",
																						"kind": 1024,
																						"children": [
																							6502,
																							6504,
																							6505,
																							6503,
																							6506
																						]
																					}
																				],
																				"sources": [
																					{
																						"fileName": "npm/index.d.ts",
																						"line": 21297,
																						"character": 17
																					}
																				]
																			}
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 6477,
							"name": "getFrame",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21239,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 6478,
									"name": "getFrame",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieves information about the given frame. A frame refers to an\n&lt;iframe&gt; or a &lt;frame&gt; of a web page and is identified by a tab ID\nand a frame ID."
									},
									"parameters": [
										{
											"id": 6479,
											"name": "details",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Information about the frame to retrieve information about."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6480,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 6483,
															"name": "frameId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "The ID of the frame in the given tab."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 21256,
																	"character": 15
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 6482,
															"name": "processId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The ID of the process that runs the renderer for this tab.",
																"tags": [
																	{
																		"tag": "deprecated",
																		"text": "Frames are now uniquely identified by their tab ID and frame ID; the process ID is no longer needed and therefore ignored.\n"
																	}
																]
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 21251,
																	"character": 17
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 6481,
															"name": "tabId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "The ID of the tab in which the frame is."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 21244,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																6483,
																6482,
																6481
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 21240,
															"character": 14
														}
													]
												}
											}
										},
										{
											"id": 6484,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6485,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 21258,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 6486,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 6487,
																	"name": "details",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"text": "Information about the requested frame, null if the specified frame ID and/or tab ID are invalid.\n"
																	},
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 6488,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 6489,
																					"name": "errorOccurred",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"comment": {
																						"shortText": "True if the last navigation in this frame was interrupted by an error, i.e.\nthe onErrorOccurred event fired."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 21264,
																							"character": 23
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "boolean"
																					}
																				},
																				{
																					"id": 6491,
																					"name": "parentFrameId",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"comment": {
																						"shortText": "The ID of the parent frame, or <code>-1</code> if this is the main frame."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 21277,
																							"character": 23
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "number"
																					}
																				},
																				{
																					"id": 6490,
																					"name": "url",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"comment": {
																						"shortText": "The URL currently associated with this frame, if the frame identified by the\nframeId existed at one point in the given tab. The fact that an URL is\nassociated with a given frameId does not imply that the corresponding frame\nstill exists."
																					},
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 21272,
																							"character": 13
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "string"
																					}
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						6489,
																						6491,
																						6490
																					]
																				}
																			],
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21259,
																					"character": 17
																				}
																			]
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								6508,
								6507
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								6509,
								6520,
								6544,
								6567,
								6533,
								6555,
								6599,
								6578,
								6591
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								6492,
								6477
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 21218,
							"character": 32
						}
					]
				},
				{
					"id": 6612,
					"name": "webRequest",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.webRequest</code> API to observe and analyze traffic and\nto intercept, block, or modify requests in-flight.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "webRequest"
							},
							{
								"tag": "chrome-permission",
								"text": "webRequest\n"
							}
						]
					},
					"children": [
						{
							"id": 6638,
							"name": "BlockingResponse",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Returns value for event handlers that have the 'blocking' extraInfoSpec\napplied. Allows the event handler to modify network requests."
							},
							"children": [
								{
									"id": 6643,
									"name": "authCredentials",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Only used as a response to the onAuthRequired event. If set, the request is\nmade using the supplied credentials."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 21842,
											"character": 21
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 6644,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 6646,
													"name": "password",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 21844,
															"character": 16
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 6645,
													"name": "username",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 21843,
															"character": 16
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														6646,
														6645
													]
												}
											]
										}
									}
								},
								{
									"id": 6639,
									"name": "cancel",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "If true, the request is cancelled. This prevents the request from being sent.\nThis can be used as a response to the onBeforeRequest, onBeforeSendHeaders,\nonHeadersReceived and onAuthRequired events."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 21809,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 6640,
									"name": "redirectUrl",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Only used as a response to the onBeforeRequest and onHeadersReceived events.\nIf set, the original request is prevented from being sent/completed and is\ninstead redirected to the given URL. Redirections to non-HTTP schemes such as\n<code>data:</code> are allowed. Redirects initiated by a redirect action use\nthe original request method for the redirect, with one exception: If the\nredirect is initiated at the onHeadersReceived stage, then the redirect will\nbe issued using the GET method. Redirects from URLs with <code>ws://</code>\nand <code>wss://</code> schemes are <b>ignored</b>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 21821,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 6641,
									"name": "requestHeaders",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Only used as a response to the onBeforeSendHeaders event. If set, the request\nis made with these request headers instead."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 21827,
											"character": 20
										}
									],
									"type": {
										"type": "reference",
										"id": 6633,
										"name": "HttpHeaders"
									}
								},
								{
									"id": 6642,
									"name": "responseHeaders",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Only used as a response to the onHeadersReceived event. If set, the server is\nassumed to have responded with these response headers instead. Only return\n<code>responseHeaders</code> if you really want to modify the headers in\norder to limit the number of conflicts (only one extension may modify\n<code>responseHeaders</code> for each request)."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 21836,
											"character": 21
										}
									],
									"type": {
										"type": "reference",
										"id": 6633,
										"name": "HttpHeaders"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										6643,
										6639,
										6640,
										6641,
										6642
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21803,
									"character": 37
								}
							]
						},
						{
							"id": 6628,
							"name": "RequestFilter",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "An object describing filters to apply to webRequest events."
							},
							"children": [
								{
									"id": 6631,
									"name": "tabId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 21771,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6630,
									"name": "types",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "A list of request types. Requests that cannot match any of the types will be\nfiltered out."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 21769,
											"character": 11
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1762,
											"name": "ResourceType"
										}
									}
								},
								{
									"id": 6629,
									"name": "urls",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "A list of URLs or URL patterns. Requests that cannot match any of the URLs\nwill be filtered out."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 21763,
											"character": 10
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 6632,
									"name": "windowId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 21773,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										6631,
										6630,
										6629,
										6632
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21758,
									"character": 34
								}
							]
						},
						{
							"id": 6647,
							"name": "UploadData",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Contains data uploaded in a URL request."
							},
							"children": [
								{
									"id": 6648,
									"name": "bytes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "An ArrayBuffer with a copy of the data."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 21855,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 6649,
									"name": "file",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "A string with the file's path and name."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 21860,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										6648,
										6649
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21851,
									"character": 31
								}
							]
						},
						{
							"id": 6650,
							"name": "FormDataItem",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "Contains data passed within form data. For urlencoded form it is stored as\nstring if data is utf-8 string and as ArrayBuffer otherwise. For form-data it\nis ArrayBuffer. If form-data represents uploading file, it is string with\nfilename, if the filename is provided."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21869,
									"character": 28
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "ArrayBuffer"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 6633,
							"name": "HttpHeaders",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "An array of HTTP headers. Each header is represented as a dictionary\ncontaining the keys <code>name</code> and either <code>value</code> or\n<code>binaryValue</code>."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21781,
									"character": 27
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reflection",
									"declaration": {
										"id": 6634,
										"name": "__type",
										"kind": 65536,
										"kindString": "Type literal",
										"flags": {},
										"children": [
											{
												"id": 6637,
												"name": "binaryValue",
												"kind": 1024,
												"kindString": "Property",
												"flags": {
													"isOptional": true
												},
												"comment": {
													"shortText": "Value of the HTTP header if it cannot be represented by UTF-8, stored as\nindividual byte values (0..255)."
												},
												"sources": [
													{
														"fileName": "npm/index.d.ts",
														"line": 21796,
														"character": 17
													}
												],
												"type": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											},
											{
												"id": 6635,
												"name": "name",
												"kind": 1024,
												"kindString": "Property",
												"flags": {},
												"comment": {
													"shortText": "Name of the HTTP header."
												},
												"sources": [
													{
														"fileName": "npm/index.d.ts",
														"line": 21785,
														"character": 10
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"id": 6636,
												"name": "value",
												"kind": 1024,
												"kindString": "Property",
												"flags": {
													"isOptional": true
												},
												"comment": {
													"shortText": "Value of the HTTP header if it can be represented by UTF-8."
												},
												"sources": [
													{
														"fileName": "npm/index.d.ts",
														"line": 21790,
														"character": 11
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"groups": [
											{
												"title": "Properties",
												"kind": 1024,
												"children": [
													6637,
													6635,
													6636
												]
											}
										],
										"sources": [
											{
												"fileName": "npm/index.d.ts",
												"line": 21781,
												"character": 29
											}
										]
									}
								}
							}
						},
						{
							"id": 6651,
							"name": "IgnoredActionType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21871,
									"character": 33
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "redirect"
									},
									{
										"type": "literal",
										"value": "request_headers"
									},
									{
										"type": "literal",
										"value": "response_headers"
									},
									{
										"type": "literal",
										"value": "auth_credentials"
									}
								]
							}
						},
						{
							"id": 6623,
							"name": "OnAuthRequiredOptions",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21745,
									"character": 37
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "responseHeaders"
									},
									{
										"type": "literal",
										"value": "blocking"
									},
									{
										"type": "literal",
										"value": "asyncBlocking"
									},
									{
										"type": "literal",
										"value": "extraHeaders"
									}
								]
							}
						},
						{
							"id": 6625,
							"name": "OnBeforeRedirectOptions",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21749,
									"character": 39
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "responseHeaders"
									},
									{
										"type": "literal",
										"value": "extraHeaders"
									}
								]
							}
						},
						{
							"id": 6619,
							"name": "OnBeforeRequestOptions",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21737,
									"character": 38
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "blocking"
									},
									{
										"type": "literal",
										"value": "requestBody"
									},
									{
										"type": "literal",
										"value": "extraHeaders"
									}
								]
							}
						},
						{
							"id": 6620,
							"name": "OnBeforeSendHeadersOptions",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21739,
									"character": 42
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "requestHeaders"
									},
									{
										"type": "literal",
										"value": "blocking"
									},
									{
										"type": "literal",
										"value": "extraHeaders"
									}
								]
							}
						},
						{
							"id": 6626,
							"name": "OnCompletedOptions",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21751,
									"character": 34
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "responseHeaders"
									},
									{
										"type": "literal",
										"value": "extraHeaders"
									}
								]
							}
						},
						{
							"id": 6627,
							"name": "OnErrorOccurredOptions",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21753,
									"character": 38
								}
							],
							"type": {
								"type": "literal",
								"value": "extraHeaders"
							}
						},
						{
							"id": 6622,
							"name": "OnHeadersReceivedOptions",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21743,
									"character": 40
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "blocking"
									},
									{
										"type": "literal",
										"value": "responseHeaders"
									},
									{
										"type": "literal",
										"value": "extraHeaders"
									}
								]
							}
						},
						{
							"id": 6624,
							"name": "OnResponseStartedOptions",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21747,
									"character": 40
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "responseHeaders"
									},
									{
										"type": "literal",
										"value": "extraHeaders"
									}
								]
							}
						},
						{
							"id": 6621,
							"name": "OnSendHeadersOptions",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21741,
									"character": 36
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "requestHeaders"
									},
									{
										"type": "literal",
										"value": "extraHeaders"
									}
								]
							}
						},
						{
							"id": 6618,
							"name": "ResourceType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21735,
									"character": 28
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "main_frame"
									},
									{
										"type": "literal",
										"value": "sub_frame"
									},
									{
										"type": "literal",
										"value": "stylesheet"
									},
									{
										"type": "literal",
										"value": "script"
									},
									{
										"type": "literal",
										"value": "image"
									},
									{
										"type": "literal",
										"value": "font"
									},
									{
										"type": "literal",
										"value": "object"
									},
									{
										"type": "literal",
										"value": "xmlhttprequest"
									},
									{
										"type": "literal",
										"value": "ping"
									},
									{
										"type": "literal",
										"value": "csp_report"
									},
									{
										"type": "literal",
										"value": "media"
									},
									{
										"type": "literal",
										"value": "websocket"
									},
									{
										"type": "literal",
										"value": "other"
									}
								]
							}
						},
						{
							"id": 6652,
							"name": "MAX_HANDLER_BEHAVIOR_CHANGED_CALLS_PER_10_MINUTES",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "The maximum number of times that <code>handlerBehaviorChanged</code> can be\ncalled per 10 minute sustained interval. <code>handlerBehaviorChanged</code>\nis an expensive function call that shouldn't be called often."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21878,
									"character": 66
								}
							],
							"type": {
								"type": "literal",
								"value": 20
							}
						},
						{
							"id": 6825,
							"name": "onActionIgnored",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when an extension's proposed modification to a network request is\nignored. This happens in case of conflicts with other extensions."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 22672,
									"character": 32
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6826,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 22672,
													"character": 54
												}
											],
											"signatures": [
												{
													"id": 6827,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 6828,
															"name": "details",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 6829,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 6831,
																			"name": "action",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The proposed action which was ignored."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22687,
																					"character": 16
																				}
																			],
																			"type": {
																				"type": "reference",
																				"id": 6651,
																				"name": "IgnoredActionType"
																			}
																		},
																		{
																			"id": 6830,
																			"name": "requestId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the request. Request IDs are unique within a browser session. As a\nresult, they could be used to relate different events of the same request."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22682,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				6831,
																				6830
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 22677,
																			"character": 16
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 6722,
							"name": "onAuthRequired",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when an authentication failure is received. The listener has three\noptions: it can provide authentication credentials, it can cancel the request\nand display the error page, or it can take no action on the challenge. If bad\nuser credentials are provided, this may be called multiple times for the same\nrequest. Note, only one of <code>'blocking'</code> or\n<code>'asyncBlocking'</code> modes must be specified in the\n<code>extraInfoSpec</code> parameter."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 22209,
									"character": 31
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6723,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {
												"returns": "If \"blocking\" is specified in the \"extraInfoSpec\" parameter, the event listener should return an object of this type.\n"
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 22209,
													"character": 53
												}
											],
											"signatures": [
												{
													"id": 6724,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"returns": "If \"blocking\" is specified in the \"extraInfoSpec\" parameter, the event listener should return an object of this type.\n"
													},
													"parameters": [
														{
															"id": 6725,
															"name": "details",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 6726,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 6738,
																			"name": "challenger",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The server requesting authentication."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22279,
																					"character": 20
																				}
																			],
																			"type": {
																				"type": "reflection",
																				"declaration": {
																					"id": 6739,
																					"name": "__type",
																					"kind": 65536,
																					"kindString": "Type literal",
																					"flags": {},
																					"children": [
																						{
																							"id": 6740,
																							"name": "host",
																							"kind": 1024,
																							"kindString": "Property",
																							"flags": {},
																							"sources": [
																								{
																									"fileName": "npm/index.d.ts",
																									"line": 22280,
																									"character": 16
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						},
																						{
																							"id": 6741,
																							"name": "port",
																							"kind": 1024,
																							"kindString": "Property",
																							"flags": {},
																							"sources": [
																								{
																									"fileName": "npm/index.d.ts",
																									"line": 22281,
																									"character": 16
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "number"
																							}
																						}
																					],
																					"groups": [
																						{
																							"title": "Properties",
																							"kind": 1024,
																							"children": [
																								6740,
																								6741
																							]
																						}
																					],
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 22279,
																							"character": 21
																						}
																					]
																				}
																			}
																		},
																		{
																			"id": 6730,
																			"name": "frameId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The value 0 indicates that the request happens in the main frame; a positive\nvalue indicates the ID of a subframe in which the request happens. If the\ndocument of a (sub-)frame is loaded (<code>type</code> is\n<code>main_frame</code> or <code>sub_frame</code>), <code>frameId</code>\nindicates the ID of this frame, not the ID of the outer frame. Frame IDs are\nunique within a tab."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22236,
																					"character": 17
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6734,
																			"name": "initiator",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The origin where the request was initiated. This does not change through\nredirects. If this is an opaque origin, the string 'null' will be used."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22259,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6742,
																			"name": "isProxy",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "True for Proxy-Authenticate, false for WWW-Authenticate."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22287,
																					"character": 17
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "boolean"
																			}
																		},
																		{
																			"id": 6729,
																			"name": "method",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "Standard HTTP method."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22226,
																					"character": 16
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6731,
																			"name": "parentFrameId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "ID of frame that wraps the frame which sent the request. Set to -1 if no\nparent frame exists."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22242,
																					"character": 23
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6737,
																			"name": "realm",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The authentication realm provided by the server, if there is one."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22274,
																					"character": 15
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6727,
																			"name": "requestId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the request. Request IDs are unique within a browser session. As a\nresult, they could be used to relate different events of the same request."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22220,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6743,
																			"name": "responseHeaders",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The HTTP response headers that were received along with this response."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22292,
																					"character": 25
																				}
																			],
																			"type": {
																				"type": "reference",
																				"id": 6633,
																				"name": "HttpHeaders"
																			}
																		},
																		{
																			"id": 6736,
																			"name": "scheme",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The authentication scheme, e.g. Basic or Digest."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22269,
																					"character": 16
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6745,
																			"name": "statusCode",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "Standard HTTP status code returned by the server."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22304,
																					"character": 20
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6744,
																			"name": "statusLine",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "HTTP status line of the response or the 'HTTP/0.9 200 OK' string for HTTP/0.9\nresponses (i.e., responses that lack a status line) or an empty string if\nthere are no headers."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22299,
																					"character": 20
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6732,
																			"name": "tabId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the tab in which the request takes place. Set to -1 if the request\nisn't related to a tab."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22248,
																					"character": 15
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6735,
																			"name": "timeStamp",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The time when this signal is triggered, in milliseconds since the epoch."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22264,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6733,
																			"name": "type",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "How the requested resource will be used."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22253,
																					"character": 14
																				}
																			],
																			"type": {
																				"type": "reference",
																				"id": 6618,
																				"name": "ResourceType"
																			}
																		},
																		{
																			"id": 6728,
																			"name": "url",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22221,
																					"character": 13
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				6738,
																				6730,
																				6734,
																				6742,
																				6729,
																				6731,
																				6737,
																				6727,
																				6743,
																				6736,
																				6745,
																				6744,
																				6732,
																				6735,
																				6733,
																				6728
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 22215,
																			"character": 16
																		}
																	]
																}
															}
														},
														{
															"id": 6746,
															"name": "asyncCallback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 6747,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 22306,
																			"character": 23
																		}
																	],
																	"signatures": [
																		{
																			"id": 6748,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 6749,
																					"name": "response",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"id": 6638,
																						"name": "BlockingResponse"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 6638,
														"name": "BlockingResponse"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 6769,
							"name": "onBeforeRedirect",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a server-initiated redirect is about to occur."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 22406,
									"character": 33
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6770,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 22406,
													"character": 55
												}
											],
											"signatures": [
												{
													"id": 6771,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 6772,
															"name": "details",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 6773,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 6777,
																			"name": "frameId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The value 0 indicates that the request happens in the main frame; a positive\nvalue indicates the ID of a subframe in which the request happens. If the\ndocument of a (sub-)frame is loaded (<code>type</code> is\n<code>main_frame</code> or <code>sub_frame</code>), <code>frameId</code>\nindicates the ID of this frame, not the ID of the outer frame. Frame IDs are\nunique within a tab."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22432,
																					"character": 17
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6784,
																			"name": "fromCache",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "Indicates if this response was fetched from disk cache."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22471,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "boolean"
																			}
																		},
																		{
																			"id": 6781,
																			"name": "initiator",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The origin where the request was initiated. This does not change through\nredirects. If this is an opaque origin, the string 'null' will be used."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22455,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6783,
																			"name": "ip",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The server IP address that the request was actually sent to. Note that it may\nbe a literal IPv6 address."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22466,
																					"character": 12
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6776,
																			"name": "method",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "Standard HTTP method."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22422,
																					"character": 16
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6778,
																			"name": "parentFrameId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "ID of frame that wraps the frame which sent the request. Set to -1 if no\nparent frame exists."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22438,
																					"character": 23
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6786,
																			"name": "redirectUrl",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The new URL."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22481,
																					"character": 21
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6774,
																			"name": "requestId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the request. Request IDs are unique within a browser session. As a\nresult, they could be used to relate different events of the same request."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22416,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6787,
																			"name": "responseHeaders",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The HTTP response headers that were received along with this redirect."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22486,
																					"character": 25
																				}
																			],
																			"type": {
																				"type": "reference",
																				"id": 6633,
																				"name": "HttpHeaders"
																			}
																		},
																		{
																			"id": 6785,
																			"name": "statusCode",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "Standard HTTP status code returned by the server."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22476,
																					"character": 20
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6788,
																			"name": "statusLine",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "HTTP status line of the response or the 'HTTP/0.9 200 OK' string for HTTP/0.9\nresponses (i.e., responses that lack a status line) or an empty string if\nthere are no headers."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22493,
																					"character": 20
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6779,
																			"name": "tabId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the tab in which the request takes place. Set to -1 if the request\nisn't related to a tab."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22444,
																					"character": 15
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6782,
																			"name": "timeStamp",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The time when this signal is triggered, in milliseconds since the epoch."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22460,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6780,
																			"name": "type",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "How the requested resource will be used."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22449,
																					"character": 14
																				}
																			],
																			"type": {
																				"type": "reference",
																				"id": 6618,
																				"name": "ResourceType"
																			}
																		},
																		{
																			"id": 6775,
																			"name": "url",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22417,
																					"character": 13
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				6777,
																				6784,
																				6781,
																				6783,
																				6776,
																				6778,
																				6786,
																				6774,
																				6787,
																				6785,
																				6788,
																				6779,
																				6782,
																				6780,
																				6775
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 22411,
																			"character": 16
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 6653,
							"name": "onBeforeRequest",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a request is about to occur."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21894,
									"character": 32
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6654,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {
												"returns": "If \"blocking\" is specified in the \"extraInfoSpec\" parameter, the event listener should return an object of this type.\n"
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 21894,
													"character": 54
												}
											],
											"signatures": [
												{
													"id": 6655,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"returns": "If \"blocking\" is specified in the \"extraInfoSpec\" parameter, the event listener should return an object of this type.\n"
													},
													"parameters": [
														{
															"id": 6656,
															"name": "details",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 6657,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 6661,
																			"name": "frameId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The value 0 indicates that the request happens in the main frame; a positive\nvalue indicates the ID of a subframe in which the request happens. If the\ndocument of a (sub-)frame is loaded (<code>type</code> is\n<code>main_frame</code> or <code>sub_frame</code>), <code>frameId</code>\nindicates the ID of this frame, not the ID of the outer frame. Frame IDs are\nunique within a tab."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21921,
																					"character": 17
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6673,
																			"name": "initiator",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The origin where the request was initiated. This does not change through\nredirects. If this is an opaque origin, the string 'null' will be used."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21972,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6660,
																			"name": "method",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "Standard HTTP method."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21911,
																					"character": 16
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6662,
																			"name": "parentFrameId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "ID of frame that wraps the frame which sent the request. Set to -1 if no\nparent frame exists."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21927,
																					"character": 23
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6663,
																			"name": "requestBody",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "Contains the HTTP request body data. Only provided if extraInfoSpec contains\n'requestBody'."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21933,
																					"character": 21
																				}
																			],
																			"type": {
																				"type": "reflection",
																				"declaration": {
																					"id": 6664,
																					"name": "__type",
																					"kind": 65536,
																					"kindString": "Type literal",
																					"flags": {},
																					"children": [
																						{
																							"id": 6665,
																							"name": "error",
																							"kind": 1024,
																							"kindString": "Property",
																							"flags": {
																								"isOptional": true
																							},
																							"comment": {
																								"shortText": "Errors when obtaining request body data."
																							},
																							"sources": [
																								{
																									"fileName": "npm/index.d.ts",
																									"line": 21937,
																									"character": 17
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						},
																						{
																							"id": 6666,
																							"name": "formData",
																							"kind": 1024,
																							"kindString": "Property",
																							"flags": {
																								"isOptional": true
																							},
																							"comment": {
																								"shortText": "If the request method is POST and the body is a sequence of key-value pairs\nencoded in UTF8, encoded as either multipart/form-data, or\napplication/x-www-form-urlencoded, this dictionary is present and for each\nkey contains the list of all values for that key. If the data is of another\nmedia type, or if it is malformed, the dictionary is not present. An example\nvalue of this dictionary is {'key': ['value1', 'value2']}."
																							},
																							"sources": [
																								{
																									"fileName": "npm/index.d.ts",
																									"line": 21947,
																									"character": 20
																								}
																							],
																							"type": {
																								"type": "reflection",
																								"declaration": {
																									"id": 6667,
																									"name": "__type",
																									"kind": 65536,
																									"kindString": "Type literal",
																									"flags": {},
																									"sources": [
																										{
																											"fileName": "npm/index.d.ts",
																											"line": 21947,
																											"character": 22
																										}
																									],
																									"indexSignature": {
																										"id": 6668,
																										"name": "__index",
																										"kind": 8192,
																										"kindString": "Index signature",
																										"flags": {},
																										"parameters": [
																											{
																												"id": 6669,
																												"name": "name",
																												"kind": 32768,
																												"flags": {},
																												"type": {
																													"type": "intrinsic",
																													"name": "string"
																												}
																											}
																										],
																										"type": {
																											"type": "array",
																											"elementType": {
																												"type": "reference",
																												"id": 6650,
																												"name": "FormDataItem"
																											}
																										}
																									}
																								}
																							}
																						},
																						{
																							"id": 6670,
																							"name": "raw",
																							"kind": 1024,
																							"kindString": "Property",
																							"flags": {
																								"isOptional": true
																							},
																							"comment": {
																								"shortText": "If the request method is PUT or POST, and the body is not already parsed in\nformData, then the unparsed request body elements are contained in this\narray."
																							},
																							"sources": [
																								{
																									"fileName": "npm/index.d.ts",
																									"line": 21954,
																									"character": 15
																								}
																							],
																							"type": {
																								"type": "array",
																								"elementType": {
																									"type": "reference",
																									"id": 6647,
																									"name": "UploadData"
																								}
																							}
																						}
																					],
																					"groups": [
																						{
																							"title": "Properties",
																							"kind": 1024,
																							"children": [
																								6665,
																								6666,
																								6670
																							]
																						}
																					],
																					"sources": [
																						{
																							"fileName": "npm/index.d.ts",
																							"line": 21933,
																							"character": 23
																						}
																					]
																				}
																			}
																		},
																		{
																			"id": 6658,
																			"name": "requestId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the request. Request IDs are unique within a browser session. As a\nresult, they could be used to relate different events of the same request."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21905,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6671,
																			"name": "tabId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the tab in which the request takes place. Set to -1 if the request\nisn't related to a tab."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21961,
																					"character": 15
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6674,
																			"name": "timeStamp",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The time when this signal is triggered, in milliseconds since the epoch."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21977,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6672,
																			"name": "type",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "How the requested resource will be used."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21966,
																					"character": 14
																				}
																			],
																			"type": {
																				"type": "reference",
																				"id": 6618,
																				"name": "ResourceType"
																			}
																		},
																		{
																			"id": 6659,
																			"name": "url",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21906,
																					"character": 13
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				6661,
																				6673,
																				6660,
																				6662,
																				6663,
																				6658,
																				6671,
																				6674,
																				6672,
																				6659
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 21900,
																			"character": 16
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 6638,
														"name": "BlockingResponse"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 6675,
							"name": "onBeforeSendHeaders",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired before sending an HTTP request, once the request headers are available.\nThis may occur after a TCP connection is made to the server, but before any\nHTTP data is sent."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21987,
									"character": 36
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6676,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {
												"returns": "If \"blocking\" is specified in the \"extraInfoSpec\" parameter, the event listener should return an object of this type.\n"
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 21987,
													"character": 58
												}
											],
											"signatures": [
												{
													"id": 6677,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"returns": "If \"blocking\" is specified in the \"extraInfoSpec\" parameter, the event listener should return an object of this type.\n"
													},
													"parameters": [
														{
															"id": 6678,
															"name": "details",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 6679,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 6683,
																			"name": "frameId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The value 0 indicates that the request happens in the main frame; a positive\nvalue indicates the ID of a subframe in which the request happens. If the\ndocument of a (sub-)frame is loaded (<code>type</code> is\n<code>main_frame</code> or <code>sub_frame</code>), <code>frameId</code>\nindicates the ID of this frame, not the ID of the outer frame. Frame IDs are\nunique within a tab."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22014,
																					"character": 17
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6686,
																			"name": "initiator",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The origin where the request was initiated. This does not change through\nredirects. If this is an opaque origin, the string 'null' will be used."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22032,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6682,
																			"name": "method",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "Standard HTTP method."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22004,
																					"character": 16
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6684,
																			"name": "parentFrameId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "ID of frame that wraps the frame which sent the request. Set to -1 if no\nparent frame exists."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22020,
																					"character": 23
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6689,
																			"name": "requestHeaders",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The HTTP request headers that are going to be sent out with this request."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22047,
																					"character": 24
																				}
																			],
																			"type": {
																				"type": "reference",
																				"id": 6633,
																				"name": "HttpHeaders"
																			}
																		},
																		{
																			"id": 6680,
																			"name": "requestId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the request. Request IDs are unique within a browser session. As a\nresult, they could be used to relate different events of the same request."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21998,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6685,
																			"name": "tabId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the tab in which the request takes place. Set to -1 if the request\nisn't related to a tab."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22026,
																					"character": 15
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6688,
																			"name": "timeStamp",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The time when this signal is triggered, in milliseconds since the epoch."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22042,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6687,
																			"name": "type",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "How the requested resource will be used."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22037,
																					"character": 14
																				}
																			],
																			"type": {
																				"type": "reference",
																				"id": 6618,
																				"name": "ResourceType"
																			}
																		},
																		{
																			"id": 6681,
																			"name": "url",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 21999,
																					"character": 13
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				6683,
																				6686,
																				6682,
																				6684,
																				6689,
																				6680,
																				6685,
																				6688,
																				6687,
																				6681
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 21993,
																			"character": 16
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 6638,
														"name": "BlockingResponse"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 6789,
							"name": "onCompleted",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a request is completed."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 22501,
									"character": 28
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6790,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 22501,
													"character": 50
												}
											],
											"signatures": [
												{
													"id": 6791,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 6792,
															"name": "details",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 6793,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 6797,
																			"name": "frameId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The value 0 indicates that the request happens in the main frame; a positive\nvalue indicates the ID of a subframe in which the request happens. If the\ndocument of a (sub-)frame is loaded (<code>type</code> is\n<code>main_frame</code> or <code>sub_frame</code>), <code>frameId</code>\nindicates the ID of this frame, not the ID of the outer frame. Frame IDs are\nunique within a tab."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22527,
																					"character": 17
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6804,
																			"name": "fromCache",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "Indicates if this response was fetched from disk cache."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22566,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "boolean"
																			}
																		},
																		{
																			"id": 6801,
																			"name": "initiator",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The origin where the request was initiated. This does not change through\nredirects. If this is an opaque origin, the string 'null' will be used."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22550,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6803,
																			"name": "ip",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The server IP address that the request was actually sent to. Note that it may\nbe a literal IPv6 address."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22561,
																					"character": 12
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6796,
																			"name": "method",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "Standard HTTP method."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22517,
																					"character": 16
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6798,
																			"name": "parentFrameId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "ID of frame that wraps the frame which sent the request. Set to -1 if no\nparent frame exists."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22533,
																					"character": 23
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6794,
																			"name": "requestId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the request. Request IDs are unique within a browser session. As a\nresult, they could be used to relate different events of the same request."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22511,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6806,
																			"name": "responseHeaders",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The HTTP response headers that were received along with this response."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22576,
																					"character": 25
																				}
																			],
																			"type": {
																				"type": "reference",
																				"id": 6633,
																				"name": "HttpHeaders"
																			}
																		},
																		{
																			"id": 6805,
																			"name": "statusCode",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "Standard HTTP status code returned by the server."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22571,
																					"character": 20
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6807,
																			"name": "statusLine",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "HTTP status line of the response or the 'HTTP/0.9 200 OK' string for HTTP/0.9\nresponses (i.e., responses that lack a status line) or an empty string if\nthere are no headers."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22583,
																					"character": 20
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6799,
																			"name": "tabId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the tab in which the request takes place. Set to -1 if the request\nisn't related to a tab."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22539,
																					"character": 15
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6802,
																			"name": "timeStamp",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The time when this signal is triggered, in milliseconds since the epoch."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22555,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6800,
																			"name": "type",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "How the requested resource will be used."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22544,
																					"character": 14
																				}
																			],
																			"type": {
																				"type": "reference",
																				"id": 6618,
																				"name": "ResourceType"
																			}
																		},
																		{
																			"id": 6795,
																			"name": "url",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22512,
																					"character": 13
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				6797,
																				6804,
																				6801,
																				6803,
																				6796,
																				6798,
																				6794,
																				6806,
																				6805,
																				6807,
																				6799,
																				6802,
																				6800,
																				6795
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 22506,
																			"character": 16
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 6808,
							"name": "onErrorOccurred",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when an error occurs."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 22591,
									"character": 32
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6809,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 22591,
													"character": 54
												}
											],
											"signatures": [
												{
													"id": 6810,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 6811,
															"name": "details",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 6812,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 6824,
																			"name": "error",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The error description. This string is <em>not</em> guaranteed to remain\nbackwards compatible between releases. You must not parse and act based upon\nits content."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22663,
																					"character": 15
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6816,
																			"name": "frameId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The value 0 indicates that the request happens in the main frame; a positive\nvalue indicates the ID of a subframe in which the request happens. If the\ndocument of a (sub-)frame is loaded (<code>type</code> is\n<code>main_frame</code> or <code>sub_frame</code>), <code>frameId</code>\nindicates the ID of this frame, not the ID of the outer frame. Frame IDs are\nunique within a tab."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22617,
																					"character": 17
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6823,
																			"name": "fromCache",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "Indicates if this response was fetched from disk cache."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22656,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "boolean"
																			}
																		},
																		{
																			"id": 6820,
																			"name": "initiator",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The origin where the request was initiated. This does not change through\nredirects. If this is an opaque origin, the string 'null' will be used."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22640,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6822,
																			"name": "ip",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The server IP address that the request was actually sent to. Note that it may\nbe a literal IPv6 address."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22651,
																					"character": 12
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6815,
																			"name": "method",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "Standard HTTP method."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22607,
																					"character": 16
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6817,
																			"name": "parentFrameId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "ID of frame that wraps the frame which sent the request. Set to -1 if no\nparent frame exists."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22623,
																					"character": 23
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6813,
																			"name": "requestId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the request. Request IDs are unique within a browser session. As a\nresult, they could be used to relate different events of the same request."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22601,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6818,
																			"name": "tabId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the tab in which the request takes place. Set to -1 if the request\nisn't related to a tab."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22629,
																					"character": 15
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6821,
																			"name": "timeStamp",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The time when this signal is triggered, in milliseconds since the epoch."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22645,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6819,
																			"name": "type",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "How the requested resource will be used."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22634,
																					"character": 14
																				}
																			],
																			"type": {
																				"type": "reference",
																				"id": 6618,
																				"name": "ResourceType"
																			}
																		},
																		{
																			"id": 6814,
																			"name": "url",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22602,
																					"character": 13
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				6824,
																				6816,
																				6823,
																				6820,
																				6822,
																				6815,
																				6817,
																				6813,
																				6818,
																				6821,
																				6819,
																				6814
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 22596,
																			"character": 16
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 6705,
							"name": "onHeadersReceived",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when HTTP response headers of a request have been received."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 22124,
									"character": 34
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6706,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {
												"returns": "If \"blocking\" is specified in the \"extraInfoSpec\" parameter, the event listener should return an object of this type.\n"
											},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 22124,
													"character": 56
												}
											],
											"signatures": [
												{
													"id": 6707,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"returns": "If \"blocking\" is specified in the \"extraInfoSpec\" parameter, the event listener should return an object of this type.\n"
													},
													"parameters": [
														{
															"id": 6708,
															"name": "details",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 6709,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 6713,
																			"name": "frameId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The value 0 indicates that the request happens in the main frame; a positive\nvalue indicates the ID of a subframe in which the request happens. If the\ndocument of a (sub-)frame is loaded (<code>type</code> is\n<code>main_frame</code> or <code>sub_frame</code>), <code>frameId</code>\nindicates the ID of this frame, not the ID of the outer frame. Frame IDs are\nunique within a tab."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22151,
																					"character": 17
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6717,
																			"name": "initiator",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The origin where the request was initiated. This does not change through\nredirects. If this is an opaque origin, the string 'null' will be used."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22174,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6712,
																			"name": "method",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "Standard HTTP method."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22141,
																					"character": 16
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6714,
																			"name": "parentFrameId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "ID of frame that wraps the frame which sent the request. Set to -1 if no\nparent frame exists."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22157,
																					"character": 23
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6710,
																			"name": "requestId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the request. Request IDs are unique within a browser session. As a\nresult, they could be used to relate different events of the same request."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22135,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6720,
																			"name": "responseHeaders",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The HTTP response headers that have been received with this response."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22190,
																					"character": 25
																				}
																			],
																			"type": {
																				"type": "reference",
																				"id": 6633,
																				"name": "HttpHeaders"
																			}
																		},
																		{
																			"id": 6721,
																			"name": "statusCode",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "Standard HTTP status code returned by the server."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22195,
																					"character": 20
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6719,
																			"name": "statusLine",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "HTTP status line of the response or the 'HTTP/0.9 200 OK' string for HTTP/0.9\nresponses (i.e., responses that lack a status line)."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22185,
																					"character": 20
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6715,
																			"name": "tabId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the tab in which the request takes place. Set to -1 if the request\nisn't related to a tab."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22163,
																					"character": 15
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6718,
																			"name": "timeStamp",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The time when this signal is triggered, in milliseconds since the epoch."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22179,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6716,
																			"name": "type",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "How the requested resource will be used."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22168,
																					"character": 14
																				}
																			],
																			"type": {
																				"type": "reference",
																				"id": 6618,
																				"name": "ResourceType"
																			}
																		},
																		{
																			"id": 6711,
																			"name": "url",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22136,
																					"character": 13
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				6713,
																				6717,
																				6712,
																				6714,
																				6710,
																				6720,
																				6721,
																				6719,
																				6715,
																				6718,
																				6716,
																				6711
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 22130,
																			"character": 16
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 6638,
														"name": "BlockingResponse"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 6750,
							"name": "onResponseStarted",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when the first byte of the response body is received. For HTTP\nrequests, this means that the status line and response headers are available."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 22316,
									"character": 34
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6751,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 22316,
													"character": 56
												}
											],
											"signatures": [
												{
													"id": 6752,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 6753,
															"name": "details",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 6754,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 6758,
																			"name": "frameId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The value 0 indicates that the request happens in the main frame; a positive\nvalue indicates the ID of a subframe in which the request happens. If the\ndocument of a (sub-)frame is loaded (<code>type</code> is\n<code>main_frame</code> or <code>sub_frame</code>), <code>frameId</code>\nindicates the ID of this frame, not the ID of the outer frame. Frame IDs are\nunique within a tab."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22342,
																					"character": 17
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6765,
																			"name": "fromCache",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "Indicates if this response was fetched from disk cache."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22381,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "boolean"
																			}
																		},
																		{
																			"id": 6762,
																			"name": "initiator",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The origin where the request was initiated. This does not change through\nredirects. If this is an opaque origin, the string 'null' will be used."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22365,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6764,
																			"name": "ip",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The server IP address that the request was actually sent to. Note that it may\nbe a literal IPv6 address."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22376,
																					"character": 12
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6757,
																			"name": "method",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "Standard HTTP method."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22332,
																					"character": 16
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6759,
																			"name": "parentFrameId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "ID of frame that wraps the frame which sent the request. Set to -1 if no\nparent frame exists."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22348,
																					"character": 23
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6755,
																			"name": "requestId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the request. Request IDs are unique within a browser session. As a\nresult, they could be used to relate different events of the same request."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22326,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6767,
																			"name": "responseHeaders",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The HTTP response headers that were received along with this response."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22391,
																					"character": 25
																				}
																			],
																			"type": {
																				"type": "reference",
																				"id": 6633,
																				"name": "HttpHeaders"
																			}
																		},
																		{
																			"id": 6766,
																			"name": "statusCode",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "Standard HTTP status code returned by the server."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22386,
																					"character": 20
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6768,
																			"name": "statusLine",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "HTTP status line of the response or the 'HTTP/0.9 200 OK' string for HTTP/0.9\nresponses (i.e., responses that lack a status line) or an empty string if\nthere are no headers."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22398,
																					"character": 20
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6760,
																			"name": "tabId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the tab in which the request takes place. Set to -1 if the request\nisn't related to a tab."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22354,
																					"character": 15
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6763,
																			"name": "timeStamp",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The time when this signal is triggered, in milliseconds since the epoch."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22370,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6761,
																			"name": "type",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "How the requested resource will be used."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22359,
																					"character": 14
																				}
																			],
																			"type": {
																				"type": "reference",
																				"id": 6618,
																				"name": "ResourceType"
																			}
																		},
																		{
																			"id": 6756,
																			"name": "url",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22327,
																					"character": 13
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				6758,
																				6765,
																				6762,
																				6764,
																				6757,
																				6759,
																				6755,
																				6767,
																				6766,
																				6768,
																				6760,
																				6763,
																				6761,
																				6756
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 22321,
																			"character": 16
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 6690,
							"name": "onSendHeaders",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired just before a request is going to be sent to the server (modifications\nof previous onBeforeSendHeaders callbacks are visible by the time\nonSendHeaders is fired)."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 22057,
									"character": 30
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6691,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 22057,
													"character": 52
												}
											],
											"signatures": [
												{
													"id": 6692,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 6693,
															"name": "details",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "\n"
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 6694,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 6698,
																			"name": "frameId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The value 0 indicates that the request happens in the main frame; a positive\nvalue indicates the ID of a subframe in which the request happens. If the\ndocument of a (sub-)frame is loaded (<code>type</code> is\n<code>main_frame</code> or <code>sub_frame</code>), <code>frameId</code>\nindicates the ID of this frame, not the ID of the outer frame. Frame IDs are\nunique within a tab."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22083,
																					"character": 17
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6702,
																			"name": "initiator",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The origin where the request was initiated. This does not change through\nredirects. If this is an opaque origin, the string 'null' will be used."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22106,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6697,
																			"name": "method",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "Standard HTTP method."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22073,
																					"character": 16
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6699,
																			"name": "parentFrameId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "ID of frame that wraps the frame which sent the request. Set to -1 if no\nparent frame exists."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22089,
																					"character": 23
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6704,
																			"name": "requestHeaders",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"shortText": "The HTTP request headers that have been sent out with this request."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22116,
																					"character": 24
																				}
																			],
																			"type": {
																				"type": "reference",
																				"id": 6633,
																				"name": "HttpHeaders"
																			}
																		},
																		{
																			"id": 6695,
																			"name": "requestId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the request. Request IDs are unique within a browser session. As a\nresult, they could be used to relate different events of the same request."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22067,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 6700,
																			"name": "tabId",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The ID of the tab in which the request takes place. Set to -1 if the request\nisn't related to a tab."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22095,
																					"character": 15
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6703,
																			"name": "timeStamp",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "The time when this signal is triggered, in milliseconds since the epoch."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22111,
																					"character": 19
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 6701,
																			"name": "type",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"comment": {
																				"shortText": "How the requested resource will be used."
																			},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22100,
																					"character": 14
																				}
																			],
																			"type": {
																				"type": "reference",
																				"id": 6618,
																				"name": "ResourceType"
																			}
																		},
																		{
																			"id": 6696,
																			"name": "url",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "npm/index.d.ts",
																					"line": 22068,
																					"character": 13
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				6698,
																				6702,
																				6697,
																				6699,
																				6704,
																				6695,
																				6700,
																				6703,
																				6701,
																				6696
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "npm/index.d.ts",
																			"line": 22062,
																			"character": 16
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 6613,
							"name": "handlerBehaviorChanged",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 21887,
									"character": 42
								}
							],
							"signatures": [
								{
									"id": 6614,
									"name": "handlerBehaviorChanged",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Needs to be called when the behavior of the webRequest handlers has changed\nto prevent incorrect handling due to caching. This function call is\nexpensive. Don't call it often."
									},
									"parameters": [
										{
											"id": 6615,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6616,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 21888,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 6617,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								6638,
								6628,
								6647
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								6650,
								6633,
								6651,
								6623,
								6625,
								6619,
								6620,
								6626,
								6627,
								6622,
								6624,
								6621,
								6618
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								6652,
								6825,
								6722,
								6769,
								6653,
								6675,
								6789,
								6808,
								6705,
								6750,
								6690
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								6613
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 21734,
							"character": 29
						}
					]
				},
				{
					"id": 6832,
					"name": "windows",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Use the <code>chrome.windows</code> API to interact with browser windows. You\ncan use this API to create, modify, and rearrange windows in the browser.",
						"tags": [
							{
								"tag": "chrome-namespace",
								"text": "windows\n"
							}
						]
					},
					"children": [
						{
							"id": 6940,
							"name": "QueryOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 6941,
									"name": "populate",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "If true, the {@link windows.Window} object has a <var>tabs</var> property\nthat contains a list of the {@link tabs.Tab} objects. The <code>Tab</code>\nobjects only contain the <code>url</code>, <code>pendingUrl</code>,\n<code>title</code>, and <code>favIconUrl</code> properties if the extension's\nmanifest file includes the <code>\"tabs\"</code> permission."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 22805,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 6942,
									"name": "windowTypes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "If set, the {@link windows.Window} returned is filtered based on its type. If\nunset, the default filter is set to <code>['normal', 'popup']</code>."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 22811,
											"character": 17
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 5921,
											"name": "WindowType"
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										6941,
										6942
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 22797,
									"character": 33
								}
							]
						},
						{
							"id": 6926,
							"name": "Window",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 6937,
									"name": "alwaysOnTop",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Whether the window is set to be always on top."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 22782,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 6928,
									"name": "focused",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Whether the window is currently the focused window."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 22728,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 6932,
									"name": "height",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The height of the window, including the frame, in pixels. In some\ncircumstances a window may not be assigned a <code>height</code> property;\nfor example, when querying closed windows from the {@link sessions} API."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 22756,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6927,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The ID of the window. Window IDs are unique within a browser session. In some\ncircumstances a window may not be assigned an <code>ID</code> property; for\nexample, when querying windows using the {@link sessions} API, in which case\na session ID may be present."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 22723,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6934,
									"name": "incognito",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Whether the window is incognito."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 22767,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 6930,
									"name": "left",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The offset of the window from the left edge of the screen in pixels. In some\ncircumstances a window may not be assigned a <code>left</code> property; for\nexample, when querying closed windows from the {@link sessions} API."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 22742,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6938,
									"name": "sessionId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The session ID used to uniquely identify a window, obtained from the {@link\nsessions} API."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 22788,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 6936,
									"name": "state",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The state of this browser window."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 22777,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"id": 6925,
										"name": "WindowState"
									}
								},
								{
									"id": 6933,
									"name": "tabs",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Array of {@link tabs.Tab} objects representing the current tabs in the\nwindow."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 22762,
											"character": 10
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 5892,
											"name": "Tab"
										}
									}
								},
								{
									"id": 6929,
									"name": "top",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The offset of the window from the top edge of the screen in pixels. In some\ncircumstances a window may not be assigned a <code>top</code> property; for\nexample, when querying closed windows from the {@link sessions} API."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 22735,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6935,
									"name": "type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The type of browser window this is."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 22772,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 5921,
										"name": "WindowType"
									}
								},
								{
									"id": 6931,
									"name": "width",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The width of the window, including the frame, in pixels. In some\ncircumstances a window may not be assigned a <code>width</code> property; for\nexample, when querying closed windows from the {@link sessions} API."
									},
									"sources": [
										{
											"fileName": "npm/index.d.ts",
											"line": 22749,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										6937,
										6928,
										6932,
										6927,
										6934,
										6930,
										6938,
										6936,
										6933,
										6929,
										6935,
										6931
									]
								}
							],
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 22716,
									"character": 27
								}
							]
						},
						{
							"id": 6939,
							"name": "CreateType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "Specifies what type of browser window to create. 'panel' is deprecated and is\navailable only to existing whitelisted extensions on Chrome OS."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 22795,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "normal"
									},
									{
										"type": "literal",
										"value": "popup"
									},
									{
										"type": "literal",
										"value": "panel"
									}
								]
							}
						},
						{
							"id": 6925,
							"name": "WindowState",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The state of this browser window. In some circumstances a window may not be\nassigned a <code>state</code> property; for example, when querying closed\nwindows from the {@link sessions} API."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 22714,
									"character": 27
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "normal"
									},
									{
										"type": "literal",
										"value": "minimized"
									},
									{
										"type": "literal",
										"value": "maximized"
									},
									{
										"type": "literal",
										"value": "fullscreen"
									},
									{
										"type": "literal",
										"value": "locked-fullscreen"
									}
								]
							}
						},
						{
							"id": 6924,
							"name": "WindowType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "The type of browser window this is. In some circumstances a window may not be\nassigned a <code>type</code> property; for example, when querying closed\nwindows from the {@link sessions} API."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 22707,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "normal"
									},
									{
										"type": "literal",
										"value": "popup"
									},
									{
										"type": "literal",
										"value": "panel"
									},
									{
										"type": "literal",
										"value": "app"
									},
									{
										"type": "literal",
										"value": "devtools"
									}
								]
							}
						},
						{
							"id": 6944,
							"name": "WINDOW_ID_CURRENT",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "The windowId value that represents the <a\nhref='windows#current-window'>current window</a>."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 22823,
									"character": 34
								}
							],
							"type": {
								"type": "literal",
								"value": -2
							}
						},
						{
							"id": 6943,
							"name": "WINDOW_ID_NONE",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "The windowId value that represents the absence of a chrome browser window."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 22817,
									"character": 31
								}
							],
							"type": {
								"type": "literal",
								"value": -1
							}
						},
						{
							"id": 6957,
							"name": "onBoundsChanged",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a window has been resized; this event is only dispatched when the\nnew bounds are committed, and not for in-progress changes."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 23139,
									"character": 32
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6958,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 23139,
													"character": 54
												}
											],
											"signatures": [
												{
													"id": 6959,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 6960,
															"name": "window",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Details of the window. The tabs will not be populated for the window.\n"
															},
															"type": {
																"type": "reference",
																"id": 6926,
																"name": "Window"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 6945,
							"name": "onCreated",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a window is created."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 23098,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6946,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 23098,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 6947,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 6948,
															"name": "window",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Details of the created window.\n"
															},
															"type": {
																"type": "reference",
																"id": 6926,
																"name": "Window"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 6953,
							"name": "onFocusChanged",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when the currently focused window changes. Returns\n<code>chrome.windows.WINDOW_ID_NONE</code> if all Chrome windows have lost\nfocus. <b>Note:</b> On some Linux window managers,\n<code>WINDOW_ID_NONE</code> is always sent immediately preceding a switch\nfrom one Chrome window to another."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 23126,
									"character": 31
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6954,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 23126,
													"character": 53
												}
											],
											"signatures": [
												{
													"id": 6955,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 6956,
															"name": "windowId",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "ID of the newly-focused window.\n"
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 6949,
							"name": "onRemoved",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "Fired when a window is removed (closed)."
							},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 23110,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 2537,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6950,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"comment": {},
											"sources": [
												{
													"fileName": "npm/index.d.ts",
													"line": 23110,
													"character": 48
												}
											],
											"signatures": [
												{
													"id": 6951,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 6952,
															"name": "windowId",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "ID of the removed window.\n"
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								],
								"name": "chrome.events.Event"
							}
						},
						{
							"id": 6883,
							"name": "create",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 22943,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 6884,
									"name": "create",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates (opens) a new browser window with any optional sizing, position, or\ndefault URL provided."
									},
									"parameters": [
										{
											"id": 6885,
											"name": "createData",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6886,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 6893,
															"name": "focused",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "If <code>true</code>, opens an active window. If <code>false</code>, opens an\ninactive window."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 22988,
																	"character": 15
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 6892,
															"name": "height",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The height in pixels of the new window, including the frame. If not\nspecified, defaults to a natural height."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 22982,
																	"character": 14
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 6894,
															"name": "incognito",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether the new window should be an incognito window."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 22993,
																	"character": 17
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 6889,
															"name": "left",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The number of pixels to position the new window from the left edge of the\nscreen. If not specified, the new window is offset naturally from the last\nfocused window. This value is ignored for panels."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 22963,
																	"character": 12
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 6897,
															"name": "setSelfAsOpener",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "If <code>true</code>, the newly-created window's 'window.opener' is set to\nthe caller and is in the same <a\nhref=\"https://www.w3.org/TR/html51/browsers.html#unit-of-related-browsing-contexts\">unit of related browsing contexts</a> as the caller."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 23013,
																	"character": 23
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 6896,
															"name": "state",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The initial state of the window. The <code>minimized</code>,\n<code>maximized</code>, and <code>fullscreen</code> states cannot be combined\nwith <code>left</code>, <code>top</code>, <code>width</code>, or\n<code>height</code>."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 23006,
																	"character": 13
																}
															],
															"type": {
																"type": "reference",
																"id": 6925,
																"name": "WindowState"
															}
														},
														{
															"id": 6888,
															"name": "tabId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The ID of the tab to add to the new window."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 22956,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 6890,
															"name": "top",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The number of pixels to position the new window from the top edge of the\nscreen. If not specified, the new window is offset naturally from the last\nfocused window. This value is ignored for panels."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 22970,
																	"character": 11
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 6895,
															"name": "type",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Specifies what type of browser window to create."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 22998,
																	"character": 12
																}
															],
															"type": {
																"type": "reference",
																"id": 6939,
																"name": "CreateType"
															}
														},
														{
															"id": 6887,
															"name": "url",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "A URL or array of URLs to open as tabs in the window. Fully-qualified URLs\nmust include a scheme, e.g., 'http://www.google.com', not 'www.google.com'.\nNon-fully-qualified URLs are considered relative within the extension.\nDefaults to the New Tab Page."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 22951,
																	"character": 11
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "string"
																		}
																	}
																]
															}
														},
														{
															"id": 6891,
															"name": "width",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The width in pixels of the new window, including the frame. If not specified,\ndefaults to a natural width."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 22976,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																6893,
																6892,
																6894,
																6889,
																6897,
																6896,
																6888,
																6890,
																6895,
																6887,
																6891
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 22944,
															"character": 18
														}
													]
												}
											}
										},
										{
											"id": 6898,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6899,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 23015,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 6900,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 6901,
																	"name": "window",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"text": "Contains details about the created window.\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 6926,
																		"name": "Window"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 6833,
							"name": "get",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 22833,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 6834,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets details about a window."
									},
									"parameters": [
										{
											"id": 6835,
											"name": "windowId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 6836,
											"name": "queryOptions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 6940,
												"name": "QueryOptions"
											}
										},
										{
											"id": 6837,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6838,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 22836,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 6839,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 6840,
																	"name": "window",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 6926,
																		"name": "Window"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								},
								{
									"id": 6841,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets details about a window."
									},
									"parameters": [
										{
											"id": 6842,
											"name": "windowId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 6843,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6844,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 22850,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 6845,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 6846,
																	"name": "window",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 6926,
																		"name": "Window"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 6871,
							"name": "getAll",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 22916,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 6872,
									"name": "getAll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all windows."
									},
									"parameters": [
										{
											"id": 6873,
											"name": "queryOptions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 6940,
												"name": "QueryOptions"
											}
										},
										{
											"id": 6874,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6875,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 22918,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 6876,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 6877,
																	"name": "windows",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 6926,
																			"name": "Window"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								},
								{
									"id": 6878,
									"name": "getAll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all windows."
									},
									"parameters": [
										{
											"id": 6879,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6880,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 22930,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 6881,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 6882,
																	"name": "windows",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"id": 6926,
																			"name": "Window"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 6847,
							"name": "getCurrent",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 22862,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 6848,
									"name": "getCurrent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the <a href='#current-window'>current window</a>."
									},
									"parameters": [
										{
											"id": 6849,
											"name": "queryOptions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 6940,
												"name": "QueryOptions"
											}
										},
										{
											"id": 6850,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6851,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 22864,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 6852,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 6853,
																	"name": "window",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 6926,
																		"name": "Window"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								},
								{
									"id": 6854,
									"name": "getCurrent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the <a href='#current-window'>current window</a>."
									},
									"parameters": [
										{
											"id": 6855,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6856,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 22876,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 6857,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 6858,
																	"name": "window",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 6926,
																		"name": "Window"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 6859,
							"name": "getLastFocused",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 22889,
									"character": 34
								}
							],
							"signatures": [
								{
									"id": 6860,
									"name": "getLastFocused",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the window that was most recently focused &mdash; typically the window\n'on top'."
									},
									"parameters": [
										{
											"id": 6861,
											"name": "queryOptions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 6940,
												"name": "QueryOptions"
											}
										},
										{
											"id": 6862,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6863,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 22891,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 6864,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 6865,
																	"name": "window",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 6926,
																		"name": "Window"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								},
								{
									"id": 6866,
									"name": "getLastFocused",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the window that was most recently focused &mdash; typically the window\n'on top'."
									},
									"parameters": [
										{
											"id": 6867,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6868,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 22904,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 6869,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 6870,
																	"name": "window",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 6926,
																		"name": "Window"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 6918,
							"name": "remove",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 23090,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 6919,
									"name": "remove",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Removes (closes) a window and all the tabs inside it."
									},
									"parameters": [
										{
											"id": 6920,
											"name": "windowId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 6921,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6922,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 23092,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 6923,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 6902,
							"name": "update",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "npm/index.d.ts",
									"line": 23029,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 6903,
									"name": "update",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Updates the properties of a window. Specify only the properties that to be\nchanged; unspecified properties are unchanged."
									},
									"parameters": [
										{
											"id": 6904,
											"name": "windowId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 6905,
											"name": "updateInfo",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6906,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 6912,
															"name": "drawAttention",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "If <code>true</code>, causes the window to be displayed in a manner that\ndraws the user's attention to the window, without changing the focused\nwindow. The effect lasts until the user changes focus to the window. This\noption has no effect if the window already has focus. Set to\n<code>false</code> to cancel a previous <code>drawAttention</code> request."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 23071,
																	"character": 21
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 6911,
															"name": "focused",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "If <code>true</code>, brings the window to the front; cannot be combined with\nthe state 'minimized'. If <code>false</code>, brings the next window in the\nz-order to the front; cannot be combined with the state 'fullscreen' or\n'maximized'."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 23062,
																	"character": 15
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 6910,
															"name": "height",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The height to resize the window to in pixels. This value is ignored for\npanels."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 23054,
																	"character": 14
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 6907,
															"name": "left",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The offset from the left edge of the screen to move the window to in pixels.\nThis value is ignored for panels."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 23036,
																	"character": 12
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 6913,
															"name": "state",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The new state of the window. The 'minimized', 'maximized', and 'fullscreen'\nstates cannot be combined with 'left', 'top', 'width', or 'height'."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 23077,
																	"character": 13
																}
															],
															"type": {
																"type": "reference",
																"id": 6925,
																"name": "WindowState"
															}
														},
														{
															"id": 6908,
															"name": "top",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The offset from the top edge of the screen to move the window to in pixels.\nThis value is ignored for panels."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 23042,
																	"character": 11
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 6909,
															"name": "width",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The width to resize the window to in pixels. This value is ignored for\npanels."
															},
															"sources": [
																{
																	"fileName": "npm/index.d.ts",
																	"line": 23048,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																6912,
																6911,
																6910,
																6907,
																6913,
																6908,
																6909
															]
														}
													],
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 23031,
															"character": 17
														}
													]
												}
											}
										},
										{
											"id": 6914,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6915,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "npm/index.d.ts",
															"line": 23079,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 6916,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 6917,
																	"name": "window",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"text": "\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 6926,
																		"name": "Window"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								6940,
								6926
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								6939,
								6925,
								6924
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								6944,
								6943,
								6957,
								6945,
								6953,
								6949
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								6883,
								6833,
								6871,
								6847,
								6859,
								6918,
								6902
							]
						}
					],
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 22701,
							"character": 26
						}
					]
				},
				{
					"id": 8,
					"name": "global",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "npm/index.d.ts",
							"line": 29,
							"character": 13
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"name": "Window"
						}
					}
				}
			],
			"groups": [
				{
					"title": "Namespaces",
					"kind": 2,
					"children": [
						9,
						25,
						124,
						174,
						191,
						821,
						971,
						1072,
						1199,
						1262,
						1356,
						1372,
						1384,
						1457,
						1519,
						1606,
						1670,
						1694,
						1870,
						1973,
						1998,
						2199,
						2210,
						2224,
						2231,
						2424,
						2530,
						2626,
						2604,
						2692,
						2739,
						2764,
						3169,
						3316,
						3370,
						3443,
						3473,
						3544,
						3566,
						3568,
						3820,
						3864,
						3968,
						3906,
						3934,
						3949,
						3998,
						4144,
						4169,
						4259,
						4294,
						4363,
						4373,
						4412,
						4488,
						4495,
						4585,
						4544,
						4642,
						4667,
						4744,
						4775,
						4973,
						5006,
						5018,
						5063,
						5069,
						5094,
						5179,
						5403,
						5420,
						5480,
						5547,
						6026,
						6066,
						6036,
						6121,
						6164,
						6389,
						6461,
						6476,
						6612,
						6832
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						8
					]
				}
			],
			"sources": [
				{
					"fileName": "npm/index.d.ts",
					"line": 27,
					"character": 24
				}
			]
		},
		{
			"id": 2,
			"name": "DirectoryEntry",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"sources": [
				{
					"fileName": "npm/index.d.ts",
					"line": 20,
					"character": 24
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 1,
					"name": "Entry"
				}
			]
		},
		{
			"id": 1,
			"name": "Entry",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"sources": [
				{
					"fileName": "npm/index.d.ts",
					"line": 19,
					"character": 15
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 2,
					"name": "DirectoryEntry"
				},
				{
					"type": "reference",
					"id": 3,
					"name": "FileEntry"
				}
			]
		},
		{
			"id": 3,
			"name": "FileEntry",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"sources": [
				{
					"fileName": "npm/index.d.ts",
					"line": 21,
					"character": 19
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 1,
					"name": "Entry"
				}
			]
		},
		{
			"id": 4,
			"name": "FileSystem",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"sources": [
				{
					"fileName": "npm/index.d.ts",
					"line": 22,
					"character": 20
				}
			]
		},
		{
			"id": 5,
			"name": "LocalMediaStream",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"sources": [
				{
					"fileName": "npm/index.d.ts",
					"line": 23,
					"character": 26
				}
			]
		},
		{
			"id": 6,
			"name": "DOMFileSystem",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "npm/index.d.ts",
					"line": 25,
					"character": 18
				}
			],
			"type": {
				"type": "reference",
				"id": 4,
				"name": "FileSystem"
			}
		}
	],
	"groups": [
		{
			"title": "Namespaces",
			"kind": 2,
			"children": [
				7
			]
		},
		{
			"title": "Interfaces",
			"kind": 256,
			"children": [
				2,
				1,
				3,
				4,
				5
			]
		},
		{
			"title": "Type aliases",
			"kind": 4194304,
			"children": [
				6
			]
		}
	],
	"sources": [
		{
			"fileName": "npm/index.d.ts",
			"line": 1,
			"character": 0
		}
	]
}